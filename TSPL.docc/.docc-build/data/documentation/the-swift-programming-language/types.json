{"sections":[],"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"text":"In Swift, there are two kinds of types: named types and compound types.","type":"text"},{"type":"text","text":" "},{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"named type","type":"text"}]},{"text":" is a type that can be given a particular name when it’s defined.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Named types include classes, structures, enumerations, and protocols."},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"instances of a user-defined class named "},{"code":"MyClass","type":"codeVoice"},{"text":" have the type ","type":"text"},{"type":"codeVoice","code":"MyClass"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In addition to user-defined named types,"},{"type":"text","text":" "},{"text":"the Swift standard library defines many commonly used named types,","type":"text"},{"text":" ","type":"text"},{"text":"including those that represent arrays, dictionaries, and optional values.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Data types that are normally considered basic or primitive in other languages —","type":"text"},{"type":"text","text":" "},{"text":"such as types that represent numbers, characters, and strings —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are actually named types,"},{"type":"text","text":" "},{"type":"text","text":"defined and implemented in the Swift standard library using structures."},{"text":" ","type":"text"},{"type":"text","text":"Because they’re named types,"},{"text":" ","type":"text"},{"type":"text","text":"you can extend their behavior to suit the needs of your program,"},{"text":" ","type":"text"},{"text":"using an extension declaration,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"discussed in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"text":"compound type","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a type without a name, defined in the Swift language itself."},{"text":" ","type":"text"},{"type":"text","text":"There are two compound types: function types and tuple types."},{"text":" ","type":"text"},{"type":"text","text":"A compound type may contain named types and other compound types."},{"type":"text","text":" "},{"text":"For example, the tuple type ","type":"text"},{"type":"codeVoice","code":"(Int, (Int, Int))"},{"type":"text","text":" contains two elements:"},{"type":"text","text":" "},{"type":"text","text":"The first is the named type "},{"type":"codeVoice","code":"Int"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the second is another compound type "},{"type":"codeVoice","code":"(Int, Int)"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"You can put parentheses around a named type or a compound type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, adding parentheses around a type doesn’t have any effect."},{"text":" ","type":"text"},{"text":"For example, ","type":"text"},{"code":"(Int)","type":"codeVoice"},{"type":"text","text":" is equivalent to "},{"type":"codeVoice","code":"Int"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This chapter discusses the types defined in the Swift language itself","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and describes the type inference behavior of Swift."}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"function-type"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"array-type","type":"text"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"dictionary-type"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"type-identifier"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"text":"tuple-type","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional-type"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"implicitly-unwrapped-optional-type","type":"text"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"protocol-composition-type"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"text":"opaque-type","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"boxed-protocol-type"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"metatype-type","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"any-type","type":"text"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"self-type"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"code":"(","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":")"}]}]}],"name":"Grammar of a type"},{"type":"heading","text":"Type Annotation","level":2,"anchor":"Type-Annotation"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type annotation","type":"text"}]},{"type":"text","text":" explicitly specifies the type of a variable or expression."},{"type":"text","text":" "},{"type":"text","text":"Type annotations begin with a colon ("},{"type":"codeVoice","code":":"},{"type":"text","text":") and end with a type,"},{"type":"text","text":" "},{"text":"as the following examples show:","type":"text"}]},{"code":["let someTuple: (Double, Double) = (3.14159, 2.71828)","func someFunction(a: Int) { \/* ... *\/ }"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the first example,"},{"type":"text","text":" "},{"text":"the expression ","type":"text"},{"type":"codeVoice","code":"someTuple"},{"text":" is specified to have the tuple type ","type":"text"},{"type":"codeVoice","code":"(Double, Double)"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In the second example,"},{"text":" ","type":"text"},{"type":"text","text":"the parameter "},{"type":"codeVoice","code":"a"},{"text":" to the function ","type":"text"},{"code":"someFunction","type":"codeVoice"},{"type":"text","text":" is specified to have the type "},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"Type annotations can contain an optional list of type attributes before the type."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"type-annotation","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"code":":","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"attributes"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"}]}],"style":"note","name":"Grammar of a type annotation","type":"aside"},{"text":"Type Identifier","level":2,"type":"heading","anchor":"Type-Identifier"},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"type identifier","type":"text"}]},{"type":"text","text":" refers to either a named type"},{"type":"text","text":" "},{"type":"text","text":"or a type alias of a named or compound type."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Most of the time, a type identifier directly refers to a named type","type":"text"},{"text":" ","type":"text"},{"text":"with the same name as the identifier.","type":"text"},{"type":"text","text":" "},{"text":"For example, ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" is a type identifier that directly refers to the named type "},{"type":"codeVoice","code":"Int"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the type identifier "},{"type":"codeVoice","code":"Dictionary<String, Int>"},{"type":"text","text":" directly refers"},{"type":"text","text":" "},{"type":"text","text":"to the named type "},{"type":"codeVoice","code":"Dictionary<String, Int>"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two cases in which a type identifier doesn’t refer to a type with the same name."},{"text":" ","type":"text"},{"text":"In the first case, a type identifier refers to a type alias of a named or compound type.","type":"text"},{"type":"text","text":" "},{"text":"For instance, in the example below,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the use of "},{"type":"codeVoice","code":"Point"},{"text":" in the type annotation refers to the tuple type ","type":"text"},{"code":"(Int, Int)","type":"codeVoice"},{"text":".","type":"text"}]},{"syntax":"swift","code":["typealias Point = (Int, Int)","let origin: Point = (0, 0)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"In the second case, a type identifier uses dot ("},{"code":".","type":"codeVoice"},{"text":") syntax to refer to named types","type":"text"},{"type":"text","text":" "},{"type":"text","text":"declared in other modules or nested within other types."},{"type":"text","text":" "},{"type":"text","text":"For example, the type identifier in the following code references the named type "},{"code":"MyType","type":"codeVoice"},{"type":"text","text":" "},{"text":"that’s declared in the ","type":"text"},{"code":"ExampleModule","type":"codeVoice"},{"text":" module.","type":"text"}],"type":"paragraph"},{"code":["var someValue: ExampleModule.MyType"],"type":"codeListing","syntax":"swift"},{"name":"Grammar of a type identifier","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"type-identifier","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"type-name"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-argument-clause"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"text":" | ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-name"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-argument-clause"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"."}]},{"text":" ","type":"text"},{"inlineContent":[{"text":"type-identifier","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"type-name","type":"text"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"identifier"}]}],"type":"paragraph"}],"style":"note","type":"aside"},{"anchor":"Tuple-Type","text":"Tuple Type","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"tuple type"}],"type":"emphasis"},{"type":"text","text":" is a comma-separated list of types, enclosed in parentheses."}]},{"type":"paragraph","inlineContent":[{"text":"You can use a tuple type as the return type of a function","type":"text"},{"text":" ","type":"text"},{"text":"to enable the function to return a single tuple containing multiple values.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can also name the elements of a tuple type and use those names to refer to"},{"type":"text","text":" "},{"type":"text","text":"the values of the individual elements. An element name consists of an identifier"},{"type":"text","text":" "},{"text":"followed immediately by a colon (:). For an example that demonstrates both of","type":"text"},{"type":"text","text":" "},{"text":"these features, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-with-Multiple-Return-Values","type":"reference","isActive":true},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"When an element of a tuple type has a name,"},{"type":"text","text":" "},{"type":"text","text":"that name is part of the type."}],"type":"paragraph"},{"code":["var someTuple = (top: 10, bottom: 12)  \/\/ someTuple is of type (top: Int, bottom: Int)","someTuple = (top: 4, bottom: 42) \/\/ OK: names match","someTuple = (9, 99)              \/\/ OK: names are inferred","someTuple = (left: 5, right: 5)  \/\/ Error: names don't match"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All tuple types contain two or more types,"},{"text":" ","type":"text"},{"text":"except for ","type":"text"},{"type":"codeVoice","code":"Void"},{"type":"text","text":" which is a type alias for the empty tuple type, "},{"code":"()","type":"codeVoice"},{"text":".","type":"text"}]},{"name":"Grammar of a tuple type","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"tuple-type"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"("}]},{"type":"text","text":" "},{"inlineContent":[{"code":")","type":"codeVoice"}],"type":"strong"},{"text":" | ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"("}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"tuple-type-element"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":","}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"tuple-type-element-list","type":"text"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":")","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"tuple-type-element-list"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tuple-type-element"}]},{"type":"text","text":" | "},{"inlineContent":[{"type":"text","text":"tuple-type-element"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":","}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"tuple-type-element-list"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"text":"tuple-type-element","type":"text"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"element-name"}]},{"text":" ","type":"text"},{"inlineContent":[{"text":"type-annotation","type":"text"}],"type":"emphasis"},{"text":" | ","type":"text"},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"element-name"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"identifier"}],"type":"emphasis"}]}],"style":"note"},{"level":2,"type":"heading","anchor":"Function-Type","text":"Function Type"},{"inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"function type","type":"text"}]},{"type":"text","text":" represents the type of a function, method, or closure"},{"text":" ","type":"text"},{"type":"text","text":"and consists of a parameter and return type separated by an arrow ("},{"code":"->","type":"codeVoice"},{"text":"):","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["(<#parameter type#>) -> <#return type#>"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"parameter type"}]},{"type":"text","text":" is comma-separated list of types."},{"type":"text","text":" "},{"text":"Because the ","type":"text"},{"inlineContent":[{"text":"return type","type":"text"}],"type":"emphasis"},{"type":"text","text":" can be a tuple type,"},{"type":"text","text":" "},{"type":"text","text":"function types support functions and methods"},{"type":"text","text":" "},{"type":"text","text":"that return multiple values."}]},{"inlineContent":[{"text":"A parameter of the function type ","type":"text"},{"type":"codeVoice","code":"() -> T"},{"text":" ","type":"text"},{"type":"text","text":"(where "},{"type":"codeVoice","code":"T"},{"text":" is any type)","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can apply the "},{"code":"autoclosure","type":"codeVoice"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"text":"to implicitly create a closure at its call sites.","type":"text"},{"type":"text","text":" "},{"text":"This provides a syntactically convenient way","type":"text"},{"text":" ","type":"text"},{"text":"to defer the evaluation of an expression","type":"text"},{"type":"text","text":" "},{"type":"text","text":"without needing to write an explicit closure"},{"type":"text","text":" "},{"type":"text","text":"when you call the function."},{"type":"text","text":" "},{"text":"For an example of an autoclosure function type parameter,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A function type can have variadic parameters in its "},{"inlineContent":[{"text":"parameter type","type":"text"}],"type":"emphasis"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Syntactically,"},{"type":"text","text":" "},{"text":"a variadic parameter consists of a base type name followed immediately by three dots (","type":"text"},{"code":"...","type":"codeVoice"},{"text":"),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as in "},{"type":"codeVoice","code":"Int..."},{"type":"text","text":". A variadic parameter is treated as an array that contains elements"},{"type":"text","text":" "},{"text":"of the base type name. For instance, the variadic parameter ","type":"text"},{"type":"codeVoice","code":"Int..."},{"type":"text","text":" is treated"},{"type":"text","text":" "},{"text":"as ","type":"text"},{"type":"codeVoice","code":"[Int]"},{"type":"text","text":". For an example that uses a variadic parameter,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Variadic-Parameters"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"To specify an in-out parameter, prefix the parameter type with the "},{"code":"inout","type":"codeVoice"},{"text":" keyword.","type":"text"},{"type":"text","text":" "},{"text":"You can’t mark a variadic parameter or a return type with the ","type":"text"},{"type":"codeVoice","code":"inout"},{"type":"text","text":" keyword."},{"text":" ","type":"text"},{"text":"In-out parameters are discussed in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#In-Out-Parameters","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a function type has only one parameter"},{"type":"text","text":" "},{"text":"and that parameter’s type is a tuple type,","type":"text"},{"text":" ","type":"text"},{"text":"then the tuple type must be parenthesized when writing the function’s type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"((Int, Int)) -> Void"},{"text":" ","type":"text"},{"type":"text","text":"is the type of a function that takes a single parameter"},{"text":" ","type":"text"},{"text":"of the tuple type ","type":"text"},{"code":"(Int, Int)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t return any value."},{"type":"text","text":" "},{"type":"text","text":"In contrast, without parentheses,"},{"text":" ","type":"text"},{"code":"(Int, Int) -> Void","type":"codeVoice"},{"type":"text","text":" is the type"},{"type":"text","text":" "},{"type":"text","text":"of a function that takes two "},{"type":"codeVoice","code":"Int"},{"text":" parameters","type":"text"},{"type":"text","text":" "},{"text":"and doesn’t return any value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Likewise, because "},{"code":"Void","type":"codeVoice"},{"text":" is a type alias for ","type":"text"},{"code":"()","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the function type "},{"code":"(Void) -> Void","type":"codeVoice"},{"text":" ","type":"text"},{"text":"is the same as ","type":"text"},{"type":"codeVoice","code":"(()) -> ()"},{"type":"text","text":" —"},{"type":"text","text":" "},{"type":"text","text":"a function that takes a single argument that’s an empty tuple."},{"type":"text","text":" "},{"type":"text","text":"These types aren’t the same as "},{"type":"codeVoice","code":"() -> ()"},{"text":" —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a function that takes no arguments."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Argument names in functions and methods"},{"text":" ","type":"text"},{"type":"text","text":"aren’t part of the corresponding function type."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"code":["func someFunction(left: Int, right: Int) {}","func anotherFunction(left: Int, right: Int) {}","func functionWithDifferentLabels(top: Int, bottom: Int) {}","","var f = someFunction \/\/ The type of f is (Int, Int) -> Void, not (left: Int, right: Int) -> Void.","f = anotherFunction              \/\/ OK","f = functionWithDifferentLabels  \/\/ OK","","func functionWithDifferentArgumentTypes(left: Int, right: String) {}","f = functionWithDifferentArgumentTypes     \/\/ Error","","func functionWithDifferentNumberOfArguments(left: Int, right: Int, top: Int) {}","f = functionWithDifferentNumberOfArguments \/\/ Error"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Because argument labels aren’t part of a function’s type,"},{"text":" ","type":"text"},{"text":"you omit them when writing a function type.","type":"text"}],"type":"paragraph"},{"code":["var operation: (lhs: Int, rhs: Int) -> Int     \/\/ Error","var operation: (_ lhs: Int, _ rhs: Int) -> Int \/\/ OK","var operation: (Int, Int) -> Int               \/\/ OK"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"If a function type includes more than a single arrow (","type":"text"},{"code":"->","type":"codeVoice"},{"text":"),","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the function types are grouped from right to left."},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the function type "},{"code":"(Int) -> (Int) -> Int","type":"codeVoice"},{"type":"text","text":" is understood as "},{"type":"codeVoice","code":"(Int) -> ((Int) -> Int)"},{"text":" —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that is, a function that takes an "},{"type":"codeVoice","code":"Int"},{"text":" and returns","type":"text"},{"type":"text","text":" "},{"type":"text","text":"another function that takes and returns an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Function types for functions","type":"text"},{"type":"text","text":" "},{"text":"that can throw or rethrow an error must be marked with the ","type":"text"},{"code":"throws","type":"codeVoice"},{"type":"text","text":" keyword."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"throws"},{"text":" keyword is part of a function’s type,","type":"text"},{"type":"text","text":" "},{"text":"and nonthrowing functions are subtypes of throwing functions.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"As a result, you can use a nonthrowing function in the same places as a throwing one."},{"text":" ","type":"text"},{"text":"Throwing and rethrowing functions are described in","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Throwing-Functions-and-Methods","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Function types for asynchronous functions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"must be marked with the "},{"code":"async","type":"codeVoice"},{"type":"text","text":" keyword."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"async","type":"codeVoice"},{"text":" keyword is part of a function’s type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and synchronous functions are subtypes of asynchronous functions."},{"text":" ","type":"text"},{"text":"As a result, you can use a synchronous function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the same places as an asynchronous one."},{"text":" ","type":"text"},{"text":"For information about asynchronous functions,","type":"text"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Restrictions for Nonescaping Closures","anchor":"Restrictions-for-Nonescaping-Closures","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A parameter that’s a nonescaping function"},{"text":" ","type":"text"},{"text":"can’t be stored in a property, variable, or constant of type ","type":"text"},{"type":"codeVoice","code":"Any"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"because that might allow the value to escape."}]},{"type":"paragraph","inlineContent":[{"text":"A parameter that’s a nonescaping function","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can’t be passed as an argument to another nonescaping function parameter."},{"text":" ","type":"text"},{"type":"text","text":"This restriction helps Swift perform"},{"text":" ","type":"text"},{"type":"text","text":"more of its checks for conflicting access to memory"},{"type":"text","text":" "},{"type":"text","text":"at compile time instead of at runtime."},{"type":"text","text":" "},{"text":"For example:","type":"text"}]},{"type":"codeListing","code":["let external: (() -> Void) -> Void = { _ in () }","func takesTwoFunctions(first: (() -> Void) -> Void, second: (() -> Void) -> Void) {","    first { first {} }       \/\/ Error","    second { second {}  }    \/\/ Error","","    first { second {} }      \/\/ Error","    second { first {} }      \/\/ Error","","    first { external {} }    \/\/ OK","    external { first {} }    \/\/ OK","}"],"syntax":"swift"},{"inlineContent":[{"text":"In the code above,","type":"text"},{"type":"text","text":" "},{"text":"both of the parameters to ","type":"text"},{"type":"codeVoice","code":"takesTwoFunctions(first:second:)"},{"text":" are functions.","type":"text"},{"text":" ","type":"text"},{"text":"Neither parameter is marked ","type":"text"},{"type":"codeVoice","code":"@escaping"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"so they’re both nonescaping as a result.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The four function calls marked “Error” in the example above"},{"text":" ","type":"text"},{"type":"text","text":"cause compiler errors."},{"text":" ","type":"text"},{"text":"Because the ","type":"text"},{"type":"codeVoice","code":"first"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"second"},{"text":" parameters","type":"text"},{"text":" ","type":"text"},{"text":"are nonescaping functions,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"they can’t be passed as arguments to another nonescaping function parameter."},{"type":"text","text":" "},{"type":"text","text":"In contrast,"},{"type":"text","text":" "},{"text":"the two function calls marked “OK” don’t cause a compiler error.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These function calls don’t violate the restriction"},{"text":" ","type":"text"},{"type":"text","text":"because "},{"code":"external","type":"codeVoice"},{"text":" isn’t one of the parameters of ","type":"text"},{"type":"codeVoice","code":"takesTwoFunctions(first:second:)"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If you need to avoid this restriction, mark one of the parameters as escaping,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or temporarily convert one of the nonescaping function parameters to an escaping function"},{"type":"text","text":" "},{"type":"text","text":"by using the "},{"code":"withoutActuallyEscaping(_:do:)","type":"codeVoice"},{"text":" function.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For information about avoiding conflicting access to memory,"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"style":"note","type":"aside","name":"Grammar of a function type","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"function-type"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"attributes"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"function-type-argument-clause","type":"text"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":"async"}],"type":"strong"},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"throws"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"code":"->","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"function-type-argument-clause"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"code":"(","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":")","type":"codeVoice"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"function-type-argument-clause"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"codeVoice","code":"("}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"function-type-argument-list"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"..."}],"type":"strong"},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"type":"text","text":" "},{"inlineContent":[{"code":")","type":"codeVoice"}],"type":"strong"}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"function-type-argument-list","type":"text"}]},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"function-type-argument"}],"type":"emphasis"},{"type":"text","text":" | "},{"inlineContent":[{"text":"function-type-argument","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":",","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"function-type-argument-list"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"function-type-argument"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"type":"text","text":"attributes"}],"type":"emphasis"},{"inlineContent":[{"text":"?","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"parameter-modifier"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"type":"text","text":" | "},{"type":"emphasis","inlineContent":[{"type":"text","text":"argument-label"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-annotation"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"argument-label"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"identifier","type":"text"}]}],"type":"paragraph"}]},{"level":2,"text":"Array Type","type":"heading","anchor":"Array-Type"},{"type":"paragraph","inlineContent":[{"text":"The Swift language provides the following syntactic sugar for the Swift standard library","type":"text"},{"type":"text","text":" "},{"code":"Array<Element>","type":"codeVoice"},{"type":"text","text":" type:"}]},{"type":"codeListing","syntax":"swift","code":["[<#type#>]"]},{"inlineContent":[{"text":"In other words, the following two declarations are equivalent:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let someArray: Array<String> = [\"Alex\", \"Brian\", \"Dave\"]","let someArray: [String] = [\"Alex\", \"Brian\", \"Dave\"]"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In both cases, the constant "},{"type":"codeVoice","code":"someArray"},{"type":"text","text":" "},{"text":"is declared as an array of strings. The elements of an array can be accessed","type":"text"},{"type":"text","text":" "},{"text":"through subscripting by specifying a valid index value in square brackets:","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"someArray[0]"},{"text":" refers to the element at index 0, ","type":"text"},{"type":"codeVoice","code":"\"Alex\""},{"type":"text","text":"."}]},{"inlineContent":[{"text":"You can create multidimensional arrays by nesting pairs of square brackets,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"where the name of the base type of the elements is contained in the innermost"},{"text":" ","type":"text"},{"text":"pair of square brackets.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, you can create"},{"type":"text","text":" "},{"type":"text","text":"a three-dimensional array of integers using three sets of square brackets:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var array3D: [[[Int]]] = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When accessing the elements in a multidimensional array,"},{"type":"text","text":" "},{"text":"the left-most subscript index refers to the element at that index in the outermost","type":"text"},{"type":"text","text":" "},{"text":"array. The next subscript index to the right refers to the element","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"at that index in the array that’s nested one level in. And so on. This means that in"},{"type":"text","text":" "},{"type":"text","text":"the example above, "},{"type":"codeVoice","code":"array3D[0]"},{"type":"text","text":" refers to "},{"type":"codeVoice","code":"[[1, 2], [3, 4]]"},{"text":",","type":"text"},{"type":"text","text":" "},{"code":"array3D[0][1]","type":"codeVoice"},{"type":"text","text":" refers to "},{"type":"codeVoice","code":"[3, 4]"},{"type":"text","text":", and "},{"type":"codeVoice","code":"array3D[0][1][1]"},{"text":" refers to the value 4.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For a detailed discussion of the Swift standard library ","type":"text"},{"code":"Array","type":"codeVoice"},{"type":"text","text":" type,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Arrays","type":"reference","isActive":true},{"text":".","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"array-type"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"[","type":"codeVoice"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"code":"]","type":"codeVoice"}],"type":"strong"}],"type":"paragraph"}],"type":"aside","name":"Grammar of an array type","style":"note"},{"type":"heading","level":2,"anchor":"Dictionary-Type","text":"Dictionary Type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Swift language provides the following syntactic sugar for the Swift standard library"},{"text":" ","type":"text"},{"code":"Dictionary<Key, Value>","type":"codeVoice"},{"text":" type:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["[<#key type#>: <#value type#>]"]},{"inlineContent":[{"type":"text","text":"In other words, the following two declarations are equivalent:"}],"type":"paragraph"},{"code":["let someDictionary: [String: Int] = [\"Alex\": 31, \"Paul\": 39]","let someDictionary: Dictionary<String, Int> = [\"Alex\": 31, \"Paul\": 39]"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"In both cases, the constant ","type":"text"},{"type":"codeVoice","code":"someDictionary"},{"text":" ","type":"text"},{"type":"text","text":"is declared as a dictionary with strings as keys and integers as values."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The values of a dictionary can be accessed through subscripting","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by specifying the corresponding key in"},{"text":" ","type":"text"},{"type":"text","text":"square brackets: "},{"type":"codeVoice","code":"someDictionary[\"Alex\"]"},{"type":"text","text":" refers to the value associated"},{"type":"text","text":" "},{"text":"with the key ","type":"text"},{"code":"\"Alex\"","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The subscript returns an optional value of the dictionary’s value type."},{"text":" ","type":"text"},{"text":"If the specified key isn’t contained in the dictionary,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the subscript returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The key type of a dictionary must conform to the Swift standard library ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" protocol."}]},{"inlineContent":[{"type":"text","text":"For a detailed discussion of the Swift standard library "},{"type":"codeVoice","code":"Dictionary"},{"text":" type,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Dictionaries","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"style":"note","type":"aside","name":"Grammar of a dictionary type","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"dictionary-type"}],"type":"emphasis"},{"text":" → ","type":"text"},{"inlineContent":[{"code":"[","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"text":" ","type":"text"},{"inlineContent":[{"code":":","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":" "},{"inlineContent":[{"code":"]","type":"codeVoice"}],"type":"strong"}]}]},{"text":"Optional Type","anchor":"Optional-Type","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The Swift language defines the postfix "},{"code":"?","type":"codeVoice"},{"type":"text","text":" as syntactic sugar for"},{"text":" ","type":"text"},{"type":"text","text":"the named type "},{"code":"Optional<Wrapped>","type":"codeVoice"},{"text":", which is defined in the Swift standard library.","type":"text"},{"type":"text","text":" "},{"text":"In other words, the following two declarations are equivalent:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["var optionalInteger: Int?","var optionalInteger: Optional<Int>"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"In both cases, the variable "},{"type":"codeVoice","code":"optionalInteger"},{"text":" ","type":"text"},{"type":"text","text":"is declared to have the type of an optional integer."},{"text":" ","type":"text"},{"type":"text","text":"Note that no whitespace may appear between the type and the "},{"code":"?","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The type ","type":"text"},{"type":"codeVoice","code":"Optional<Wrapped>"},{"type":"text","text":" is an enumeration with two cases, "},{"code":"none","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"some(Wrapped)"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which are used to represent values that may or may not be present."},{"type":"text","text":" "},{"text":"Any type can be explicitly declared to be (or implicitly converted to) an optional type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you don’t provide an initial value when you declare an"},{"type":"text","text":" "},{"type":"text","text":"optional variable or property, its value automatically defaults to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"If an instance of an optional type contains a value,"},{"type":"text","text":" "},{"type":"text","text":"you can access that value using the postfix operator "},{"type":"codeVoice","code":"!"},{"text":", as shown below:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["optionalInteger = 42","optionalInteger! \/\/ 42"],"syntax":"swift"},{"inlineContent":[{"text":"Using the ","type":"text"},{"code":"!","type":"codeVoice"},{"text":" operator to unwrap an optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that has a value of "},{"type":"codeVoice","code":"nil"},{"text":" results in a runtime error.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You can also use optional chaining and optional binding to conditionally perform an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"operation on an optional expression. If the value is "},{"type":"codeVoice","code":"nil"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"no operation is performed and therefore no runtime error is produced."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information and to see examples that show how to use optional types,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optionals"},{"text":".","type":"text"}]},{"type":"aside","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"optional-type"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":" "},{"inlineContent":[{"code":"?","type":"codeVoice"}],"type":"strong"}],"type":"paragraph"}],"style":"note","name":"Grammar of an optional type"},{"type":"heading","level":2,"text":"Implicitly Unwrapped Optional Type","anchor":"Implicitly-Unwrapped-Optional-Type"},{"type":"paragraph","inlineContent":[{"text":"The Swift language defines the postfix ","type":"text"},{"type":"codeVoice","code":"!"},{"text":" as syntactic sugar for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the named type "},{"type":"codeVoice","code":"Optional<Wrapped>"},{"type":"text","text":", which is defined in the Swift standard library,"},{"type":"text","text":" "},{"text":"with the additional behavior that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it’s automatically unwrapped when it’s accessed."},{"text":" ","type":"text"},{"text":"If you try to use an implicitly unwrapped optional that has a value of ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you’ll get a runtime error."},{"text":" ","type":"text"},{"text":"With the exception of the implicit unwrapping behavior,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the following two declarations are equivalent:"}]},{"code":["var implicitlyUnwrappedString: String!","var explicitlyUnwrappedString: Optional<String>"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Note that no whitespace may appear between the type and the ","type":"text"},{"code":"!","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"Because implicit unwrapping"},{"text":" ","type":"text"},{"text":"changes the meaning of the declaration that contains that type,","type":"text"},{"type":"text","text":" "},{"text":"optional types that are nested inside a tuple type or a generic type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"— such as the element types of a dictionary or array —"},{"type":"text","text":" "},{"type":"text","text":"can’t be marked as implicitly unwrapped."},{"type":"text","text":" "},{"type":"text","text":"For example:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let tupleOfImplicitlyUnwrappedElements: (Int!, Int!)  \/\/ Error","let implicitlyUnwrappedTuple: (Int, Int)!             \/\/ OK","","let arrayOfImplicitlyUnwrappedElements: [Int!]        \/\/ Error","let implicitlyUnwrappedArray: [Int]!                  \/\/ OK"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because implicitly unwrapped optionals"},{"type":"text","text":" "},{"text":"have the same ","type":"text"},{"type":"codeVoice","code":"Optional<Wrapped>"},{"type":"text","text":" type as optional values,"},{"text":" ","type":"text"},{"type":"text","text":"you can use implicitly unwrapped optionals"},{"type":"text","text":" "},{"type":"text","text":"in all the same places in your code"},{"type":"text","text":" "},{"type":"text","text":"that you can use optionals."},{"text":" ","type":"text"},{"type":"text","text":"For example, you can assign values of implicitly unwrapped"},{"text":" ","type":"text"},{"text":"optionals to variables, constants, and properties of optionals, and vice versa.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with optionals, if you don’t provide an initial value when you declare an"},{"type":"text","text":" "},{"text":"implicitly unwrapped optional variable or property,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"its value automatically defaults to "},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Use optional chaining to conditionally perform an","type":"text"},{"text":" ","type":"text"},{"text":"operation on an implicitly unwrapped optional expression.","type":"text"},{"type":"text","text":" "},{"text":"If the value is ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"no operation is performed and therefore no runtime error is produced.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about implicitly unwrapped optional types,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Implicitly-Unwrapped-Optionals"},{"text":".","type":"text"}]},{"name":"Grammar of an implicitly unwrapped optional type","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"implicitly-unwrapped-optional-type"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"!"}],"type":"strong"}],"type":"paragraph"}]},{"level":2,"type":"heading","text":"Protocol Composition Type","anchor":"Protocol-Composition-Type"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"protocol composition type"}]},{"text":" defines a type that conforms to each protocol","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in a list of specified protocols,"},{"type":"text","text":" "},{"text":"or a type that’s a subclass of a given class","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and conforms to each protocol in a list of specified protocols."},{"type":"text","text":" "},{"type":"text","text":"Protocol composition types may be used only when specifying a type"},{"type":"text","text":" "},{"type":"text","text":"in type annotations,"},{"type":"text","text":" "},{"text":"in generic parameter clauses,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and in generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clauses."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Protocol composition types have the following form:"}]},{"code":["<#Protocol 1#> & <#Protocol 2#>"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"A protocol composition type allows you to specify a value whose type conforms to the requirements","type":"text"},{"text":" ","type":"text"},{"text":"of multiple protocols without explicitly defining a new, named protocol","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that inherits from each protocol you want the type to conform to."},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"text":"you can use the protocol composition type ","type":"text"},{"type":"codeVoice","code":"ProtocolA & ProtocolB & ProtocolC"},{"type":"text","text":" "},{"type":"text","text":"instead of declaring a new protocol"},{"type":"text","text":" "},{"type":"text","text":"that inherits from "},{"type":"codeVoice","code":"ProtocolA"},{"type":"text","text":", "},{"type":"codeVoice","code":"ProtocolB"},{"text":", and ","type":"text"},{"code":"ProtocolC","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Likewise, you can use "},{"type":"codeVoice","code":"SuperClass & ProtocolA"},{"type":"text","text":" "},{"text":"instead of declaring a new protocol","type":"text"},{"text":" ","type":"text"},{"text":"that’s a subclass of ","type":"text"},{"code":"SuperClass","type":"codeVoice"},{"text":" and conforms to ","type":"text"},{"type":"codeVoice","code":"ProtocolA"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"Each item in a protocol composition list is one of the following;"},{"text":" ","type":"text"},{"text":"the list can contain at most one class:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"The name of a class","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The name of a protocol"}]}]},{"content":[{"inlineContent":[{"text":"A type alias whose underlying type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is a protocol composition type, a protocol, or a class."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"When a protocol composition type contains type aliases,","type":"text"},{"text":" ","type":"text"},{"text":"it’s possible for the same protocol to appear","type":"text"},{"type":"text","text":" "},{"text":"more than once in the definitions —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"duplicates are ignored."},{"text":" ","type":"text"},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"text","text":"the definition of "},{"type":"codeVoice","code":"PQR"},{"text":" in the code below","type":"text"},{"type":"text","text":" "},{"text":"is equivalent to ","type":"text"},{"code":"P & Q & R","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["typealias PQ = P & Q","typealias PQR = PQ & Q & R"]},{"name":"Grammar of a protocol composition type","type":"aside","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"protocol-composition-type","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"text":"type-identifier","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":"&","type":"codeVoice"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"protocol-composition-continuation"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"protocol-composition-continuation"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"type-identifier"}],"type":"emphasis"},{"text":" | ","type":"text"},{"inlineContent":[{"type":"text","text":"protocol-composition-type"}],"type":"emphasis"}],"type":"paragraph"}],"style":"note"},{"anchor":"Opaque-Type","type":"heading","level":2,"text":"Opaque Type"},{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"opaque type"}]},{"text":" defines a type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that conforms to a protocol or protocol composition,"},{"type":"text","text":" "},{"text":"without specifying the underlying concrete type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Opaque types appear as the return type of a function or subscript,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or the type of a property."},{"text":" ","type":"text"},{"type":"text","text":"Opaque types can’t appear as part of a tuple type or a generic type,"},{"text":" ","type":"text"},{"type":"text","text":"such as the element type of an array or the wrapped type of an optional."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Opaque types have the following form:"}]},{"syntax":"swift","type":"codeListing","code":["some <#constraint#>"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"constraint"}],"type":"emphasis"},{"text":" is a class type,","type":"text"},{"type":"text","text":" "},{"text":"protocol type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"protocol composition type,"},{"type":"text","text":" "},{"text":"or ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"A value can be used as an instance of the opaque type","type":"text"},{"type":"text","text":" "},{"text":"only if it’s an instance of a type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that conforms to the listed protocol or protocol composition,"},{"type":"text","text":" "},{"text":"or inherits from the listed class.","type":"text"},{"type":"text","text":" "},{"text":"Code that interacts with an opaque value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can use the value only in ways"},{"text":" ","type":"text"},{"text":"that are part of the interface defined by the ","type":"text"},{"inlineContent":[{"type":"text","text":"constraint"}],"type":"emphasis"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"At compile time,"},{"type":"text","text":" "},{"text":"a value whose type is opaque has a specific concrete type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and Swift can use that underlying type for optimizations."},{"type":"text","text":" "},{"text":"However,","type":"text"},{"type":"text","text":" "},{"text":"the opaque type forms a boundary","type":"text"},{"text":" ","type":"text"},{"text":"that information about that underlying type can’t cross.","type":"text"}]},{"inlineContent":[{"text":"Protocol declarations can’t include opaque types.","type":"text"},{"text":" ","type":"text"},{"text":"Classes can’t use an opaque type as the return type of a nonfinal method.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A function that uses an opaque type as its return type"},{"text":" ","type":"text"},{"type":"text","text":"must return values that share a single underlying type."},{"text":" ","type":"text"},{"type":"text","text":"The return type can include types"},{"type":"text","text":" "},{"text":"that are part of the function’s generic type parameters.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, a function "},{"code":"someFunction<T>()","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"could return a value of type "},{"code":"T","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"Dictionary<String, T>","type":"codeVoice"},{"text":".","type":"text"}]},{"style":"note","type":"aside","name":"Grammar of an opaque type","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"opaque-type","type":"text"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"some","type":"codeVoice"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"}],"type":"paragraph"}]},{"level":2,"anchor":"Boxed-Protocol-Type","text":"Boxed Protocol Type","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"boxed protocol type","type":"text"}]},{"text":" defines a type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that conforms to a protocol or protocol composition,"},{"type":"text","text":" "},{"type":"text","text":"with the ability for that conforming type"},{"text":" ","type":"text"},{"text":"to vary while the program is running.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Boxed protocol types have the following form:"}]},{"code":["any <#constraint#>"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"constraint"}],"type":"emphasis"},{"text":" is a protocol type,","type":"text"},{"type":"text","text":" "},{"text":"protocol composition type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a metatype of a protocol type,"},{"text":" ","type":"text"},{"type":"text","text":"or a metatype of a protocol composition type."}]},{"inlineContent":[{"type":"text","text":"At runtime,"},{"text":" ","type":"text"},{"text":"an instance of a boxed protocol type can contain a value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of any type that satisfies the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"constraint"}]},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"This behavior contrasts with how an opaque types work,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"where there is some specific conforming type known at compile time."},{"type":"text","text":" "},{"type":"text","text":"The additional level of indirection that’s used"},{"text":" ","type":"text"},{"text":"when working with a boxed protocol type is called :newTerm:","type":"text"},{"code":"boxing","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Boxing typically requires a separate memory allocation for storage","type":"text"},{"text":" ","type":"text"},{"text":"and an additional level of indirection for access,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which incurs a performance cost at runtime."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Applying ","type":"text"},{"code":"any","type":"codeVoice"},{"type":"text","text":" to the "},{"code":"Any","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":" types"},{"type":"text","text":" "},{"text":"has no effect,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because those types are already boxed protocol types."}]},{"type":"aside","name":"Grammar of a boxed protocol type","style":"note","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"boxed-protocol-type"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"any"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]}]}]},{"type":"heading","anchor":"Metatype-Type","level":2,"text":"Metatype Type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"metatype type"}],"type":"emphasis"},{"text":" refers to the type of any type,","type":"text"},{"type":"text","text":" "},{"text":"including class types, structure types, enumeration types, and protocol types.","type":"text"}]},{"inlineContent":[{"text":"The metatype of a class, structure, or enumeration type is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the name of that type followed by "},{"type":"codeVoice","code":".Type"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The metatype of a protocol type — not the concrete type that"},{"type":"text","text":" "},{"type":"text","text":"conforms to the protocol at runtime —"},{"type":"text","text":" "},{"type":"text","text":"is the name of that protocol followed by "},{"type":"codeVoice","code":".Protocol"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"For example, the metatype of the class type ","type":"text"},{"type":"codeVoice","code":"SomeClass"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"SomeClass.Type"},{"type":"text","text":" "},{"text":"and the metatype of the protocol ","type":"text"},{"type":"codeVoice","code":"SomeProtocol"},{"text":" is ","type":"text"},{"code":"SomeProtocol.Protocol","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can use the postfix "},{"type":"codeVoice","code":"self"},{"type":"text","text":" expression to access a type as a value."},{"type":"text","text":" "},{"type":"text","text":"For example, "},{"code":"SomeClass.self","type":"codeVoice"},{"text":" returns ","type":"text"},{"type":"codeVoice","code":"SomeClass"},{"text":" itself,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"not an instance of "},{"type":"codeVoice","code":"SomeClass"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"And "},{"code":"SomeProtocol.self","type":"codeVoice"},{"text":" returns ","type":"text"},{"type":"codeVoice","code":"SomeProtocol"},{"text":" itself,","type":"text"},{"text":" ","type":"text"},{"text":"not an instance of a type that conforms to ","type":"text"},{"type":"codeVoice","code":"SomeProtocol"},{"type":"text","text":" at runtime."},{"text":" ","type":"text"},{"text":"You can call the ","type":"text"},{"code":"type(of:)","type":"codeVoice"},{"type":"text","text":" function with an instance of a type"},{"text":" ","type":"text"},{"type":"text","text":"to access that instance’s dynamic, runtime type as a value,"},{"text":" ","type":"text"},{"type":"text","text":"as the following example shows:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class SomeBaseClass {","    class func printClassName() {","        print(\"SomeBaseClass\")","    }","}","class SomeSubClass: SomeBaseClass {","    override class func printClassName() {","        print(\"SomeSubClass\")","    }","}","let someInstance: SomeBaseClass = SomeSubClass()","\/\/ The compile-time type of someInstance is SomeBaseClass,","\/\/ and the runtime type of someInstance is SomeSubClass","type(of: someInstance).printClassName()","\/\/ Prints \"SomeSubClass\""]},{"inlineContent":[{"text":"For more information,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/2885064-type","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"in the Swift standard library."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Use an initializer expression to construct an instance of a type","type":"text"},{"text":" ","type":"text"},{"text":"from that type’s metatype value.","type":"text"},{"type":"text","text":" "},{"text":"For class instances,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the initializer that’s called must be marked with the "},{"type":"codeVoice","code":"required"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"text":"or the entire class marked with the ","type":"text"},{"type":"codeVoice","code":"final"},{"text":" keyword.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class AnotherSubClass: SomeBaseClass {","    let string: String","    required init(string: String) {","        self.string = string","    }","    override class func printClassName() {","        print(\"AnotherSubClass\")","    }","}","let metatype: AnotherSubClass.Type = AnotherSubClass.self","let anotherInstance = metatype.init(string: \"some string\")"]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"metatype-type","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":".","type":"codeVoice"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"Type"}],"type":"strong"},{"type":"text","text":" | "},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":"."}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"code":"Protocol","type":"codeVoice"}],"type":"strong"}]}],"type":"aside","name":"Grammar of a metatype type"},{"level":2,"anchor":"Any-Type","type":"heading","text":"Any Type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"Any","type":"codeVoice"},{"type":"text","text":" type can contain values from all other types."},{"text":" ","type":"text"},{"code":"Any","type":"codeVoice"},{"type":"text","text":" can be used as the concrete type"},{"type":"text","text":" "},{"type":"text","text":"for an instance of any of the following types:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A class, structure, or enumeration"}]}]},{"content":[{"inlineContent":[{"text":"A metatype, such as ","type":"text"},{"type":"codeVoice","code":"Int.self"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A tuple with any types of components","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure or function type"}]}]}]},{"code":["let mixed: [Any] = [\"one\", 2, true, (4, 5.3), { () -> Int in return 6 }]"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you use "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" as a concrete type for an instance,"},{"text":" ","type":"text"},{"type":"text","text":"you need to cast the instance to a known type"},{"text":" ","type":"text"},{"text":"before you can access its properties or methods.","type":"text"},{"text":" ","type":"text"},{"text":"Instances with a concrete type of ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" ","type":"text"},{"text":"maintain their original dynamic type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and can be cast to that type using one of the type-cast operators —"},{"type":"text","text":" "},{"code":"as","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"as?"},{"type":"text","text":", or "},{"type":"codeVoice","code":"as!"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"type":"text","text":"use "},{"code":"as?","type":"codeVoice"},{"type":"text","text":" to conditionally downcast the first object in a heterogeneous array"},{"type":"text","text":" "},{"text":"to a ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" as follows:"}]},{"code":["if let first = mixed.first as? String {","    print(\"The first item, '\\(first)', is a string.\")","}","\/\/ Prints \"The first item, 'one', is a string.\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"For more information about casting, see ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"AnyObject","type":"codeVoice"},{"type":"text","text":" protocol is similar to the "},{"code":"Any","type":"codeVoice"},{"text":" type.","type":"text"},{"type":"text","text":" "},{"text":"All classes implicitly conform to ","type":"text"},{"code":"AnyObject","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Unlike ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which is defined by the language,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":" is defined by the Swift standard library."},{"type":"text","text":" "},{"text":"For more information, see","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/anyobject","type":"reference","isActive":true},{"type":"text","text":"."}]},{"name":"Grammar of an Any type","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"any-type","type":"text"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"Any","type":"codeVoice"}]}],"type":"paragraph"}],"style":"note"},{"type":"heading","text":"Self Type","level":2,"anchor":"Self-Type"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Self","type":"codeVoice"},{"type":"text","text":" type isn’t a specific type,"},{"text":" ","type":"text"},{"type":"text","text":"but rather lets you conveniently refer to the current type"},{"text":" ","type":"text"},{"type":"text","text":"without repeating or knowing that type’s name."}]},{"inlineContent":[{"type":"text","text":"In a protocol declaration or a protocol member declaration,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"Self","type":"codeVoice"},{"type":"text","text":" type refers to the eventual type that conforms to the protocol."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In a structure, class, or enumeration declaration,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Self"},{"type":"text","text":" type refers to the type introduced by the declaration."},{"type":"text","text":" "},{"text":"Inside the declaration for a member of a type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"Self"},{"type":"text","text":" type refers to that type."},{"text":" ","type":"text"},{"text":"In the members of a class declaration,","type":"text"},{"type":"text","text":" "},{"code":"Self","type":"codeVoice"},{"type":"text","text":" can appear only as follows:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"As the return type of a method"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As the return type of a read-only subscript"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"As the type of a read-only computed property"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In the body of a method"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the code below shows an instance method "},{"type":"codeVoice","code":"f"},{"text":" ","type":"text"},{"text":"whose return type is ","type":"text"},{"code":"Self","type":"codeVoice"},{"text":".","type":"text"}]},{"syntax":"swift","code":["class Superclass {","    func f() -> Self { return self }","}","let x = Superclass()","print(type(of: x.f()))","\/\/ Prints \"Superclass\"","","class Subclass: Superclass { }","let y = Subclass()","print(type(of: y.f()))","\/\/ Prints \"Subclass\"","","let z: Superclass = Subclass()","print(type(of: z.f()))","\/\/ Prints \"Subclass\""],"type":"codeListing"},{"inlineContent":[{"text":"The last part of the example above shows that","type":"text"},{"type":"text","text":" "},{"code":"Self","type":"codeVoice"},{"type":"text","text":" refers to the runtime type "},{"code":"Subclass","type":"codeVoice"},{"type":"text","text":" of the value of "},{"type":"codeVoice","code":"z"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"not the compile-time type "},{"type":"codeVoice","code":"Superclass"},{"text":" of the variable itself.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Inside a nested type declaration,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"Self","type":"codeVoice"},{"type":"text","text":" type refers to the type"},{"text":" ","type":"text"},{"type":"text","text":"introduced by the innermost type declaration."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Self"},{"type":"text","text":" type refers to the same type"},{"text":" ","type":"text"},{"text":"as the ","type":"text"},{"type":"reference","overridingTitleInlineContent":[{"type":"codeVoice","code":"type(of:)"}],"isActive":true,"overridingTitle":"type(of:)","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/2885064-type"},{"text":" ","type":"text"},{"type":"text","text":"function in the Swift standard library."},{"text":" ","type":"text"},{"type":"text","text":"Writing "},{"code":"Self.someStaticMember","type":"codeVoice"},{"text":" to access a member of the current type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is the same as writing "},{"code":"type(of: self).someStaticMember","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"aside","style":"note","name":"Grammar of a Self type","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"self-type"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"Self","type":"codeVoice"}]}]}]},{"anchor":"Type-Inheritance-Clause","level":2,"type":"heading","text":"Type Inheritance Clause"},{"inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"type inheritance clause"}],"type":"emphasis"},{"text":" is used to specify which class a named type inherits from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and which protocols a named type conforms to."},{"type":"text","text":" "},{"text":"A type inheritance clause begins with a colon (","type":"text"},{"type":"codeVoice","code":":"},{"type":"text","text":"),"},{"type":"text","text":" "},{"type":"text","text":"followed by a list of type identifiers."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Class types can inherit from a single superclass and conform to any number of protocols.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When defining a class,"},{"type":"text","text":" "},{"type":"text","text":"the name of the superclass must appear first in the list of type identifiers,"},{"text":" ","type":"text"},{"type":"text","text":"followed by any number of protocols the class must conform to."},{"type":"text","text":" "},{"type":"text","text":"If the class doesn’t inherit from another class,"},{"type":"text","text":" "},{"text":"the list can begin with a protocol instead.","type":"text"},{"type":"text","text":" "},{"text":"For an extended discussion and several examples of class inheritance,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","type":"reference","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Other named types can only inherit from or conform to a list of protocols."},{"text":" ","type":"text"},{"text":"Protocol types can inherit from any number of other protocols.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When a protocol type inherits from other protocols,"},{"type":"text","text":" "},{"type":"text","text":"the set of requirements from those other protocols are aggregated together,"},{"type":"text","text":" "},{"text":"and any type that inherits from the current protocol must conform to all of those requirements.","type":"text"}]},{"inlineContent":[{"text":"A type inheritance clause in an enumeration definition can be either a list of protocols,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or in the case of an enumeration that assigns raw values to its cases,"},{"text":" ","type":"text"},{"type":"text","text":"a single, named type that specifies the type of those raw values."},{"text":" ","type":"text"},{"text":"For an example of an enumeration definition that uses a type inheritance clause","type":"text"},{"type":"text","text":" "},{"text":"to specify the type of its raw values, see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Raw-Values","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"style":"note","type":"aside","name":"Grammar of a type inheritance clause","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"type-inheritance-clause"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"codeVoice","code":":"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-inheritance-list"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type-inheritance-list","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"text":"attributes","type":"text"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"type-identifier"}],"type":"emphasis"},{"text":" | ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"attributes"}]},{"type":"emphasis","inlineContent":[{"text":"?","type":"text"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type-identifier","type":"text"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":","}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-inheritance-list"}]}]}]},{"level":2,"text":"Type Inference","anchor":"Type-Inference","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Swift uses ","type":"text"},{"inlineContent":[{"text":"type inference","type":"text"}],"type":"emphasis"},{"type":"text","text":" extensively,"},{"type":"text","text":" "},{"type":"text","text":"allowing you to omit the type or part of the type of many variables and expressions in your code."},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"instead of writing "},{"type":"codeVoice","code":"var x: Int = 0"},{"type":"text","text":", you can write "},{"code":"var x = 0","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"omitting the type completely —"},{"type":"text","text":" "},{"text":"the compiler correctly infers that ","type":"text"},{"code":"x","type":"codeVoice"},{"type":"text","text":" names a value of type "},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Similarly, you can omit part of a type when the full type can be inferred from context.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, if you write "},{"type":"codeVoice","code":"let dict: Dictionary = [\"A\": 1]"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the compiler infers that "},{"code":"dict","type":"codeVoice"},{"type":"text","text":" has the type "},{"type":"codeVoice","code":"Dictionary<String, Int>"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"In both of the examples above,","type":"text"},{"type":"text","text":" "},{"text":"the type information is passed up from the leaves of the expression tree to its root.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"That is,"},{"text":" ","type":"text"},{"text":"the type of ","type":"text"},{"type":"codeVoice","code":"x"},{"type":"text","text":" in "},{"type":"codeVoice","code":"var x: Int = 0"},{"type":"text","text":" is inferred by first checking the type of "},{"type":"codeVoice","code":"0"},{"type":"text","text":" "},{"text":"and then passing this type information up to the root (the variable ","type":"text"},{"type":"codeVoice","code":"x"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift, type information can also flow in the opposite direction — from the root down to the leaves."},{"type":"text","text":" "},{"text":"In the following example, for instance,","type":"text"},{"text":" ","type":"text"},{"text":"the explicit type annotation (","type":"text"},{"type":"codeVoice","code":": Float"},{"type":"text","text":") on the constant "},{"code":"eFloat","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"causes the numeric literal "},{"code":"2.71828","type":"codeVoice"},{"text":" to have an inferred type of ","type":"text"},{"code":"Float","type":"codeVoice"},{"text":" instead of ","type":"text"},{"code":"Double","type":"codeVoice"},{"type":"text","text":"."}]},{"syntax":"swift","type":"codeListing","code":["let e = 2.71828 \/\/ The type of e is inferred to be Double.","let eFloat: Float = 2.71828 \/\/ The type of eFloat is Float."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type inference in Swift operates at the level of a single expression or statement."},{"text":" ","type":"text"},{"type":"text","text":"This means that all of the information needed to infer an omitted type or part of a type"},{"text":" ","type":"text"},{"text":"in an expression must be accessible from type-checking","type":"text"},{"type":"text","text":" "},{"text":"the expression or one of its subexpressions.","type":"text"}]}]}],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"abstract":[{"type":"text","text":"Use built-in named and compound types."}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","interfaceLanguage":"swift"},"kind":"article","metadata":{"title":"Types"},"references":{"https://developer.apple.com/documentation/swift/2885064-type":{"title":"type(of:)","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/2885064-type","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/2885064-type","titleInlineContent":[{"type":"codeVoice","code":"type(of:)"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Throwing-Functions-and-Methods":{"type":"topic","title":"Throwing Functions and Methods","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Throwing-Functions-and-Methods","url":"\/documentation\/the-swift-programming-language\/declarations#Throwing-Functions-and-Methods","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Variadic-Parameters":{"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Variadic-Parameters","title":"Variadic Parameters","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions#Variadic-Parameters","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Dictionaries":{"type":"topic","title":"Dictionaries","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Dictionaries","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Dictionaries","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Functions-with-Multiple-Return-Values":{"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-with-Multiple-Return-Values","title":"Functions with Multiple Return Values","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions#Functions-with-Multiple-Return-Values","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"kind":"article","abstract":[{"type":"text","text":"Structure your code to avoid conflicts when accessing memory."}],"type":"topic","title":"Memory Safety","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","role":"article","url":"\/documentation\/the-swift-programming-language\/memorysafety"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations#Raw-Values":{"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Raw-Values","title":"Raw Values","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations#Raw-Values","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Rethrowing-Functions-and-Methods":{"type":"topic","title":"Rethrowing Functions and Methods","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","url":"\/documentation\/the-swift-programming-language\/declarations#Rethrowing-Functions-and-Methods","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#In-Out-Parameters":{"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#In-Out-Parameters","title":"In-Out Parameters","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions#In-Out-Parameters","abstract":[]},"https://developer.apple.com/documentation/swift/anyobject":{"type":"link","title":"AnyObject","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/anyobject","titleInlineContent":[{"type":"codeVoice","code":"AnyObject"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/anyobject"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","abstract":[{"text":"Add functionality to an existing type.","type":"text"}],"role":"article","url":"\/documentation\/the-swift-programming-language\/extensions","title":"Extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Asynchronous-Functions-and-Methods":{"kind":"section","title":"Asynchronous Functions and Methods","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Asynchronous-Functions-and-Methods","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Arrays":{"type":"topic","title":"Arrays","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Arrays","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Arrays","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Implicitly-Unwrapped-Optionals":{"kind":"section","title":"Implicitly Unwrapped Optionals","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Implicitly-Unwrapped-Optionals","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics#Implicitly-Unwrapped-Optionals","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Class-Only-Protocols":{"type":"topic","title":"Class-Only Protocols","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols","url":"\/documentation\/the-swift-programming-language\/protocols#Class-Only-Protocols","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Optionals":{"kind":"section","title":"Optionals","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optionals","type":"topic","url":"\/documentation\/the-swift-programming-language\/thebasics#Optionals","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","title":"The Swift Programming Language (5.9)","type":"topic","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"title":"Inheritance","url":"\/documentation\/the-swift-programming-language\/inheritance","abstract":[{"text":"Subclass to add or override functionality.","type":"text"}],"role":"article","kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Autoclosures":{"type":"topic","title":"Autoclosures","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures","url":"\/documentation\/the-swift-programming-language\/closures#Autoclosures","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Extension-Declaration":{"kind":"section","title":"Extension Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Extension-Declaration","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","type":"topic","abstract":[{"text":"Determine a value’s runtime type and give it more specific type information.","type":"text"}],"url":"\/documentation\/the-swift-programming-language\/typecasting","kind":"article","title":"Type Casting"}}}