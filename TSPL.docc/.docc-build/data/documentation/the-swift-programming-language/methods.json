{"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods"},"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"abstract":[{"text":"Define and call functions that are part of an instance or type.","type":"text"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"title":"Methods"},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type."},{"type":"text","text":" "},{"type":"text","text":"Classes, structures, and enumerations can all define instance methods,"},{"type":"text","text":" "},{"type":"text","text":"which encapsulate specific tasks and functionality for working with an instance of a given type."},{"text":" ","type":"text"},{"type":"text","text":"Classes, structures, and enumerations can also define type methods,"},{"type":"text","text":" "},{"text":"which are associated with the type itself.","type":"text"},{"type":"text","text":" "},{"text":"Type methods are similar to class methods in Objective-C.","type":"text"}]},{"inlineContent":[{"text":"The fact that structures and enumerations can define methods in Swift","type":"text"},{"type":"text","text":" "},{"text":"is a major difference from C and Objective-C.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In Objective-C, classes are the only types that can define methods."},{"type":"text","text":" "},{"type":"text","text":"In Swift, you can choose whether to define a class, structure, or enumeration,"},{"text":" ","type":"text"},{"type":"text","text":"and still have the flexibility to define methods on the type you create."}],"type":"paragraph"},{"level":2,"anchor":"Instance-Methods","type":"heading","text":"Instance Methods"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Instance methods"}]},{"type":"text","text":" are functions that belong to instances of"},{"text":" ","type":"text"},{"type":"text","text":"a particular class, structure, or enumeration."},{"type":"text","text":" "},{"text":"They support the functionality of those instances,","type":"text"},{"type":"text","text":" "},{"text":"either by providing ways to access and modify instance properties,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or by providing functionality related to the instance’s purpose."},{"type":"text","text":" "},{"type":"text","text":"Instance methods have exactly the same syntax as functions,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You write an instance method within the opening and closing braces of the type it belongs to."},{"type":"text","text":" "},{"type":"text","text":"An instance method has implicit access to all other instance methods and properties of that type."},{"text":" ","type":"text"},{"text":"An instance method can be called only on a specific instance of the type it belongs to.","type":"text"},{"text":" ","type":"text"},{"text":"It can’t be called in isolation without an existing instance.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example that defines a simple "},{"type":"codeVoice","code":"Counter"},{"type":"text","text":" class,"},{"type":"text","text":" "},{"type":"text","text":"which can be used to count the number of times an action occurs:"}]},{"code":["class Counter {","    var count = 0","    func increment() {","        count += 1","    }","    func increment(by amount: Int) {","        count += amount","    }","    func reset() {","        count = 0","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Counter"},{"text":" class defines three instance methods:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"increment()"},{"type":"text","text":" increments the counter by "},{"type":"codeVoice","code":"1"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"increment(by: Int)","type":"codeVoice"},{"text":" increments the counter by a specified integer amount.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"reset()","type":"codeVoice"},{"text":" resets the counter to zero.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"Counter","type":"codeVoice"},{"text":" class also declares a variable property, ","type":"text"},{"type":"codeVoice","code":"count"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"to keep track of the current counter value.","type":"text"}]},{"inlineContent":[{"type":"text","text":"You call instance methods with the same dot syntax as properties:"}],"type":"paragraph"},{"type":"codeListing","code":["let counter = Counter()","\/\/ the initial counter value is 0","counter.increment()","\/\/ the counter's value is now 1","counter.increment(by: 5)","\/\/ the counter's value is now 6","counter.reset()","\/\/ the counter's value is now 0"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Function parameters can have both a name (for use within the function’s body)"},{"text":" ","type":"text"},{"type":"text","text":"and an argument label (for use when calling the function),"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Function-Argument-Labels-and-Parameter-Names"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The same is true for method parameters,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because methods are just functions that are associated with a type."}],"type":"paragraph"},{"anchor":"The-self-Property","type":"heading","level":3,"text":"The self Property"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every instance of a type has an implicit property called "},{"type":"codeVoice","code":"self"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is exactly equivalent to the instance itself."},{"type":"text","text":" "},{"type":"text","text":"You use the "},{"type":"codeVoice","code":"self"},{"type":"text","text":" property to refer to the current instance"},{"type":"text","text":" "},{"type":"text","text":"within its own instance methods."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"increment()","type":"codeVoice"},{"text":" method in the example above could have been written like this:","type":"text"}]},{"syntax":"swift","code":["func increment() {","    self.count += 1","}"],"type":"codeListing"},{"inlineContent":[{"text":"In practice, you don’t need to write ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" in your code very often."},{"text":" ","type":"text"},{"text":"If you don’t explicitly write ","type":"text"},{"type":"codeVoice","code":"self"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift assumes that you are referring to a property or method of the current instance"},{"type":"text","text":" "},{"text":"whenever you use a known property or method name within a method.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This assumption is demonstrated by the use of "},{"type":"codeVoice","code":"count"},{"type":"text","text":" (rather than "},{"code":"self.count","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"inside the three instance methods for ","type":"text"},{"type":"codeVoice","code":"Counter"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The main exception to this rule occurs when a parameter name for an instance method","type":"text"},{"type":"text","text":" "},{"type":"text","text":"has the same name as a property of that instance."},{"type":"text","text":" "},{"type":"text","text":"In this situation, the parameter name takes precedence,"},{"text":" ","type":"text"},{"type":"text","text":"and it becomes necessary to refer to the property in a more qualified way."},{"type":"text","text":" "},{"type":"text","text":"You use the "},{"type":"codeVoice","code":"self"},{"text":" property to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"distinguish between the parameter name and the property name."}]},{"inlineContent":[{"type":"text","text":"Here, "},{"code":"self","type":"codeVoice"},{"type":"text","text":" disambiguates between"},{"text":" ","type":"text"},{"text":"a method parameter called ","type":"text"},{"code":"x","type":"codeVoice"},{"type":"text","text":" and an instance property that’s also called "},{"type":"codeVoice","code":"x"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct Point {","    var x = 0.0, y = 0.0","    func isToTheRightOf(x: Double) -> Bool {","        return self.x > x","    }","}","let somePoint = Point(x: 4.0, y: 5.0)","if somePoint.isToTheRightOf(x: 1.0) {","    print(\"This point is to the right of the line where x == 1.0\")","}","\/\/ Prints \"This point is to the right of the line where x == 1.0\""],"syntax":"swift"},{"inlineContent":[{"text":"Without the ","type":"text"},{"code":"self","type":"codeVoice"},{"type":"text","text":" prefix,"},{"type":"text","text":" "},{"text":"Swift would assume that both uses of ","type":"text"},{"type":"codeVoice","code":"x"},{"type":"text","text":" referred to the method parameter called "},{"type":"codeVoice","code":"x"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"anchor":"Modifying-Value-Types-from-Within-Instance-Methods","type":"heading","text":"Modifying Value Types from Within Instance Methods"},{"inlineContent":[{"type":"text","text":"Structures and enumerations are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"value types"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"By default, the properties of a value type can’t be modified from within its instance methods.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, if you need to modify the properties of your structure or enumeration"},{"type":"text","text":" "},{"text":"within a particular method,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can opt in to "},{"inlineContent":[{"text":"mutating","type":"text"}],"type":"emphasis"},{"type":"text","text":" behavior for that method."},{"text":" ","type":"text"},{"type":"text","text":"The method can then mutate (that is, change)"},{"type":"text","text":" "},{"text":"its properties from within the method,","type":"text"},{"text":" ","type":"text"},{"text":"and any changes that it makes are written back to the original structure when the method ends.","type":"text"},{"text":" ","type":"text"},{"text":"The method can also assign a completely new instance to its implicit ","type":"text"},{"code":"self","type":"codeVoice"},{"text":" property,","type":"text"},{"text":" ","type":"text"},{"text":"and this new instance will replace the existing one when the method ends.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can opt in to this behavior by placing the "},{"code":"mutating","type":"codeVoice"},{"type":"text","text":" keyword"},{"text":" ","type":"text"},{"text":"before the ","type":"text"},{"code":"func","type":"codeVoice"},{"type":"text","text":" keyword for that method:"}]},{"type":"codeListing","syntax":"swift","code":["struct Point {","    var x = 0.0, y = 0.0","    mutating func moveBy(x deltaX: Double, y deltaY: Double) {","        x += deltaX","        y += deltaY","    }","}","var somePoint = Point(x: 1.0, y: 1.0)","somePoint.moveBy(x: 2.0, y: 3.0)","print(\"The point is now at (\\(somePoint.x), \\(somePoint.y))\")","\/\/ Prints \"The point is now at (3.0, 4.0)\""]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Point"},{"text":" structure above defines a mutating ","type":"text"},{"code":"moveBy(x:y:)","type":"codeVoice"},{"type":"text","text":" method,"},{"text":" ","type":"text"},{"type":"text","text":"which moves a "},{"code":"Point","type":"codeVoice"},{"text":" instance by a certain amount.","type":"text"},{"text":" ","type":"text"},{"text":"Instead of returning a new point,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"this method actually modifies the point on which it’s called."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"mutating","type":"codeVoice"},{"type":"text","text":" keyword is added to its definition"},{"type":"text","text":" "},{"text":"to enable it to modify its properties.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that you can’t call a mutating method on a constant of structure type,"},{"type":"text","text":" "},{"type":"text","text":"because its properties can’t be changed, even if they’re variable properties,"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Stored-Properties-of-Constant-Structure-Instances"},{"text":":","type":"text"}]},{"code":["let fixedPoint = Point(x: 3.0, y: 3.0)","fixedPoint.moveBy(x: 2.0, y: 3.0)","\/\/ this will report an error"],"syntax":"swift","type":"codeListing"},{"anchor":"Assigning-to-self-Within-a-Mutating-Method","text":"Assigning to self Within a Mutating Method","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Mutating methods can assign an entirely new instance to the implicit ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" property."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"Point","type":"codeVoice"},{"type":"text","text":" example shown above could have been written in the following way instead:"}]},{"syntax":"swift","type":"codeListing","code":["struct Point {","    var x = 0.0, y = 0.0","    mutating func moveBy(x deltaX: Double, y deltaY: Double) {","        self = Point(x: x + deltaX, y: y + deltaY)","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"This version of the mutating ","type":"text"},{"code":"moveBy(x:y:)","type":"codeVoice"},{"type":"text","text":" method creates a new structure"},{"type":"text","text":" "},{"type":"text","text":"whose "},{"type":"codeVoice","code":"x"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"y"},{"type":"text","text":" values are set to the target location."},{"type":"text","text":" "},{"type":"text","text":"The end result of calling this alternative version of the method"},{"text":" ","type":"text"},{"type":"text","text":"will be exactly the same as for calling the earlier version."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mutating methods for enumerations can set the implicit "},{"code":"self","type":"codeVoice"},{"type":"text","text":" parameter to be"},{"type":"text","text":" "},{"text":"a different case from the same enumeration:","type":"text"}]},{"type":"codeListing","code":["enum TriStateSwitch {","    case off, low, high","    mutating func next() {","        switch self {","        case .off:","            self = .low","        case .low:","            self = .high","        case .high:","            self = .off","        }","    }","}","var ovenLight = TriStateSwitch.low","ovenLight.next()","\/\/ ovenLight is now equal to .high","ovenLight.next()","\/\/ ovenLight is now equal to .off"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example defines an enumeration for a three-state switch."},{"type":"text","text":" "},{"type":"text","text":"The switch cycles between three different power states"},{"type":"text","text":" "},{"text":"(","type":"text"},{"code":"off","type":"codeVoice"},{"type":"text","text":", "},{"code":"low","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"high"},{"text":")","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"every time its "},{"type":"codeVoice","code":"next()"},{"type":"text","text":" method is called."}]},{"level":2,"text":"Type Methods","type":"heading","anchor":"Type-Methods"},{"inlineContent":[{"type":"text","text":"Instance methods, as described above,"},{"type":"text","text":" "},{"type":"text","text":"are methods that you call on an instance of a particular type."},{"type":"text","text":" "},{"type":"text","text":"You can also define methods that are called on the type itself."},{"type":"text","text":" "},{"type":"text","text":"These kinds of methods are called "},{"inlineContent":[{"type":"text","text":"type methods"}],"type":"emphasis"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You indicate type methods by writing"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"static"},{"text":" keyword before the method’s ","type":"text"},{"code":"func","type":"codeVoice"},{"text":" keyword.","type":"text"},{"text":" ","type":"text"},{"text":"Classes can use the ","type":"text"},{"type":"codeVoice","code":"class"},{"type":"text","text":" keyword instead,"},{"type":"text","text":" "},{"type":"text","text":"to allow subclasses to override the superclass’s implementation of that method."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"text":"In Objective-C, you can define type-level methods only for Objective-C classes.","type":"text"},{"text":" ","type":"text"},{"text":"In Swift, you can define type-level methods for all classes, structures, and enumerations.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Each type method is explicitly scoped to the type it supports."}]}],"style":"note","type":"aside","name":"Note"},{"inlineContent":[{"type":"text","text":"Type methods are called with dot syntax, like instance methods."},{"type":"text","text":" "},{"type":"text","text":"However, you call type methods on the type, not on an instance of that type."},{"type":"text","text":" "},{"type":"text","text":"Here’s how you call a type method on a class called "},{"code":"SomeClass","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["class SomeClass {","    class func someTypeMethod() {","        \/\/ type method implementation goes here","    }","}","SomeClass.someTypeMethod()"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Within the body of a type method,","type":"text"},{"text":" ","type":"text"},{"text":"the implicit ","type":"text"},{"type":"codeVoice","code":"self"},{"text":" property refers to the type itself,","type":"text"},{"type":"text","text":" "},{"text":"rather than an instance of that type.","type":"text"},{"type":"text","text":" "},{"text":"This means that you can use ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" to disambiguate between"},{"text":" ","type":"text"},{"type":"text","text":"type properties and type method parameters,"},{"type":"text","text":" "},{"type":"text","text":"just as you do for instance properties and instance method parameters."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"More generally, any unqualified method and property names that you use"},{"text":" ","type":"text"},{"type":"text","text":"within the body of a type method will refer to other type-level methods and properties."},{"text":" ","type":"text"},{"text":"A type method can call another type method with the other method’s name,","type":"text"},{"text":" ","type":"text"},{"text":"without needing to prefix it with the type name.","type":"text"},{"type":"text","text":" "},{"text":"Similarly, type methods on structures and enumerations can access type properties","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by using the type property’s name without a type name prefix."}]},{"type":"paragraph","inlineContent":[{"text":"The example below defines a structure called ","type":"text"},{"code":"LevelTracker","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which tracks a player’s progress through the different levels or stages of a game.","type":"text"},{"text":" ","type":"text"},{"text":"It’s a single-player game,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but can store information for multiple players on a single device."}]},{"type":"paragraph","inlineContent":[{"text":"All of the game’s levels (apart from level one) are locked when the game is first played.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Every time a player finishes a level,"},{"text":" ","type":"text"},{"type":"text","text":"that level is unlocked for all players on the device."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"LevelTracker"},{"text":" structure uses type properties and methods","type":"text"},{"type":"text","text":" "},{"text":"to keep track of which levels of the game have been unlocked.","type":"text"},{"type":"text","text":" "},{"text":"It also tracks the current level for an individual player.","type":"text"}]},{"syntax":"swift","code":["struct LevelTracker {","    static var highestUnlockedLevel = 1","    var currentLevel = 1","","    static func unlock(_ level: Int) {","        if level > highestUnlockedLevel { highestUnlockedLevel = level }","    }","","    static func isUnlocked(_ level: Int) -> Bool {","        return level <= highestUnlockedLevel","    }","","    @discardableResult","    mutating func advance(to level: Int) -> Bool {","        if LevelTracker.isUnlocked(level) {","            currentLevel = level","            return true","        } else {","            return false","        }","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"LevelTracker"},{"text":" structure keeps track of the highest level that any player has unlocked.","type":"text"},{"type":"text","text":" "},{"text":"This value is stored in a type property called ","type":"text"},{"code":"highestUnlockedLevel","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"code":"LevelTracker","type":"codeVoice"},{"text":" also defines two type functions to work with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"highestUnlockedLevel"},{"text":" property.","type":"text"},{"text":" ","type":"text"},{"text":"The first is a type function called ","type":"text"},{"code":"unlock(_:)","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which updates the value of "},{"type":"codeVoice","code":"highestUnlockedLevel"},{"type":"text","text":" whenever a new level is unlocked."},{"type":"text","text":" "},{"type":"text","text":"The second is a convenience type function called "},{"type":"codeVoice","code":"isUnlocked(_:)"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which returns ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" if a particular level number is already unlocked.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(Note that these type methods can access the "},{"code":"highestUnlockedLevel","type":"codeVoice"},{"type":"text","text":" type property"},{"text":" ","type":"text"},{"text":"without your needing to write it as ","type":"text"},{"code":"LevelTracker.highestUnlockedLevel","type":"codeVoice"},{"text":".)","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to its type property and type methods,"},{"type":"text","text":" "},{"code":"LevelTracker","type":"codeVoice"},{"type":"text","text":" tracks an individual player’s progress through the game."},{"type":"text","text":" "},{"text":"It uses an instance property called ","type":"text"},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" to track"},{"type":"text","text":" "},{"text":"the level that a player is currently playing.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To help manage the "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" property,"},{"type":"text","text":" "},{"code":"LevelTracker","type":"codeVoice"},{"type":"text","text":" defines an instance method called "},{"type":"codeVoice","code":"advance(to:)"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Before updating ","type":"text"},{"code":"currentLevel","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"this method checks whether the requested new level is already unlocked.","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"advance(to:)","type":"codeVoice"},{"type":"text","text":" method returns a Boolean value to indicate"},{"text":" ","type":"text"},{"type":"text","text":"whether or not it was actually able to set "},{"code":"currentLevel","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because it’s not necessarily a mistake for"},{"type":"text","text":" "},{"text":"code that calls the ","type":"text"},{"code":"advance(to:)","type":"codeVoice"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"type":"text","text":"to ignore the return value,"},{"type":"text","text":" "},{"type":"text","text":"this function is marked with the "},{"type":"codeVoice","code":"@discardableResult"},{"type":"text","text":" attribute."},{"text":" ","type":"text"},{"text":"For more information about this attribute,","type":"text"},{"text":" ","type":"text"},{"text":"see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"LevelTracker"},{"type":"text","text":" structure is used with the "},{"code":"Player","type":"codeVoice"},{"text":" class, shown below,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to track and update the progress of an individual player:"}]},{"syntax":"swift","code":["class Player {","    var tracker = LevelTracker()","    let playerName: String","    func complete(level: Int) {","        LevelTracker.unlock(level + 1)","        tracker.advance(to: level + 1)","    }","    init(name: String) {","        playerName = name","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Player"},{"type":"text","text":" class creates a new instance of "},{"code":"LevelTracker","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"to track that player’s progress."},{"text":" ","type":"text"},{"text":"It also provides a method called ","type":"text"},{"type":"codeVoice","code":"complete(level:)"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which is called whenever a player completes a particular level."},{"type":"text","text":" "},{"type":"text","text":"This method unlocks the next level for all players"},{"type":"text","text":" "},{"type":"text","text":"and updates the player’s progress to move them to the next level."},{"type":"text","text":" "},{"text":"(The Boolean return value of ","type":"text"},{"type":"codeVoice","code":"advance(to:)"},{"type":"text","text":" is ignored,"},{"type":"text","text":" "},{"type":"text","text":"because the level is known to have been unlocked"},{"type":"text","text":" "},{"type":"text","text":"by the call to "},{"type":"codeVoice","code":"LevelTracker.unlock(_:)"},{"type":"text","text":" on the previous line.)"}]},{"inlineContent":[{"text":"You can create an instance of the ","type":"text"},{"type":"codeVoice","code":"Player"},{"type":"text","text":" class for a new player,"},{"type":"text","text":" "},{"text":"and see what happens when the player completes level one:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var player = Player(name: \"Argyrios\")","player.complete(level: 1)","print(\"highest unlocked level is now \\(LevelTracker.highestUnlockedLevel)\")","\/\/ Prints \"highest unlocked level is now 2\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If you create a second player, whom you try to move to a level","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that’s not yet unlocked by any player in the game,"},{"type":"text","text":" "},{"type":"text","text":"the attempt to set the player’s current level fails:"}]},{"type":"codeListing","syntax":"swift","code":["player = Player(name: \"Beto\")","if player.tracker.advance(to: 6) {","    print(\"player is now on level 6\")","} else {","    print(\"level 6 hasn't yet been unlocked\")","}","\/\/ Prints \"level 6 hasn't yet been unlocked\""]}]}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Function-Argument-Labels-and-Parameter-Names":{"type":"topic","title":"Function Argument Labels and Parameter Names","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Function-Argument-Labels-and-Parameter-Names","kind":"section","abstract":[],"url":"\/documentation\/the-swift-programming-language\/functions#Function-Argument-Labels-and-Parameter-Names"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"kind":"article","role":"article","url":"\/documentation\/the-swift-programming-language\/functions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","title":"Functions","abstract":[{"text":"Define and call functions, label their arguments, and use their return values.","type":"text"}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","type":"topic","role":"collection","title":"The Swift Programming Language (5.9)","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Stored-Properties-of-Constant-Structure-Instances":{"url":"\/documentation\/the-swift-programming-language\/properties#Stored-Properties-of-Constant-Structure-Instances","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Stored-Properties-of-Constant-Structure-Instances","abstract":[],"kind":"section","title":"Stored Properties of Constant Structure Instances"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","kind":"article","title":"Attributes","abstract":[{"text":"Add information to declarations and types.","type":"text"}],"url":"\/documentation\/the-swift-programming-language\/attributes","type":"topic"}}}