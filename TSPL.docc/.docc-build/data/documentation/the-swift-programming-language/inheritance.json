{"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance"},"abstract":[{"type":"text","text":"Subclass to add or override functionality."}],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"type":"text","text":"A class can "},{"inlineContent":[{"text":"inherit","type":"text"}],"type":"emphasis"},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"type":"text","text":"from another class."},{"type":"text","text":" "},{"type":"text","text":"When one class inherits from another,"},{"type":"text","text":" "},{"text":"the inheriting class is known as a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"and the class it inherits from is known as its ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Inheritance is a fundamental behavior that differentiates classes","type":"text"},{"text":" ","type":"text"},{"text":"from other types in Swift.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes in Swift can call and access"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and subscripts belonging to their superclass"},{"text":" ","type":"text"},{"type":"text","text":"and can provide their own overriding versions of those methods, properties, and subscripts"},{"type":"text","text":" "},{"text":"to refine or modify their behavior.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift helps to ensure your overrides are correct"},{"text":" ","type":"text"},{"text":"by checking that the override definition has a matching superclass definition.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Classes can also add property observers to inherited properties","type":"text"},{"type":"text","text":" "},{"text":"in order to be notified when the value of a property changes.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Property observers can be added to any property,"},{"text":" ","type":"text"},{"text":"regardless of whether it was originally defined as a stored or computed property.","type":"text"}]},{"type":"heading","anchor":"Defining-a-Base-Class","level":2,"text":"Defining a Base Class"},{"inlineContent":[{"text":"Any class that doesn’t inherit from another class is known as a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"base class"}]},{"type":"text","text":"."}],"type":"paragraph"},{"type":"aside","style":"note","content":[{"inlineContent":[{"text":"Swift classes don’t inherit from a universal base class.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Classes you define without specifying a superclass"},{"type":"text","text":" "},{"text":"automatically become base classes for you to build upon.","type":"text"}],"type":"paragraph"}],"name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below defines a base class called "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This base class defines a stored property called "},{"code":"currentSpeed","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"with a default value of ","type":"text"},{"type":"codeVoice","code":"0.0"},{"text":" (inferring a property type of ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" property’s value is used by"},{"type":"text","text":" "},{"text":"a read-only computed ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" property called ","type":"text"},{"type":"codeVoice","code":"description"},{"type":"text","text":" "},{"type":"text","text":"to create a description of the vehicle."}]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Vehicle"},{"text":" base class also defines a method called ","type":"text"},{"type":"codeVoice","code":"makeNoise"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"This method doesn’t actually do anything for a base ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":" instance,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but will be customized by subclasses of "},{"type":"codeVoice","code":"Vehicle"},{"text":" later on:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["class Vehicle {","    var currentSpeed = 0.0","    var description: String {","        return \"traveling at \\(currentSpeed) miles per hour\"","    }","    func makeNoise() {","        \/\/ do nothing - an arbitrary vehicle doesn't necessarily make a noise","    }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"You create a new instance of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" with "},{"inlineContent":[{"text":"initializer syntax","type":"text"}],"type":"emphasis"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which is written as a type name followed by empty parentheses:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let someVehicle = Vehicle()"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Having created a new "},{"type":"codeVoice","code":"Vehicle"},{"text":" instance,","type":"text"},{"text":" ","type":"text"},{"text":"you can access its ","type":"text"},{"type":"codeVoice","code":"description"},{"text":" property to print","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a human-readable description of the vehicle’s current speed:"}],"type":"paragraph"},{"type":"codeListing","code":["print(\"Vehicle: \\(someVehicle.description)\")","\/\/ Vehicle: traveling at 0.0 miles per hour"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" class defines common characteristics for an arbitrary vehicle,"},{"type":"text","text":" "},{"text":"but isn’t much use in itself.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"To make it more useful,"},{"text":" ","type":"text"},{"type":"text","text":"you need to refine it to describe more specific kinds of vehicles."}]},{"text":"Subclassing","type":"heading","level":2,"anchor":"Subclassing"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Subclassing"}],"type":"emphasis"},{"text":" is the act of basing a new class on an existing class.","type":"text"},{"text":" ","type":"text"},{"text":"The subclass inherits characteristics from the existing class, which you can then refine.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can also add new characteristics to the subclass."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To indicate that a subclass has a superclass,"},{"type":"text","text":" "},{"text":"write the subclass name before the superclass name,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"separated by a colon:"}]},{"code":["class SomeSubclass: SomeSuperclass {","    \/\/ subclass definition goes here","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a subclass called "},{"type":"codeVoice","code":"Bicycle"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with a superclass of "},{"type":"codeVoice","code":"Vehicle"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class Bicycle: Vehicle {","    var hasBasket = false","}"]},{"inlineContent":[{"text":"The new ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" class automatically gains all of the characteristics of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"such as its ","type":"text"},{"code":"currentSpeed","type":"codeVoice"},{"type":"text","text":" and "},{"code":"description","type":"codeVoice"},{"type":"text","text":" properties and its "},{"type":"codeVoice","code":"makeNoise()"},{"text":" method.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"In addition to the characteristics it inherits,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"Bicycle","type":"codeVoice"},{"type":"text","text":" class defines a new stored property,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"hasBasket"},{"text":", with a default value of ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":" "},{"type":"text","text":"(inferring a type of "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" for the property)."}],"type":"paragraph"},{"inlineContent":[{"text":"By default, any new ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"text":" instance you create will not have a basket.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can set the "},{"code":"hasBasket","type":"codeVoice"},{"text":" property to ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":" for a particular "},{"type":"codeVoice","code":"Bicycle"},{"text":" instance","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"after that instance is created:"}],"type":"paragraph"},{"code":["let bicycle = Bicycle()","bicycle.hasBasket = true"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can also modify the inherited ","type":"text"},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" property of a "},{"type":"codeVoice","code":"Bicycle"},{"text":" instance,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and query the instance’s inherited "},{"type":"codeVoice","code":"description"},{"text":" property:","type":"text"}]},{"code":["bicycle.currentSpeed = 15.0","print(\"Bicycle: \\(bicycle.description)\")","\/\/ Bicycle: traveling at 15.0 miles per hour"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Subclasses can themselves be subclassed.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The next example creates a subclass of "},{"type":"codeVoice","code":"Bicycle"},{"text":" for a two-seater bicycle","type":"text"},{"type":"text","text":" "},{"type":"text","text":"known as a “tandem”:"}]},{"syntax":"swift","type":"codeListing","code":["class Tandem: Bicycle {","    var currentNumberOfPassengers = 0","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Tandem"},{"text":" inherits all of the properties and methods from ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which in turn inherits all of the properties and methods from "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Tandem"},{"type":"text","text":" subclass also adds a new stored property called "},{"type":"codeVoice","code":"currentNumberOfPassengers"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"with a default value of ","type":"text"},{"type":"codeVoice","code":"0"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"If you create an instance of ","type":"text"},{"type":"codeVoice","code":"Tandem"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"you can work with any of its new and inherited properties,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and query the read-only "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property it inherits from "},{"code":"Vehicle","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["let tandem = Tandem()","tandem.hasBasket = true","tandem.currentNumberOfPassengers = 2","tandem.currentSpeed = 22.0","print(\"Tandem: \\(tandem.description)\")","\/\/ Tandem: traveling at 22.0 miles per hour"],"syntax":"swift","type":"codeListing"},{"anchor":"Overriding","text":"Overriding","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A subclass can provide its own custom implementation of"},{"type":"text","text":" "},{"text":"an instance method, type method, instance property, type property, or subscript","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that it would otherwise inherit from a superclass."},{"type":"text","text":" "},{"type":"text","text":"This is known as "},{"type":"emphasis","inlineContent":[{"text":"overriding","type":"text"}]},{"type":"text","text":"."}]},{"inlineContent":[{"text":"To override a characteristic that would otherwise be inherited,","type":"text"},{"text":" ","type":"text"},{"text":"you prefix your overriding definition with the ","type":"text"},{"type":"codeVoice","code":"override"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"text":"Doing so clarifies that you intend to provide an override","type":"text"},{"text":" ","type":"text"},{"text":"and haven’t provided a matching definition by mistake.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Overriding by accident can cause unexpected behavior,"},{"type":"text","text":" "},{"type":"text","text":"and any overrides without the "},{"type":"codeVoice","code":"override"},{"type":"text","text":" keyword are"},{"text":" ","type":"text"},{"type":"text","text":"diagnosed as an error when your code is compiled."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"override"},{"text":" keyword also prompts the Swift compiler","type":"text"},{"type":"text","text":" "},{"text":"to check that your overriding class’s superclass (or one of its parents)","type":"text"},{"type":"text","text":" "},{"text":"has a declaration that matches the one you provided for the override.","type":"text"},{"type":"text","text":" "},{"text":"This check ensures that your overriding definition is correct.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Accessing Superclass Methods, Properties, and Subscripts","level":3,"anchor":"Accessing-Superclass-Methods-Properties-and-Subscripts"},{"inlineContent":[{"type":"text","text":"When you provide a method, property, or subscript override for a subclass,"},{"text":" ","type":"text"},{"text":"it’s sometimes useful to use the existing superclass implementation","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as part of your override."},{"type":"text","text":" "},{"type":"text","text":"For example, you can refine the behavior of that existing implementation,"},{"type":"text","text":" "},{"type":"text","text":"or store a modified value in an existing inherited variable."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Where this is appropriate,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you access the superclass version of a method, property, or subscript"},{"type":"text","text":" "},{"type":"text","text":"by using the "},{"type":"codeVoice","code":"super"},{"type":"text","text":" prefix:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An overridden method named "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":" can call the superclass version of "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":" "},{"type":"text","text":"by calling "},{"type":"codeVoice","code":"super.someMethod()"},{"text":" within the overriding method implementation.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"An overridden property called ","type":"text"},{"type":"codeVoice","code":"someProperty"},{"type":"text","text":" can access the superclass version of "},{"code":"someProperty","type":"codeVoice"},{"text":" ","type":"text"},{"text":"as ","type":"text"},{"code":"super.someProperty","type":"codeVoice"},{"type":"text","text":" within the overriding getter or setter implementation."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"An overridden subscript for "},{"type":"codeVoice","code":"someIndex"},{"type":"text","text":" can access the superclass version of the same subscript"},{"text":" ","type":"text"},{"text":"as ","type":"text"},{"type":"codeVoice","code":"super[someIndex]"},{"type":"text","text":" from within the overriding subscript implementation."}],"type":"paragraph"}]}]},{"type":"heading","text":"Overriding Methods","level":3,"anchor":"Overriding-Methods"},{"inlineContent":[{"type":"text","text":"You can override an inherited instance or type method"},{"type":"text","text":" "},{"text":"to provide a tailored or alternative implementation of the method within your subclass.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following example defines a new subclass of ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" called "},{"type":"codeVoice","code":"Train"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which overrides the "},{"type":"codeVoice","code":"makeNoise()"},{"type":"text","text":" method that "},{"type":"codeVoice","code":"Train"},{"text":" inherits from ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["class Train: Vehicle {","    override func makeNoise() {","        print(\"Choo Choo\")","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create a new instance of "},{"code":"Train","type":"codeVoice"},{"text":" and call its ","type":"text"},{"code":"makeNoise()","type":"codeVoice"},{"type":"text","text":" method,"},{"text":" ","type":"text"},{"text":"you can see that the ","type":"text"},{"type":"codeVoice","code":"Train"},{"text":" subclass version of the method is called:","type":"text"}]},{"code":["let train = Train()","train.makeNoise()","\/\/ Prints \"Choo Choo\""],"syntax":"swift","type":"codeListing"},{"text":"Overriding Properties","type":"heading","level":3,"anchor":"Overriding-Properties"},{"inlineContent":[{"type":"text","text":"You can override an inherited instance or type property"},{"text":" ","type":"text"},{"type":"text","text":"to provide your own custom getter and setter for that property,"},{"type":"text","text":" "},{"type":"text","text":"or to add property observers to enable the overriding property"},{"text":" ","type":"text"},{"type":"text","text":"to observe when the underlying property value changes."}],"type":"paragraph"},{"text":"Overriding Property Getters and Setters","anchor":"Overriding-Property-Getters-and-Setters","level":4,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can provide a custom getter (and setter, if appropriate)"},{"type":"text","text":" "},{"type":"text","text":"to override "},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"text":" inherited property,","type":"text"},{"type":"text","text":" "},{"text":"regardless of whether the inherited property is implemented as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a stored or computed property at source."},{"type":"text","text":" "},{"type":"text","text":"The stored or computed nature of an inherited property isn’t known by a subclass —"},{"type":"text","text":" "},{"text":"it only knows that the inherited property has a certain name and type.","type":"text"},{"type":"text","text":" "},{"text":"You must always state both the name and the type of the property you are overriding,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to enable the compiler to check that your override matches"},{"text":" ","type":"text"},{"type":"text","text":"a superclass property with the same name and type."}]},{"type":"paragraph","inlineContent":[{"text":"You can present an inherited read-only property as a read-write property","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by providing both a getter and a setter in your subclass property override."},{"type":"text","text":" "},{"type":"text","text":"You can’t, however, present an inherited read-write property as a read-only property."}]},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"If you provide a setter as part of a property override,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you must also provide a getter for that override."},{"type":"text","text":" "},{"text":"If you don’t want to modify the inherited property’s value within the overriding getter,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can simply pass through the inherited value"},{"type":"text","text":" "},{"type":"text","text":"by returning "},{"code":"super.someProperty","type":"codeVoice"},{"type":"text","text":" from the getter,"},{"text":" ","type":"text"},{"type":"text","text":"where "},{"code":"someProperty","type":"codeVoice"},{"type":"text","text":" is the name of the property you are overriding."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a new class called "},{"code":"Car","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which is a subclass of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"Car"},{"text":" class introduces a new stored property called ","type":"text"},{"code":"gear","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with a default integer value of "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class also overrides the "},{"type":"codeVoice","code":"description"},{"text":" property it inherits from ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"to provide a custom description that includes the current gear:","type":"text"}]},{"syntax":"swift","code":["class Car: Vehicle {","    var gear = 1","    override var description: String {","        return super.description + \" in gear \\(gear)\"","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The override of the "},{"code":"description","type":"codeVoice"},{"type":"text","text":" property starts by calling "},{"code":"super.description","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which returns the "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" class’s "},{"code":"description","type":"codeVoice"},{"type":"text","text":" property."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class’s version of "},{"type":"codeVoice","code":"description"},{"text":" then adds some extra text onto","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the end of this description to provide information about the current gear."}]},{"type":"paragraph","inlineContent":[{"text":"If you create an instance of the ","type":"text"},{"code":"Car","type":"codeVoice"},{"text":" class","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and set its "},{"code":"gear","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" properties,"},{"type":"text","text":" "},{"text":"you can see that its ","type":"text"},{"code":"description","type":"codeVoice"},{"text":" property returns","type":"text"},{"text":" ","type":"text"},{"text":"the tailored description defined within the ","type":"text"},{"code":"Car","type":"codeVoice"},{"text":" class:","type":"text"}]},{"code":["let car = Car()","car.currentSpeed = 25.0","car.gear = 3","print(\"Car: \\(car.description)\")","\/\/ Car: traveling at 25.0 miles per hour in gear 3"],"type":"codeListing","syntax":"swift"},{"text":"Overriding Property Observers","anchor":"Overriding-Property-Observers","type":"heading","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use property overriding to add property observers to an inherited property."},{"text":" ","type":"text"},{"text":"This enables you to be notified when the value of an inherited property changes,","type":"text"},{"type":"text","text":" "},{"text":"regardless of how that property was originally implemented.","type":"text"},{"type":"text","text":" "},{"text":"For more information on property observers, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"name":"Note","content":[{"inlineContent":[{"text":"You can’t add property observers to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"inherited constant stored properties or inherited read-only computed properties."},{"text":" ","type":"text"},{"type":"text","text":"The value of these properties can’t be set,"},{"type":"text","text":" "},{"type":"text","text":"and so it isn’t appropriate to provide a "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" or "},{"type":"codeVoice","code":"didSet"},{"text":" implementation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as part of an override."}],"type":"paragraph"},{"inlineContent":[{"text":"Note also that you can’t provide both","type":"text"},{"type":"text","text":" "},{"text":"an overriding setter and an overriding property observer for the same property.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you want to observe changes to a property’s value,"},{"text":" ","type":"text"},{"type":"text","text":"and you are already providing a custom setter for that property,"},{"type":"text","text":" "},{"text":"you can simply observe any value changes from within the custom setter.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"},{"inlineContent":[{"text":"The following example defines a new class called ","type":"text"},{"code":"AutomaticCar","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is a subclass of "},{"code":"Car","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"AutomaticCar"},{"type":"text","text":" class represents a car with an automatic gearbox,"},{"text":" ","type":"text"},{"type":"text","text":"which automatically selects an appropriate gear to use based on the current speed:"}],"type":"paragraph"},{"code":["class AutomaticCar: Car {","    override var currentSpeed: Double {","        didSet {","            gear = Int(currentSpeed \/ 10.0) + 1","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Whenever you set the ","type":"text"},{"code":"currentSpeed","type":"codeVoice"},{"type":"text","text":" property of an "},{"type":"codeVoice","code":"AutomaticCar"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"text":"the property’s ","type":"text"},{"code":"didSet","type":"codeVoice"},{"type":"text","text":" observer sets the instance’s "},{"code":"gear","type":"codeVoice"},{"type":"text","text":" property to"},{"type":"text","text":" "},{"type":"text","text":"an appropriate choice of gear for the new speed."},{"type":"text","text":" "},{"type":"text","text":"Specifically, the property observer chooses a gear that’s"},{"text":" ","type":"text"},{"type":"text","text":"the new "},{"type":"codeVoice","code":"currentSpeed"},{"text":" value divided by ","type":"text"},{"code":"10","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"rounded down to the nearest integer, plus ","type":"text"},{"code":"1","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A speed of "},{"code":"35.0","type":"codeVoice"},{"type":"text","text":" produces a gear of "},{"type":"codeVoice","code":"4"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["let automatic = AutomaticCar()","automatic.currentSpeed = 35.0","print(\"AutomaticCar: \\(automatic.description)\")","\/\/ AutomaticCar: traveling at 35.0 miles per hour in gear 4"]},{"text":"Preventing Overrides","level":2,"anchor":"Preventing-Overrides","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You can prevent a method, property, or subscript from being overridden","type":"text"},{"type":"text","text":" "},{"text":"by marking it as ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"final"}]},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Do this by writing the "},{"type":"codeVoice","code":"final"},{"text":" modifier before","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the method, property, or subscript’s introducer keyword"},{"type":"text","text":" "},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"final var"},{"text":", ","type":"text"},{"code":"final func","type":"codeVoice"},{"type":"text","text":", "},{"code":"final class func","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"final subscript"},{"text":").","type":"text"}]},{"inlineContent":[{"type":"text","text":"Any attempt to override a final method, property, or subscript in a subclass"},{"type":"text","text":" "},{"type":"text","text":"is reported as a compile-time error."},{"type":"text","text":" "},{"type":"text","text":"Methods, properties, or subscripts that you add to a class in an extension"},{"type":"text","text":" "},{"type":"text","text":"can also be marked as final within the extension’s definition."},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can mark an entire class as final by writing the "},{"type":"codeVoice","code":"final"},{"type":"text","text":" modifier"},{"type":"text","text":" "},{"type":"text","text":"before the "},{"code":"class","type":"codeVoice"},{"text":" keyword in its class definition (","type":"text"},{"code":"final class","type":"codeVoice"},{"type":"text","text":")."},{"text":" ","type":"text"},{"type":"text","text":"Any attempt to subclass a final class is reported as a compile-time error."}],"type":"paragraph"}]}],"metadata":{"title":"Inheritance"},"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","abstract":[{"text":"Add functionality to an existing type.","type":"text"}],"role":"article","url":"\/documentation\/the-swift-programming-language\/extensions","title":"Extensions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","title":"The Swift Programming Language (5.9)","type":"topic","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Observers":{"url":"\/documentation\/the-swift-programming-language\/properties#Property-Observers","title":"Property Observers","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","type":"topic","abstract":[]}}}