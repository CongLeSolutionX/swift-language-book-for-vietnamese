{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance"},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"inherit"}]},{"type":"text","text":" methods, properties, and other characteristics"},{"type":"text","text":" "},{"text":"from another class.","type":"text"},{"type":"text","text":" "},{"text":"When one class inherits from another,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the inheriting class is known as a "},{"inlineContent":[{"text":"subclass","type":"text"}],"type":"emphasis"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"text":"superclass","type":"text"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Inheritance is a fundamental behavior that differentiates classes"},{"type":"text","text":" "},{"type":"text","text":"from other types in Swift."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes in Swift can call and access"},{"type":"text","text":" "},{"type":"text","text":"methods, properties, and subscripts belonging to their superclass"},{"type":"text","text":" "},{"type":"text","text":"and can provide their own overriding versions of those methods, properties, and subscripts"},{"text":" ","type":"text"},{"text":"to refine or modify their behavior.","type":"text"},{"type":"text","text":" "},{"text":"Swift helps to ensure your overrides are correct","type":"text"},{"text":" ","type":"text"},{"text":"by checking that the override definition has a matching superclass definition.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Classes can also add property observers to inherited properties"},{"type":"text","text":" "},{"type":"text","text":"in order to be notified when the value of a property changes."},{"type":"text","text":" "},{"text":"Property observers can be added to any property,","type":"text"},{"type":"text","text":" "},{"text":"regardless of whether it was originally defined as a stored or computed property.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Defining-a-Base-Class","text":"Defining a Base Class","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Any class that doesn’t inherit from another class is known as a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"base class"}]},{"text":".","type":"text"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift classes don’t inherit from a universal base class."},{"type":"text","text":" "},{"text":"Classes you define without specifying a superclass","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"automatically become base classes for you to build upon."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"text":"The example below defines a base class called ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This base class defines a stored property called "},{"code":"currentSpeed","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"with a default value of ","type":"text"},{"code":"0.0","type":"codeVoice"},{"type":"text","text":" (inferring a property type of "},{"type":"codeVoice","code":"Double"},{"text":").","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"code":"currentSpeed","type":"codeVoice"},{"type":"text","text":" property’s value is used by"},{"type":"text","text":" "},{"type":"text","text":"a read-only computed "},{"type":"codeVoice","code":"String"},{"text":" property called ","type":"text"},{"code":"description","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"to create a description of the vehicle."}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":" base class also defines a method called "},{"type":"codeVoice","code":"makeNoise"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"This method doesn’t actually do anything for a base ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"text":"but will be customized by subclasses of ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":" later on:","type":"text"}]},{"code":["class Vehicle {","    var currentSpeed = 0.0","    var description: String {","        return \"traveling at \\(currentSpeed) miles per hour\"","    }","    func makeNoise() {","        \/\/ do nothing - an arbitrary vehicle doesn't necessarily make a noise","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"You create a new instance of ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" with "},{"inlineContent":[{"type":"text","text":"initializer syntax"}],"type":"emphasis"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which is written as a type name followed by empty parentheses:","type":"text"}],"type":"paragraph"},{"code":["let someVehicle = Vehicle()"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Having created a new "},{"code":"Vehicle","type":"codeVoice"},{"text":" instance,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can access its "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property to print"},{"type":"text","text":" "},{"type":"text","text":"a human-readable description of the vehicle’s current speed:"}]},{"type":"codeListing","syntax":"swift","code":["print(\"Vehicle: \\(someVehicle.description)\")","\/\/ Vehicle: traveling at 0.0 miles per hour"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Vehicle"},{"text":" class defines common characteristics for an arbitrary vehicle,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but isn’t much use in itself."},{"type":"text","text":" "},{"type":"text","text":"To make it more useful,"},{"type":"text","text":" "},{"type":"text","text":"you need to refine it to describe more specific kinds of vehicles."}],"type":"paragraph"},{"level":2,"text":"Subclassing","anchor":"Subclassing","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Subclassing","type":"text"}]},{"text":" is the act of basing a new class on an existing class.","type":"text"},{"type":"text","text":" "},{"text":"The subclass inherits characteristics from the existing class, which you can then refine.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can also add new characteristics to the subclass."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To indicate that a subclass has a superclass,"},{"type":"text","text":" "},{"text":"write the subclass name before the superclass name,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"separated by a colon:"}]},{"syntax":"swift","type":"codeListing","code":["class SomeSubclass: SomeSuperclass {","    \/\/ subclass definition goes here","}"]},{"type":"paragraph","inlineContent":[{"text":"The following example defines a subclass called ","type":"text"},{"code":"Bicycle","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"with a superclass of ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["class Bicycle: Vehicle {","    var hasBasket = false","}"]},{"type":"paragraph","inlineContent":[{"text":"The new ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" class automatically gains all of the characteristics of "},{"type":"codeVoice","code":"Vehicle"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as its "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" and "},{"code":"description","type":"codeVoice"},{"text":" properties and its ","type":"text"},{"code":"makeNoise()","type":"codeVoice"},{"type":"text","text":" method."}]},{"inlineContent":[{"text":"In addition to the characteristics it inherits,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"text":" class defines a new stored property,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"hasBasket"},{"text":", with a default value of ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":" "},{"text":"(inferring a type of ","type":"text"},{"type":"codeVoice","code":"Bool"},{"text":" for the property).","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, any new "},{"type":"codeVoice","code":"Bicycle"},{"text":" instance you create will not have a basket.","type":"text"},{"text":" ","type":"text"},{"text":"You can set the ","type":"text"},{"type":"codeVoice","code":"hasBasket"},{"type":"text","text":" property to "},{"type":"codeVoice","code":"true"},{"type":"text","text":" for a particular "},{"code":"Bicycle","type":"codeVoice"},{"type":"text","text":" instance"},{"text":" ","type":"text"},{"type":"text","text":"after that instance is created:"}]},{"type":"codeListing","syntax":"swift","code":["let bicycle = Bicycle()","bicycle.hasBasket = true"]},{"type":"paragraph","inlineContent":[{"text":"You can also modify the inherited ","type":"text"},{"code":"currentSpeed","type":"codeVoice"},{"text":" property of a ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"and query the instance’s inherited "},{"type":"codeVoice","code":"description"},{"text":" property:","type":"text"}]},{"code":["bicycle.currentSpeed = 15.0","print(\"Bicycle: \\(bicycle.description)\")","\/\/ Bicycle: traveling at 15.0 miles per hour"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Subclasses can themselves be subclassed.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The next example creates a subclass of "},{"type":"codeVoice","code":"Bicycle"},{"text":" for a two-seater bicycle","type":"text"},{"type":"text","text":" "},{"text":"known as a “tandem”:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class Tandem: Bicycle {","    var currentNumberOfPassengers = 0","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Tandem"},{"type":"text","text":" inherits all of the properties and methods from "},{"type":"codeVoice","code":"Bicycle"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which in turn inherits all of the properties and methods from "},{"type":"codeVoice","code":"Vehicle"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"Tandem"},{"text":" subclass also adds a new stored property called ","type":"text"},{"type":"codeVoice","code":"currentNumberOfPassengers"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with a default value of "},{"type":"codeVoice","code":"0"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"If you create an instance of ","type":"text"},{"type":"codeVoice","code":"Tandem"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"you can work with any of its new and inherited properties,"},{"type":"text","text":" "},{"type":"text","text":"and query the read-only "},{"code":"description","type":"codeVoice"},{"text":" property it inherits from ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":"swift","code":["let tandem = Tandem()","tandem.hasBasket = true","tandem.currentNumberOfPassengers = 2","tandem.currentSpeed = 22.0","print(\"Tandem: \\(tandem.description)\")","\/\/ Tandem: traveling at 22.0 miles per hour"],"type":"codeListing"},{"type":"heading","anchor":"Overriding","text":"Overriding","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A subclass can provide its own custom implementation of"},{"type":"text","text":" "},{"type":"text","text":"an instance method, type method, instance property, type property, or subscript"},{"type":"text","text":" "},{"type":"text","text":"that it would otherwise inherit from a superclass."},{"type":"text","text":" "},{"text":"This is known as ","type":"text"},{"inlineContent":[{"type":"text","text":"overriding"}],"type":"emphasis"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"To override a characteristic that would otherwise be inherited,","type":"text"},{"text":" ","type":"text"},{"text":"you prefix your overriding definition with the ","type":"text"},{"type":"codeVoice","code":"override"},{"text":" keyword.","type":"text"},{"type":"text","text":" "},{"text":"Doing so clarifies that you intend to provide an override","type":"text"},{"text":" ","type":"text"},{"text":"and haven’t provided a matching definition by mistake.","type":"text"},{"type":"text","text":" "},{"text":"Overriding by accident can cause unexpected behavior,","type":"text"},{"type":"text","text":" "},{"text":"and any overrides without the ","type":"text"},{"type":"codeVoice","code":"override"},{"type":"text","text":" keyword are"},{"type":"text","text":" "},{"type":"text","text":"diagnosed as an error when your code is compiled."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"override"},{"type":"text","text":" keyword also prompts the Swift compiler"},{"type":"text","text":" "},{"text":"to check that your overriding class’s superclass (or one of its parents)","type":"text"},{"type":"text","text":" "},{"text":"has a declaration that matches the one you provided for the override.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This check ensures that your overriding definition is correct."}]},{"level":3,"type":"heading","text":"Accessing Superclass Methods, Properties, and Subscripts","anchor":"Accessing-Superclass-Methods-Properties-and-Subscripts"},{"inlineContent":[{"text":"When you provide a method, property, or subscript override for a subclass,","type":"text"},{"text":" ","type":"text"},{"text":"it’s sometimes useful to use the existing superclass implementation","type":"text"},{"type":"text","text":" "},{"text":"as part of your override.","type":"text"},{"type":"text","text":" "},{"text":"For example, you can refine the behavior of that existing implementation,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or store a modified value in an existing inherited variable."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Where this is appropriate,","type":"text"},{"type":"text","text":" "},{"text":"you access the superclass version of a method, property, or subscript","type":"text"},{"text":" ","type":"text"},{"text":"by using the ","type":"text"},{"type":"codeVoice","code":"super"},{"text":" prefix:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"An overridden method named ","type":"text"},{"code":"someMethod()","type":"codeVoice"},{"text":" can call the superclass version of ","type":"text"},{"code":"someMethod()","type":"codeVoice"},{"type":"text","text":" "},{"text":"by calling ","type":"text"},{"code":"super.someMethod()","type":"codeVoice"},{"type":"text","text":" within the overriding method implementation."}]}]},{"content":[{"inlineContent":[{"text":"An overridden property called ","type":"text"},{"code":"someProperty","type":"codeVoice"},{"type":"text","text":" can access the superclass version of "},{"code":"someProperty","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"as "},{"code":"super.someProperty","type":"codeVoice"},{"type":"text","text":" within the overriding getter or setter implementation."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"An overridden subscript for "},{"type":"codeVoice","code":"someIndex"},{"text":" can access the superclass version of the same subscript","type":"text"},{"type":"text","text":" "},{"text":"as ","type":"text"},{"code":"super[someIndex]","type":"codeVoice"},{"type":"text","text":" from within the overriding subscript implementation."}],"type":"paragraph"}]}]},{"level":3,"text":"Overriding Methods","type":"heading","anchor":"Overriding-Methods"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can override an inherited instance or type method"},{"type":"text","text":" "},{"type":"text","text":"to provide a tailored or alternative implementation of the method within your subclass."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a new subclass of "},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":" called "},{"code":"Train","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which overrides the "},{"code":"makeNoise()","type":"codeVoice"},{"text":" method that ","type":"text"},{"type":"codeVoice","code":"Train"},{"type":"text","text":" inherits from "},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":":"}]},{"code":["class Train: Vehicle {","    override func makeNoise() {","        print(\"Choo Choo\")","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If you create a new instance of "},{"code":"Train","type":"codeVoice"},{"text":" and call its ","type":"text"},{"type":"codeVoice","code":"makeNoise()"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"you can see that the "},{"code":"Train","type":"codeVoice"},{"text":" subclass version of the method is called:","type":"text"}],"type":"paragraph"},{"code":["let train = Train()","train.makeNoise()","\/\/ Prints \"Choo Choo\""],"type":"codeListing","syntax":"swift"},{"level":3,"text":"Overriding Properties","type":"heading","anchor":"Overriding-Properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can override an inherited instance or type property"},{"text":" ","type":"text"},{"text":"to provide your own custom getter and setter for that property,","type":"text"},{"type":"text","text":" "},{"text":"or to add property observers to enable the overriding property","type":"text"},{"text":" ","type":"text"},{"text":"to observe when the underlying property value changes.","type":"text"}]},{"text":"Overriding Property Getters and Setters","level":4,"anchor":"Overriding-Property-Getters-and-Setters","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You can provide a custom getter (and setter, if appropriate)","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to override "},{"inlineContent":[{"text":"any","type":"text"}],"type":"emphasis"},{"text":" inherited property,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"regardless of whether the inherited property is implemented as"},{"text":" ","type":"text"},{"text":"a stored or computed property at source.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The stored or computed nature of an inherited property isn’t known by a subclass —"},{"type":"text","text":" "},{"type":"text","text":"it only knows that the inherited property has a certain name and type."},{"type":"text","text":" "},{"type":"text","text":"You must always state both the name and the type of the property you are overriding,"},{"type":"text","text":" "},{"text":"to enable the compiler to check that your override matches","type":"text"},{"text":" ","type":"text"},{"text":"a superclass property with the same name and type.","type":"text"}]},{"inlineContent":[{"type":"text","text":"You can present an inherited read-only property as a read-write property"},{"text":" ","type":"text"},{"type":"text","text":"by providing both a getter and a setter in your subclass property override."},{"text":" ","type":"text"},{"text":"You can’t, however, present an inherited read-write property as a read-only property.","type":"text"}],"type":"paragraph"},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"If you provide a setter as part of a property override,"},{"type":"text","text":" "},{"type":"text","text":"you must also provide a getter for that override."},{"type":"text","text":" "},{"type":"text","text":"If you don’t want to modify the inherited property’s value within the overriding getter,"},{"type":"text","text":" "},{"text":"you can simply pass through the inherited value","type":"text"},{"text":" ","type":"text"},{"text":"by returning ","type":"text"},{"code":"super.someProperty","type":"codeVoice"},{"type":"text","text":" from the getter,"},{"text":" ","type":"text"},{"type":"text","text":"where "},{"type":"codeVoice","code":"someProperty"},{"type":"text","text":" is the name of the property you are overriding."}],"type":"paragraph"}],"type":"aside","style":"note"},{"inlineContent":[{"text":"The following example defines a new class called ","type":"text"},{"type":"codeVoice","code":"Car"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which is a subclass of ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class introduces a new stored property called "},{"type":"codeVoice","code":"gear"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with a default integer value of "},{"type":"codeVoice","code":"1"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class also overrides the "},{"code":"description","type":"codeVoice"},{"text":" property it inherits from ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to provide a custom description that includes the current gear:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class Car: Vehicle {","    var gear = 1","    override var description: String {","        return super.description + \" in gear \\(gear)\"","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The override of the "},{"code":"description","type":"codeVoice"},{"type":"text","text":" property starts by calling "},{"type":"codeVoice","code":"super.description"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which returns the ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":" class’s ","type":"text"},{"code":"description","type":"codeVoice"},{"type":"text","text":" property."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"Car","type":"codeVoice"},{"text":" class’s version of ","type":"text"},{"type":"codeVoice","code":"description"},{"text":" then adds some extra text onto","type":"text"},{"text":" ","type":"text"},{"text":"the end of this description to provide information about the current gear.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If you create an instance of the ","type":"text"},{"type":"codeVoice","code":"Car"},{"text":" class","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and set its "},{"type":"codeVoice","code":"gear"},{"type":"text","text":" and "},{"type":"codeVoice","code":"currentSpeed"},{"text":" properties,","type":"text"},{"type":"text","text":" "},{"text":"you can see that its ","type":"text"},{"code":"description","type":"codeVoice"},{"type":"text","text":" property returns"},{"type":"text","text":" "},{"type":"text","text":"the tailored description defined within the "},{"type":"codeVoice","code":"Car"},{"text":" class:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let car = Car()","car.currentSpeed = 25.0","car.gear = 3","print(\"Car: \\(car.description)\")","\/\/ Car: traveling at 25.0 miles per hour in gear 3"]},{"text":"Overriding Property Observers","type":"heading","level":4,"anchor":"Overriding-Property-Observers"},{"inlineContent":[{"type":"text","text":"You can use property overriding to add property observers to an inherited property."},{"type":"text","text":" "},{"type":"text","text":"This enables you to be notified when the value of an inherited property changes,"},{"type":"text","text":" "},{"type":"text","text":"regardless of how that property was originally implemented."},{"type":"text","text":" "},{"text":"For more information on property observers, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can’t add property observers to"},{"text":" ","type":"text"},{"text":"inherited constant stored properties or inherited read-only computed properties.","type":"text"},{"type":"text","text":" "},{"text":"The value of these properties can’t be set,","type":"text"},{"type":"text","text":" "},{"text":"and so it isn’t appropriate to provide a ","type":"text"},{"type":"codeVoice","code":"willSet"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"didSet"},{"text":" implementation","type":"text"},{"text":" ","type":"text"},{"text":"as part of an override.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note also that you can’t provide both"},{"text":" ","type":"text"},{"type":"text","text":"an overriding setter and an overriding property observer for the same property."},{"text":" ","type":"text"},{"type":"text","text":"If you want to observe changes to a property’s value,"},{"text":" ","type":"text"},{"type":"text","text":"and you are already providing a custom setter for that property,"},{"text":" ","type":"text"},{"type":"text","text":"you can simply observe any value changes from within the custom setter."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a new class called "},{"code":"AutomaticCar","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which is a subclass of ","type":"text"},{"code":"Car","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"AutomaticCar"},{"text":" class represents a car with an automatic gearbox,","type":"text"},{"type":"text","text":" "},{"text":"which automatically selects an appropriate gear to use based on the current speed:","type":"text"}]},{"code":["class AutomaticCar: Car {","    override var currentSpeed: Double {","        didSet {","            gear = Int(currentSpeed \/ 10.0) + 1","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Whenever you set the ","type":"text"},{"code":"currentSpeed","type":"codeVoice"},{"type":"text","text":" property of an "},{"code":"AutomaticCar","type":"codeVoice"},{"type":"text","text":" instance,"},{"type":"text","text":" "},{"type":"text","text":"the property’s "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observer sets the instance’s "},{"type":"codeVoice","code":"gear"},{"type":"text","text":" property to"},{"type":"text","text":" "},{"type":"text","text":"an appropriate choice of gear for the new speed."},{"type":"text","text":" "},{"type":"text","text":"Specifically, the property observer chooses a gear that’s"},{"type":"text","text":" "},{"type":"text","text":"the new "},{"code":"currentSpeed","type":"codeVoice"},{"type":"text","text":" value divided by "},{"code":"10","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"rounded down to the nearest integer, plus "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"A speed of "},{"code":"35.0","type":"codeVoice"},{"type":"text","text":" produces a gear of "},{"type":"codeVoice","code":"4"},{"text":":","type":"text"}]},{"type":"codeListing","code":["let automatic = AutomaticCar()","automatic.currentSpeed = 35.0","print(\"AutomaticCar: \\(automatic.description)\")","\/\/ AutomaticCar: traveling at 35.0 miles per hour in gear 4"],"syntax":"swift"},{"text":"Preventing Overrides","anchor":"Preventing-Overrides","level":2,"type":"heading"},{"inlineContent":[{"text":"You can prevent a method, property, or subscript from being overridden","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by marking it as "},{"inlineContent":[{"text":"final","type":"text"}],"type":"emphasis"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Do this by writing the "},{"code":"final","type":"codeVoice"},{"type":"text","text":" modifier before"},{"text":" ","type":"text"},{"text":"the method, property, or subscript’s introducer keyword","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(such as "},{"type":"codeVoice","code":"final var"},{"type":"text","text":", "},{"type":"codeVoice","code":"final func"},{"type":"text","text":", "},{"code":"final class func","type":"codeVoice"},{"type":"text","text":", and "},{"code":"final subscript","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Any attempt to override a final method, property, or subscript in a subclass","type":"text"},{"type":"text","text":" "},{"text":"is reported as a compile-time error.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Methods, properties, or subscripts that you add to a class in an extension"},{"type":"text","text":" "},{"text":"can also be marked as final within the extension’s definition.","type":"text"},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can mark an entire class as final by writing the "},{"code":"final","type":"codeVoice"},{"type":"text","text":" modifier"},{"type":"text","text":" "},{"type":"text","text":"before the "},{"code":"class","type":"codeVoice"},{"type":"text","text":" keyword in its class definition ("},{"type":"codeVoice","code":"final class"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Any attempt to subclass a final class is reported as a compile-time error."}],"type":"paragraph"}]}],"abstract":[{"text":"Subclass to add or override functionality.","type":"text"}],"kind":"article","schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"metadata":{"title":"Inheritance"},"sections":[],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"title":"The Swift Programming Language (5.9)","kind":"article","role":"collection","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","url":"\/documentation\/the-swift-programming-language","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"type":"topic","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","url":"\/documentation\/the-swift-programming-language\/extensions","title":"Extensions","abstract":[{"text":"Add functionality to an existing type.","type":"text"}],"role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Observers":{"url":"\/documentation\/the-swift-programming-language\/properties#Property-Observers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","type":"topic","title":"Property Observers","abstract":[],"kind":"section"}}}