{"metadata":{"title":"Structures and Classes"},"abstract":[{"text":"Model custom types that encapsulate data.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","primaryContentSections":[{"content":[{"inlineContent":[{"inlineContent":[{"text":"Structures","type":"text"}],"type":"emphasis"},{"type":"text","text":" and "},{"inlineContent":[{"type":"text","text":"classes"}],"type":"emphasis"},{"type":"text","text":" are general-purpose,"},{"text":" ","type":"text"},{"type":"text","text":"flexible constructs that become the building blocks of your program’s code."},{"type":"text","text":" "},{"type":"text","text":"You define properties and methods to add functionality to your structures and classes"},{"type":"text","text":" "},{"text":"using the same syntax you use to define constants, variables, and functions.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike other programming languages,"},{"type":"text","text":" "},{"text":"Swift doesn’t require you to create separate interface and implementation files","type":"text"},{"type":"text","text":" "},{"text":"for custom structures and classes.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In Swift, you define a structure or class in a single file,"},{"type":"text","text":" "},{"type":"text","text":"and the external interface to that class or structure is"},{"text":" ","type":"text"},{"type":"text","text":"automatically made available for other code to use."}]},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An instance of a class is traditionally known as an "},{"type":"emphasis","inlineContent":[{"text":"object","type":"text"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"However, Swift structures and classes"},{"text":" ","type":"text"},{"type":"text","text":"are much closer in functionality than in other languages,"},{"type":"text","text":" "},{"text":"and much of this chapter describes functionality that applies to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"instances of "},{"inlineContent":[{"type":"text","text":"either"}],"type":"emphasis"},{"type":"text","text":" a class or a structure type."},{"text":" ","type":"text"},{"text":"Because of this, the more general term ","type":"text"},{"inlineContent":[{"type":"text","text":"instance"}],"type":"emphasis"},{"text":" is used.","type":"text"}]}]},{"anchor":"Comparing-Structures-and-Classes","level":2,"type":"heading","text":"Comparing Structures and Classes"},{"inlineContent":[{"type":"text","text":"Structures and classes in Swift have many things in common."},{"type":"text","text":" "},{"text":"Both can:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define properties to store values"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define methods to provide functionality"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Define subscripts to provide access to their values using subscript syntax","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define initializers to set up their initial state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Be extended to expand their functionality beyond a default implementation","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Conform to protocols to provide standard functionality of a certain kind"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"For more information, see"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","isActive":true,"type":"reference"},{"type":"text","text":", "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","type":"reference","isActive":true},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","isActive":true},{"type":"text","text":", and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Classes have additional capabilities that structures don’t have:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inheritance enables one class to inherit the characteristics of another."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Type casting enables you to check and interpret the type of a class instance at runtime."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Deinitializers enable an instance of a class to free up any resources it has assigned."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Reference counting allows more than one reference to a class instance.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"For more information, see","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting"},{"type":"text","text":", "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","type":"reference","isActive":true},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The additional capabilities that classes support","type":"text"},{"type":"text","text":" "},{"type":"text","text":"come at the cost of increased complexity."},{"type":"text","text":" "},{"type":"text","text":"As a general guideline,"},{"type":"text","text":" "},{"type":"text","text":"prefer structures because they’re easier to reason about,"},{"text":" ","type":"text"},{"text":"and use classes when they’re appropriate or necessary.","type":"text"},{"text":" ","type":"text"},{"text":"In practice, this means most of the custom types you define","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"will be structures and enumerations."},{"text":" ","type":"text"},{"text":"For a more detailed comparison,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes"},{"type":"text","text":"."}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Classes and actors share many of the same characteristics and behaviors.","type":"text"},{"text":" ","type":"text"},{"text":"For information about actors, see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","isActive":true},{"text":".","type":"text"}]}],"name":"Note","style":"note","type":"aside"},{"level":3,"type":"heading","anchor":"Definition-Syntax","text":"Definition Syntax"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Structures and classes have a similar definition syntax."},{"text":" ","type":"text"},{"type":"text","text":"You introduce structures with the "},{"code":"struct","type":"codeVoice"},{"text":" keyword","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and classes with the "},{"code":"class","type":"codeVoice"},{"text":" keyword.","type":"text"},{"text":" ","type":"text"},{"text":"Both place their entire definition within a pair of braces:","type":"text"}]},{"code":["struct SomeStructure {","    \/\/ structure definition goes here","}","class SomeClass {","    \/\/ class definition goes here","}"],"syntax":"swift","type":"codeListing"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Whenever you define a new structure or class,"},{"text":" ","type":"text"},{"type":"text","text":"you define a new Swift type."},{"type":"text","text":" "},{"text":"Give types ","type":"text"},{"code":"UpperCamelCase","type":"codeVoice"},{"type":"text","text":" names"},{"type":"text","text":" "},{"text":"(such as ","type":"text"},{"type":"codeVoice","code":"SomeStructure"},{"type":"text","text":" and "},{"code":"SomeClass","type":"codeVoice"},{"text":" here)","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to match the capitalization of standard Swift types"},{"type":"text","text":" "},{"text":"(such as ","type":"text"},{"type":"codeVoice","code":"String"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":", and ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":").","type":"text"},{"type":"text","text":" "},{"text":"Give properties and methods ","type":"text"},{"code":"lowerCamelCase","type":"codeVoice"},{"type":"text","text":" names"},{"text":" ","type":"text"},{"type":"text","text":"(such as "},{"code":"frameRate","type":"codeVoice"},{"type":"text","text":" and "},{"code":"incrementCount","type":"codeVoice"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"to differentiate them from type names."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of a structure definition and a class definition:"}]},{"code":["struct Resolution {","    var width = 0","    var height = 0","}","class VideoMode {","    var resolution = Resolution()","    var interlaced = false","    var frameRate = 0.0","    var name: String?","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The example above defines a new structure called ","type":"text"},{"code":"Resolution","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"to describe a pixel-based display resolution.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This structure has two stored properties called "},{"code":"width","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"height"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Stored properties are constants or variables that are bundled up and stored","type":"text"},{"text":" ","type":"text"},{"text":"as part of the structure or class.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"These two properties are inferred to be of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" "},{"type":"text","text":"by setting them to an initial integer value of "},{"type":"codeVoice","code":"0"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above also defines a new class called "},{"type":"codeVoice","code":"VideoMode"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to describe a specific video mode for video display."},{"type":"text","text":" "},{"type":"text","text":"This class has four variable stored properties."},{"type":"text","text":" "},{"type":"text","text":"The first, "},{"type":"codeVoice","code":"resolution"},{"text":", is initialized with a new ","type":"text"},{"type":"codeVoice","code":"Resolution"},{"type":"text","text":" structure instance,"},{"text":" ","type":"text"},{"type":"text","text":"which infers a property type of "},{"type":"codeVoice","code":"Resolution"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"For the other three properties,","type":"text"},{"text":" ","type":"text"},{"text":"new ","type":"text"},{"type":"codeVoice","code":"VideoMode"},{"text":" instances will be initialized with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an "},{"code":"interlaced","type":"codeVoice"},{"text":" setting of ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":" (meaning “noninterlaced video”),"},{"type":"text","text":" "},{"type":"text","text":"a playback frame rate of "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and an optional ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" value called "},{"code":"name","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"name","type":"codeVoice"},{"type":"text","text":" property is automatically given a default value of "},{"type":"codeVoice","code":"nil"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"or “no ","type":"text"},{"type":"codeVoice","code":"name"},{"type":"text","text":" value”, because it’s of an optional type."}]},{"level":3,"anchor":"Structure-and-Class-Instances","type":"heading","text":"Structure and Class Instances"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Resolution"},{"text":" structure definition and the ","type":"text"},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" class definition"},{"text":" ","type":"text"},{"text":"only describe what a ","type":"text"},{"code":"Resolution","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"type":"text","text":" will look like."},{"type":"text","text":" "},{"text":"They themselves don’t describe a specific resolution or video mode.","type":"text"},{"type":"text","text":" "},{"text":"To do that, you need to create an instance of the structure or class.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The syntax for creating instances is very similar for both structures and classes:"}],"type":"paragraph"},{"syntax":"swift","code":["let someResolution = Resolution()","let someVideoMode = VideoMode()"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Structures and classes both use initializer syntax for new instances."},{"text":" ","type":"text"},{"type":"text","text":"The simplest form of initializer syntax uses the type name of the class or structure"},{"type":"text","text":" "},{"type":"text","text":"followed by empty parentheses, such as "},{"code":"Resolution()","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"VideoMode()","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This creates a new instance of the class or structure,"},{"text":" ","type":"text"},{"type":"text","text":"with any properties initialized to their default values."},{"type":"text","text":" "},{"type":"text","text":"Class and structure initialization is described in more detail"},{"text":" ","type":"text"},{"type":"text","text":"in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization"},{"type":"text","text":"."}]},{"level":3,"type":"heading","text":"Accessing Properties","anchor":"Accessing-Properties"},{"inlineContent":[{"type":"text","text":"You can access the properties of an instance using "},{"type":"emphasis","inlineContent":[{"text":"dot syntax","type":"text"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"In dot syntax, you write the property name immediately after the instance name,"},{"text":" ","type":"text"},{"text":"separated by a period (","type":"text"},{"type":"codeVoice","code":"."},{"text":"), without any spaces:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["print(\"The width of someResolution is \\(someResolution.width)\")","\/\/ Prints \"The width of someResolution is 0\""]},{"inlineContent":[{"text":"In this example,","type":"text"},{"text":" ","type":"text"},{"code":"someResolution.width","type":"codeVoice"},{"type":"text","text":" refers to the "},{"type":"codeVoice","code":"width"},{"text":" property of ","type":"text"},{"code":"someResolution","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and returns its default initial value of "},{"type":"codeVoice","code":"0"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can drill down into subproperties,"},{"text":" ","type":"text"},{"type":"text","text":"such as the "},{"type":"codeVoice","code":"width"},{"type":"text","text":" property in the "},{"code":"resolution","type":"codeVoice"},{"text":" property of a ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["print(\"The width of someVideoMode is \\(someVideoMode.resolution.width)\")","\/\/ Prints \"The width of someVideoMode is 0\""]},{"type":"paragraph","inlineContent":[{"text":"You can also use dot syntax to assign a new value to a variable property:","type":"text"}]},{"code":["someVideoMode.resolution.width = 1280","print(\"The width of someVideoMode is now \\(someVideoMode.resolution.width)\")","\/\/ Prints \"The width of someVideoMode is now 1280\""],"syntax":"swift","type":"codeListing"},{"type":"heading","anchor":"Memberwise-Initializers-for-Structure-Types","level":3,"text":"Memberwise Initializers for Structure Types"},{"type":"paragraph","inlineContent":[{"text":"All structures have an automatically generated ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"memberwise initializer"}]},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"which you can use to initialize the member properties of new structure instances.","type":"text"},{"text":" ","type":"text"},{"text":"Initial values for the properties of the new instance","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can be passed to the memberwise initializer by name:"}]},{"syntax":"swift","code":["let vga = Resolution(width: 640, height: 480)"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Unlike structures, class instances don’t receive a default memberwise initializer.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Initializers are described in more detail in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","type":"reference","isActive":true},{"type":"text","text":"."}]},{"type":"heading","anchor":"Structures-and-Enumerations-Are-Value-Types","level":2,"text":"Structures and Enumerations Are Value Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"value type"}]},{"type":"text","text":" is a type whose value is "},{"inlineContent":[{"text":"copied","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"when it’s assigned to a variable or constant,"},{"text":" ","type":"text"},{"type":"text","text":"or when it’s passed to a function."}]},{"inlineContent":[{"text":"You’ve actually been using value types extensively throughout the previous chapters.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In fact, all of the basic types in Swift —"},{"type":"text","text":" "},{"type":"text","text":"integers, floating-point numbers, Booleans, strings, arrays and dictionaries —"},{"type":"text","text":" "},{"type":"text","text":"are value types, and are implemented as structures behind the scenes."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"All structures and enumerations are value types in Swift."},{"type":"text","text":" "},{"text":"This means that any structure and enumeration instances you create —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and any value types they have as properties —"},{"type":"text","text":" "},{"type":"text","text":"are always copied when they’re passed around in your code."}],"type":"paragraph"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Collections defined by the Swift standard library"},{"type":"text","text":" "},{"type":"text","text":"like arrays, dictionaries, and strings"},{"text":" ","type":"text"},{"type":"text","text":"use an optimization to reduce the performance cost of copying."},{"type":"text","text":" "},{"text":"Instead of making a copy immediately,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"these collections share the memory where the elements are stored"},{"text":" ","type":"text"},{"text":"between the original instance and any copies.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If one of the copies of the collection is modified,"},{"type":"text","text":" "},{"text":"the elements are copied just before the modification.","type":"text"},{"text":" ","type":"text"},{"text":"The behavior you see in your code","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is always as if a copy took place immediately."}]}],"type":"aside","name":"Note"},{"type":"paragraph","inlineContent":[{"text":"Consider this example, which uses the ","type":"text"},{"type":"codeVoice","code":"Resolution"},{"text":" structure from the previous example:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let hd = Resolution(width: 1920, height: 1080)","var cinema = hd"]},{"inlineContent":[{"type":"text","text":"This example declares a constant called "},{"type":"codeVoice","code":"hd"},{"text":" ","type":"text"},{"text":"and sets it to a ","type":"text"},{"type":"codeVoice","code":"Resolution"},{"text":" instance initialized with","type":"text"},{"text":" ","type":"text"},{"text":"the width and height of full HD video","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(1920 pixels wide by 1080 pixels high)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It then declares a variable called "},{"type":"codeVoice","code":"cinema"},{"type":"text","text":" "},{"type":"text","text":"and sets it to the current value of "},{"type":"codeVoice","code":"hd"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Because "},{"type":"codeVoice","code":"Resolution"},{"text":" is a structure,","type":"text"},{"type":"text","text":" "},{"text":"a ","type":"text"},{"inlineContent":[{"type":"text","text":"copy"}],"type":"emphasis"},{"type":"text","text":" of the existing instance is made,"},{"text":" ","type":"text"},{"type":"text","text":"and this new copy is assigned to "},{"type":"codeVoice","code":"cinema"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Even though ","type":"text"},{"code":"hd","type":"codeVoice"},{"type":"text","text":" and "},{"code":"cinema","type":"codeVoice"},{"text":" now have the same width and height,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"they’re two completely different instances behind the scenes."}]},{"type":"paragraph","inlineContent":[{"text":"Next, the ","type":"text"},{"code":"width","type":"codeVoice"},{"type":"text","text":" property of "},{"type":"codeVoice","code":"cinema"},{"text":" is amended to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the width of the slightly wider 2K standard used for digital cinema projection"},{"text":" ","type":"text"},{"text":"(2048 pixels wide and 1080 pixels high):","type":"text"}]},{"code":["cinema.width = 2048"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Checking the "},{"type":"codeVoice","code":"width"},{"type":"text","text":" property of "},{"type":"codeVoice","code":"cinema"},{"type":"text","text":" "},{"type":"text","text":"shows that it has indeed changed to be "},{"type":"codeVoice","code":"2048"},{"type":"text","text":":"}]},{"syntax":"swift","code":["print(\"cinema is now \\(cinema.width) pixels wide\")","\/\/ Prints \"cinema is now 2048 pixels wide\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"However, the "},{"type":"codeVoice","code":"width"},{"type":"text","text":" property of the original "},{"code":"hd","type":"codeVoice"},{"text":" instance","type":"text"},{"type":"text","text":" "},{"text":"still has the old value of ","type":"text"},{"type":"codeVoice","code":"1920"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["print(\"hd is still \\(hd.width) pixels wide\")","\/\/ Prints \"hd is still 1920 pixels wide\""]},{"type":"paragraph","inlineContent":[{"text":"When ","type":"text"},{"code":"cinema","type":"codeVoice"},{"text":" was given the current value of ","type":"text"},{"code":"hd","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"values","type":"text"}]},{"text":" stored in ","type":"text"},{"type":"codeVoice","code":"hd"},{"type":"text","text":" were copied into the new "},{"type":"codeVoice","code":"cinema"},{"text":" instance.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The end result was two completely separate instances"},{"text":" ","type":"text"},{"type":"text","text":"that contained the same numeric values."},{"type":"text","text":" "},{"text":"However, because they’re separate instances,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"setting the width of "},{"code":"cinema","type":"codeVoice"},{"type":"text","text":" to "},{"code":"2048","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"doesn’t affect the width stored in "},{"type":"codeVoice","code":"hd"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"as shown in the figure below:"}]},{"inlineContent":[{"type":"image","identifier":"sharedStateStruct"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The same behavior applies to enumerations:"}],"type":"paragraph"},{"syntax":"swift","code":["enum CompassPoint {","    case north, south, east, west","    mutating func turnNorth() {","        self = .north","    }","}","var currentDirection = CompassPoint.west","let rememberedDirection = currentDirection","currentDirection.turnNorth()","","print(\"The current direction is \\(currentDirection)\")","print(\"The remembered direction is \\(rememberedDirection)\")","\/\/ Prints \"The current direction is north\"","\/\/ Prints \"The remembered direction is west\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"When "},{"code":"rememberedDirection","type":"codeVoice"},{"text":" is assigned the value of ","type":"text"},{"type":"codeVoice","code":"currentDirection"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"it’s actually set to a copy of that value."},{"type":"text","text":" "},{"text":"Changing the value of ","type":"text"},{"type":"codeVoice","code":"currentDirection"},{"text":" thereafter doesn’t affect","type":"text"},{"type":"text","text":" "},{"text":"the copy of the original value that was stored in ","type":"text"},{"code":"rememberedDirection","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Classes-Are-Reference-Types","text":"Classes Are Reference Types","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Unlike value types, ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"reference types","type":"text"}]},{"type":"text","text":" are "},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" copied","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when they’re assigned to a variable or constant,"},{"text":" ","type":"text"},{"text":"or when they’re passed to a function.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Rather than a copy, a reference to the same existing instance is used."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example, using the "},{"code":"VideoMode","type":"codeVoice"},{"text":" class defined above:","type":"text"}]},{"type":"codeListing","code":["let tenEighty = VideoMode()","tenEighty.resolution = hd","tenEighty.interlaced = true","tenEighty.name = \"1080i\"","tenEighty.frameRate = 25.0"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example declares a new constant called "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" "},{"text":"and sets it to refer to a new instance of the ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"type":"text","text":" class."},{"text":" ","type":"text"},{"text":"The video mode is assigned a copy of the HD resolution of ","type":"text"},{"type":"codeVoice","code":"1920"},{"type":"text","text":" by "},{"code":"1080","type":"codeVoice"},{"type":"text","text":" from before."},{"type":"text","text":" "},{"text":"It’s set to be interlaced,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"its name is set to "},{"code":"\"1080i\"","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and its frame rate is set to "},{"code":"25.0","type":"codeVoice"},{"type":"text","text":" frames per second."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, "},{"type":"codeVoice","code":"tenEighty"},{"text":" is assigned to a new constant, called ","type":"text"},{"code":"alsoTenEighty","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and the frame rate of ","type":"text"},{"code":"alsoTenEighty","type":"codeVoice"},{"type":"text","text":" is modified:"}]},{"code":["let alsoTenEighty = tenEighty","alsoTenEighty.frameRate = 30.0"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because classes are reference types,"},{"type":"text","text":" "},{"code":"tenEighty","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":" actually both refer to the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"same"}]},{"type":"text","text":" "},{"code":"VideoMode","type":"codeVoice"},{"type":"text","text":" instance."},{"text":" ","type":"text"},{"text":"Effectively, they’re just two different names for the same single instance,","type":"text"},{"text":" ","type":"text"},{"text":"as shown in the figure below:","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"sharedStateClass","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Checking the "},{"code":"frameRate","type":"codeVoice"},{"text":" property of ","type":"text"},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" "},{"type":"text","text":"shows that it correctly reports the new frame rate of "},{"type":"codeVoice","code":"30.0"},{"type":"text","text":" "},{"type":"text","text":"from the underlying "},{"code":"VideoMode","type":"codeVoice"},{"text":" instance:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["print(\"The frameRate property of tenEighty is now \\(tenEighty.frameRate)\")","\/\/ Prints \"The frameRate property of tenEighty is now 30.0\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example also shows how reference types can be harder to reason about."},{"type":"text","text":" "},{"type":"text","text":"If "},{"type":"codeVoice","code":"tenEighty"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":" were far apart in your program’s code,"},{"type":"text","text":" "},{"type":"text","text":"it could be difficult to find all the ways that the video mode is changed."},{"type":"text","text":" "},{"type":"text","text":"Wherever you use "},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"you also have to think about the code that uses "},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and vice versa."},{"type":"text","text":" "},{"type":"text","text":"In contrast, value types are easier to reason about"},{"type":"text","text":" "},{"type":"text","text":"because all of the code that interacts with the same value"},{"text":" ","type":"text"},{"type":"text","text":"is close together in your source files."}]},{"type":"paragraph","inlineContent":[{"text":"Note that ","type":"text"},{"type":"codeVoice","code":"tenEighty"},{"type":"text","text":" and "},{"type":"codeVoice","code":"alsoTenEighty"},{"type":"text","text":" are declared as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"constants"}]},{"type":"text","text":","},{"type":"text","text":" "},{"text":"rather than variables.","type":"text"},{"type":"text","text":" "},{"text":"However, you can still change ","type":"text"},{"code":"tenEighty.frameRate","type":"codeVoice"},{"type":"text","text":" and "},{"code":"alsoTenEighty.frameRate","type":"codeVoice"},{"text":" because","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the values of the "},{"code":"tenEighty","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"alsoTenEighty"},{"text":" constants themselves don’t actually change.","type":"text"},{"text":" ","type":"text"},{"code":"tenEighty","type":"codeVoice"},{"type":"text","text":" and "},{"code":"alsoTenEighty","type":"codeVoice"},{"text":" themselves don’t “store” the ","type":"text"},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" instance —"},{"text":" ","type":"text"},{"text":"instead, they both ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"refer"}]},{"type":"text","text":" to a "},{"type":"codeVoice","code":"VideoMode"},{"type":"text","text":" instance behind the scenes."},{"type":"text","text":" "},{"type":"text","text":"It’s the "},{"type":"codeVoice","code":"frameRate"},{"type":"text","text":" property of the underlying "},{"code":"VideoMode","type":"codeVoice"},{"text":" that’s changed,","type":"text"},{"text":" ","type":"text"},{"text":"not the values of the constant references to that ","type":"text"},{"code":"VideoMode","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"heading","anchor":"Identity-Operators","level":3,"text":"Identity Operators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because classes are reference types,"},{"text":" ","type":"text"},{"type":"text","text":"it’s possible for multiple constants and variables to refer to"},{"text":" ","type":"text"},{"text":"the same single instance of a class behind the scenes.","type":"text"},{"type":"text","text":" "},{"text":"(The same isn’t true for structures and enumerations,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because they’re always copied when they’re assigned to a constant or variable,"},{"text":" ","type":"text"},{"type":"text","text":"or passed to a function.)"}]},{"inlineContent":[{"text":"It can sometimes be useful to find out whether two constants or variables refer to","type":"text"},{"type":"text","text":" "},{"text":"exactly the same instance of a class.","type":"text"},{"text":" ","type":"text"},{"text":"To enable this, Swift provides two identity operators:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Identical to ("},{"type":"codeVoice","code":"==="},{"text":")","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Not identical to (","type":"text"},{"type":"codeVoice","code":"!=="},{"type":"text","text":")"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Use these operators to check whether two constants or variables refer to the same single instance:"}],"type":"paragraph"},{"syntax":"swift","code":["if tenEighty === alsoTenEighty {","    print(\"tenEighty and alsoTenEighty refer to the same VideoMode instance.\")","}","\/\/ Prints \"tenEighty and alsoTenEighty refer to the same VideoMode instance.\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that "},{"type":"emphasis","inlineContent":[{"text":"identical to","type":"text"}]},{"text":" (represented by three equal signs, or ","type":"text"},{"code":"===","type":"codeVoice"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"doesn’t mean the same thing as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"equal to"}]},{"type":"text","text":" (represented by two equal signs, or "},{"code":"==","type":"codeVoice"},{"type":"text","text":")."},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"Identical to"}],"type":"emphasis"},{"type":"text","text":" means that"},{"type":"text","text":" "},{"text":"two constants or variables of class type refer to exactly the same class instance.","type":"text"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Equal to"}]},{"type":"text","text":" means that"},{"text":" ","type":"text"},{"text":"two instances are considered equal or equivalent in value,","type":"text"},{"type":"text","text":" "},{"text":"for some appropriate meaning of ","type":"text"},{"inlineContent":[{"type":"text","text":"equal"}],"type":"emphasis"},{"type":"text","text":", as defined by the type’s designer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you define your own custom structures and classes,"},{"text":" ","type":"text"},{"type":"text","text":"it’s your responsibility to decide what qualifies as two instances being equal."},{"text":" ","type":"text"},{"type":"text","text":"The process of defining your own implementations of the "},{"type":"codeVoice","code":"=="},{"text":" and ","type":"text"},{"type":"codeVoice","code":"!="},{"text":" operators","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Equivalence-Operators"},{"type":"text","text":"."}]},{"text":"Pointers","level":3,"anchor":"Pointers","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you have experience with C, C++, or Objective-C,"},{"text":" ","type":"text"},{"type":"text","text":"you may know that these languages use "},{"inlineContent":[{"type":"text","text":"pointers"}],"type":"emphasis"},{"type":"text","text":" to refer to addresses in memory."},{"type":"text","text":" "},{"text":"A Swift constant or variable that refers to an instance of some reference type","type":"text"},{"type":"text","text":" "},{"text":"is similar to a pointer in C,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but isn’t a direct pointer to an address in memory,"},{"text":" ","type":"text"},{"type":"text","text":"and doesn’t require you to write an asterisk ("},{"code":"*","type":"codeVoice"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"to indicate that you are creating a reference.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Instead, these references are defined like any other constant or variable in Swift."},{"type":"text","text":" "},{"type":"text","text":"The Swift standard library provides pointer and buffer types"},{"type":"text","text":" "},{"type":"text","text":"that you can use if you need to interact with pointers directly —"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management","isActive":true,"type":"reference"},{"type":"text","text":"."}]}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures"},"sections":[],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","abstract":[{"text":"Access the elements of a collection.","type":"text"}],"role":"article","url":"\/documentation\/the-swift-programming-language\/subscripts","title":"Subscripts","type":"topic","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting":{"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting","type":"topic","abstract":[{"text":"Determine a value’s runtime type and give it more specific type information.","type":"text"}],"url":"\/documentation\/the-swift-programming-language\/typecasting","kind":"article","title":"Type Casting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties":{"title":"Properties","kind":"article","type":"topic","role":"article","abstract":[{"text":"Access stored and computed values that are part of an instance or type.","type":"text"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties","url":"\/documentation\/the-swift-programming-language\/properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Equivalence-Operators":{"type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Equivalence-Operators","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Equivalence-Operators","title":"Equivalence Operators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting","kind":"article","abstract":[{"text":"Model the lifetime of objects and their relationships.","type":"text"}],"title":"Automatic Reference Counting"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"title":"Concurrency","kind":"article","type":"topic","role":"article","abstract":[{"text":"Perform asynchronous operations.","type":"text"}],"url":"\/documentation\/the-swift-programming-language\/concurrency","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"abstract":[{"text":"Set the initial values for a type’s stored properties and perform one-time setup.","type":"text"}],"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","role":"article","title":"Initialization","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","kind":"article","title":"Protocols","abstract":[{"text":"Define requirements that conforming types must implement.","type":"text"}],"url":"\/documentation\/the-swift-programming-language\/protocols","type":"topic","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Extensions":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","kind":"article","type":"topic","abstract":[{"text":"Add functionality to an existing type.","type":"text"}],"role":"article","url":"\/documentation\/the-swift-programming-language\/extensions","title":"Extensions"},"sharedStateClass":{"type":"image","identifier":"sharedStateClass","variants":[{"traits":["2x","light"],"url":"\/images\/sharedStateClass@2x.png"},{"traits":["2x","dark"],"url":"\/images\/sharedStateClass~dark@2x.png"}],"alt":null},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Methods":{"abstract":[{"text":"Define and call functions that are part of an instance or type.","type":"text"}],"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Methods","role":"article","title":"Methods","type":"topic","url":"\/documentation\/the-swift-programming-language\/methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","title":"The Swift Programming Language (5.9)","type":"topic","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Deinitialization":{"abstract":[{"text":"Release resources that require custom cleanup.","type":"text"}],"kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Deinitialization","role":"article","title":"Deinitialization","type":"topic","url":"\/documentation\/the-swift-programming-language\/deinitialization"},"sharedStateStruct":{"alt":null,"type":"image","identifier":"sharedStateStruct","variants":[{"traits":["2x","light"],"url":"\/images\/sharedStateStruct@2x.png"},{"traits":["2x","dark"],"url":"\/images\/sharedStateStruct~dark@2x.png"}]},"https://developer.apple.com/documentation/swift/swift_standard_library/manual_memory_management":{"title":"Manual Memory Management","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management","type":"link","titleInlineContent":[{"type":"text","text":"Manual Memory Management"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/swift_standard_library\/manual_memory_management"},"https://developer.apple.com/documentation/swift/choosing_between_structures_and_classes":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes","type":"link","title":"Choosing Between Structures and Classes","titleInlineContent":[{"text":"Choosing Between Structures and Classes","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/choosing_between_structures_and_classes"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"title":"Inheritance","url":"\/documentation\/the-swift-programming-language\/inheritance","abstract":[{"text":"Subclass to add or override functionality.","type":"text"}],"role":"article","kind":"article","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance"}}}