{"abstract":[{"type":"text","text":"Write code that works for multiple types and specify requirements for those types."}],"sections":[],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","interfaceLanguage":"swift"},"kind":"article","metadata":{"title":"Generics"},"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Generic code","type":"text"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types"},{"type":"text","text":" "},{"text":"that can work with any type, subject to requirements that you define.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can write code that avoids duplication"},{"type":"text","text":" "},{"type":"text","text":"and expresses its intent in a clear, abstracted manner."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Generics are one of the most powerful features of Swift,"},{"text":" ","type":"text"},{"type":"text","text":"and much of the Swift standard library is built with generic code."},{"text":" ","type":"text"},{"type":"text","text":"In fact, you’ve been using generics throughout the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Language Guide"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"even if you didn’t realize it."},{"type":"text","text":" "},{"text":"For example, Swift’s ","type":"text"},{"type":"codeVoice","code":"Array"},{"text":" and ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" types"},{"type":"text","text":" "},{"text":"are both generic collections.","type":"text"},{"text":" ","type":"text"},{"text":"You can create an array that holds ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values,"},{"type":"text","text":" "},{"text":"or an array that holds ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" values,","type":"text"},{"text":" ","type":"text"},{"text":"or indeed an array for any other type that can be created in Swift.","type":"text"},{"type":"text","text":" "},{"text":"Similarly, you can create a dictionary to store values of any specified type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and there are no limitations on what that type can be."}]},{"anchor":"The-Problem-That-Generics-Solve","level":2,"type":"heading","text":"The Problem That Generics Solve"},{"type":"paragraph","inlineContent":[{"text":"Here’s a standard, nongeneric function called ","type":"text"},{"code":"swapTwoInts(_:_:)","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which swaps two "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values:"}]},{"type":"codeListing","code":["func swapTwoInts(_ a: inout Int, _ b: inout Int) {","    let temporaryA = a","    a = b","    b = temporaryA","}"],"syntax":"swift"},{"inlineContent":[{"text":"This function makes use of in-out parameters to swap the values of ","type":"text"},{"code":"a","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"b"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"as described in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#In-Out-Parameters","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"swapTwoInts(_:_:)"},{"text":" function swaps the original value of ","type":"text"},{"code":"b","type":"codeVoice"},{"type":"text","text":" into "},{"type":"codeVoice","code":"a"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"and the original value of ","type":"text"},{"type":"codeVoice","code":"a"},{"text":" into ","type":"text"},{"code":"b","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You can call this function to swap the values in two "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" variables:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var someInt = 3","var anotherInt = 107","swapTwoInts(&someInt, &anotherInt)","print(\"someInt is now \\(someInt), and anotherInt is now \\(anotherInt)\")","\/\/ Prints \"someInt is now 107, and anotherInt is now 3\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"swapTwoInts(_:_:)"},{"type":"text","text":" function is useful, but it can only be used with "},{"code":"Int","type":"codeVoice"},{"text":" values.","type":"text"},{"type":"text","text":" "},{"text":"If you want to swap two ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" values,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or two "},{"type":"codeVoice","code":"Double"},{"text":" values,","type":"text"},{"text":" ","type":"text"},{"text":"you have to write more functions,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as the "},{"type":"codeVoice","code":"swapTwoStrings(_:_:)"},{"text":" and ","type":"text"},{"code":"swapTwoDoubles(_:_:)","type":"codeVoice"},{"type":"text","text":" functions shown below:"}]},{"code":["func swapTwoStrings(_ a: inout String, _ b: inout String) {","    let temporaryA = a","    a = b","    b = temporaryA","}","","func swapTwoDoubles(_ a: inout Double, _ b: inout Double) {","    let temporaryA = a","    a = b","    b = temporaryA","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"You may have noticed that the bodies of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"swapTwoInts(_:_:)","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"swapTwoStrings(_:_:)"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"swapTwoDoubles(_:_:)"},{"type":"text","text":" functions are identical."},{"type":"text","text":" "},{"type":"text","text":"The only difference is the type of the values that they accept"},{"text":" ","type":"text"},{"type":"text","text":"("},{"type":"codeVoice","code":"Int"},{"text":", ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":", and "},{"code":"Double","type":"codeVoice"},{"type":"text","text":")."}],"type":"paragraph"},{"inlineContent":[{"text":"It’s more useful, and considerably more flexible,","type":"text"},{"text":" ","type":"text"},{"text":"to write a single function that swaps two values of ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" type."},{"type":"text","text":" "},{"text":"Generic code enables you to write such a function.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"(A generic version of these functions is defined below.)"}],"type":"paragraph"},{"style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"In all three functions,"},{"text":" ","type":"text"},{"type":"text","text":"the types of "},{"type":"codeVoice","code":"a"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"b"},{"text":" must be the same.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If "},{"type":"codeVoice","code":"a"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"b"},{"text":" aren’t of the same type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it isn’t possible to swap their values."},{"text":" ","type":"text"},{"type":"text","text":"Swift is a type-safe language,"},{"text":" ","type":"text"},{"text":"and doesn’t allow (for example) a variable of type ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" "},{"text":"and a variable of type ","type":"text"},{"type":"codeVoice","code":"Double"},{"text":" ","type":"text"},{"text":"to swap values with each other.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Attempting to do so results in a compile-time error."}],"type":"paragraph"}],"name":"Note"},{"type":"heading","anchor":"Generic-Functions","level":2,"text":"Generic Functions"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Generic functions"}],"type":"emphasis"},{"type":"text","text":" can work with any type."},{"type":"text","text":" "},{"text":"Here’s a generic version of the ","type":"text"},{"type":"codeVoice","code":"swapTwoInts(_:_:)"},{"type":"text","text":" function from above,"},{"type":"text","text":" "},{"type":"text","text":"called "},{"type":"codeVoice","code":"swapTwoValues(_:_:)"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func swapTwoValues<T>(_ a: inout T, _ b: inout T) {","    let temporaryA = a","    a = b","    b = temporaryA","}"]},{"inlineContent":[{"text":"The body of the ","type":"text"},{"code":"swapTwoValues(_:_:)","type":"codeVoice"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"type":"text","text":"is identical to the body of the "},{"code":"swapTwoInts(_:_:)","type":"codeVoice"},{"type":"text","text":" function."},{"text":" ","type":"text"},{"type":"text","text":"However, the first line of "},{"code":"swapTwoValues(_:_:)","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"is slightly different from "},{"code":"swapTwoInts(_:_:)","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Here’s how the first lines compare:","type":"text"}],"type":"paragraph"},{"code":["func swapTwoInts(_ a: inout Int, _ b: inout Int)","func swapTwoValues<T>(_ a: inout T, _ b: inout T)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The generic version of the function"},{"type":"text","text":" "},{"text":"uses a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"placeholder"}]},{"type":"text","text":" type name (called "},{"type":"codeVoice","code":"T"},{"text":", in this case)","type":"text"},{"text":" ","type":"text"},{"text":"instead of an ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"actual","type":"text"}]},{"type":"text","text":" type name (such as "},{"type":"codeVoice","code":"Int"},{"text":", ","type":"text"},{"code":"String","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"Double","type":"codeVoice"},{"type":"text","text":")."},{"type":"text","text":" "},{"text":"The placeholder type name doesn’t say anything about what ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":" must be,"},{"text":" ","type":"text"},{"text":"but it ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"does","type":"text"}]},{"text":" say that both ","type":"text"},{"code":"a","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"b","type":"codeVoice"},{"text":" must be of the same type ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"whatever ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":" represents."},{"type":"text","text":" "},{"text":"The actual type to use in place of ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":" "},{"text":"is determined each time the ","type":"text"},{"code":"swapTwoValues(_:_:)","type":"codeVoice"},{"text":" function is called.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The other difference between a generic function and a nongeneric function"},{"text":" ","type":"text"},{"type":"text","text":"is that the generic function’s name ("},{"code":"swapTwoValues(_:_:)","type":"codeVoice"},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"is followed by the placeholder type name (","type":"text"},{"code":"T","type":"codeVoice"},{"type":"text","text":") inside angle brackets ("},{"code":"<T>","type":"codeVoice"},{"type":"text","text":")."},{"text":" ","type":"text"},{"type":"text","text":"The brackets tell Swift that "},{"type":"codeVoice","code":"T"},{"text":" is a placeholder type name","type":"text"},{"type":"text","text":" "},{"text":"within the ","type":"text"},{"type":"codeVoice","code":"swapTwoValues(_:_:)"},{"type":"text","text":" function definition."},{"text":" ","type":"text"},{"text":"Because ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":" is a placeholder, Swift doesn’t look for an actual type called "},{"code":"T","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"The "},{"code":"swapTwoValues(_:_:)","type":"codeVoice"},{"text":" function can now be called in the same way as ","type":"text"},{"type":"codeVoice","code":"swapTwoInts"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"except that it can be passed two values of ","type":"text"},{"inlineContent":[{"text":"any","type":"text"}],"type":"emphasis"},{"text":" type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as long as both of those values are of the same type as each other."},{"text":" ","type":"text"},{"text":"Each time ","type":"text"},{"type":"codeVoice","code":"swapTwoValues(_:_:)"},{"type":"text","text":" is called,"},{"text":" ","type":"text"},{"type":"text","text":"the type to use for "},{"code":"T","type":"codeVoice"},{"type":"text","text":" is inferred from the types of values passed to the function."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In the two examples below, ","type":"text"},{"code":"T","type":"codeVoice"},{"text":" is inferred to be ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" and "},{"type":"codeVoice","code":"String"},{"type":"text","text":" respectively:"}]},{"type":"codeListing","code":["var someInt = 3","var anotherInt = 107","swapTwoValues(&someInt, &anotherInt)","\/\/ someInt is now 107, and anotherInt is now 3","","var someString = \"hello\"","var anotherString = \"world\"","swapTwoValues(&someString, &anotherString)","\/\/ someString is now \"world\", and anotherString is now \"hello\""],"syntax":"swift"},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"swapTwoValues(_:_:)"},{"type":"text","text":" function defined above is inspired by"},{"type":"text","text":" "},{"text":"a generic function called ","type":"text"},{"type":"codeVoice","code":"swap"},{"text":", which is part of the Swift standard library,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and is automatically made available for you to use in your apps."},{"text":" ","type":"text"},{"text":"If you need the behavior of the ","type":"text"},{"type":"codeVoice","code":"swapTwoValues(_:_:)"},{"type":"text","text":" function in your own code,"},{"type":"text","text":" "},{"type":"text","text":"you can use Swift’s existing "},{"type":"codeVoice","code":"swap(_:_:)"},{"text":" function rather than providing your own implementation.","type":"text"}]}],"style":"note"},{"level":2,"type":"heading","text":"Type Parameters","anchor":"Type-Parameters"},{"inlineContent":[{"type":"text","text":"In the "},{"type":"codeVoice","code":"swapTwoValues(_:_:)"},{"text":" example above,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the placeholder type "},{"code":"T","type":"codeVoice"},{"type":"text","text":" is an example of a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type parameter"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Type parameters specify and name a placeholder type,"},{"type":"text","text":" "},{"text":"and are written immediately after the function’s name,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"between a pair of matching angle brackets (such as "},{"code":"<T>","type":"codeVoice"},{"type":"text","text":")."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Once you specify a type parameter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can use it to define the type of a function’s parameters"},{"type":"text","text":" "},{"type":"text","text":"(such as the "},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"code":"b","type":"codeVoice"},{"text":" parameters of the ","type":"text"},{"type":"codeVoice","code":"swapTwoValues(_:_:)"},{"text":" function),","type":"text"},{"type":"text","text":" "},{"text":"or as the function’s return type,","type":"text"},{"type":"text","text":" "},{"text":"or as a type annotation within the body of the function.","type":"text"},{"text":" ","type":"text"},{"text":"In each case, the type parameter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is replaced with an "},{"type":"emphasis","inlineContent":[{"text":"actual","type":"text"}]},{"text":" type whenever the function is called.","type":"text"},{"type":"text","text":" "},{"text":"(In the ","type":"text"},{"code":"swapTwoValues(_:_:)","type":"codeVoice"},{"type":"text","text":" example above,"},{"type":"text","text":" "},{"code":"T","type":"codeVoice"},{"type":"text","text":" was replaced with "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" the first time the function was called,"},{"text":" ","type":"text"},{"text":"and was replaced with ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" the second time it was called.)"}]},{"inlineContent":[{"type":"text","text":"You can provide more than one type parameter"},{"text":" ","type":"text"},{"type":"text","text":"by writing multiple type parameter names within the angle brackets,"},{"type":"text","text":" "},{"type":"text","text":"separated by commas."}],"type":"paragraph"},{"anchor":"Naming-Type-Parameters","level":2,"type":"heading","text":"Naming Type Parameters"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In most cases, type parameters have descriptive names,"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":"Key"},{"text":" and ","type":"text"},{"code":"Value","type":"codeVoice"},{"text":" in ","type":"text"},{"code":"Dictionary<Key, Value>","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" in "},{"type":"codeVoice","code":"Array<Element>"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which tells the reader about the relationship between the type parameter","type":"text"},{"text":" ","type":"text"},{"text":"and the generic type or function it’s used in.","type":"text"},{"type":"text","text":" "},{"text":"However, when there isn’t a meaningful relationship between them,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it’s traditional to name them using single letters such as "},{"type":"codeVoice","code":"T"},{"type":"text","text":", "},{"type":"codeVoice","code":"U"},{"type":"text","text":", and "},{"type":"codeVoice","code":"V"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"such as ","type":"text"},{"code":"T","type":"codeVoice"},{"text":" in the ","type":"text"},{"type":"codeVoice","code":"swapTwoValues(_:_:)"},{"type":"text","text":" function above."}]},{"type":"aside","content":[{"inlineContent":[{"text":"Always give type parameters upper camel case names","type":"text"},{"text":" ","type":"text"},{"text":"(such as ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":" and "},{"type":"codeVoice","code":"MyTypeParameter"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"to indicate that they’re a placeholder for a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":", not a value."}],"type":"paragraph"}],"name":"Note","style":"note"},{"text":"Generic Types","anchor":"Generic-Types","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"In addition to generic functions,"},{"text":" ","type":"text"},{"type":"text","text":"Swift enables you to define your own "},{"inlineContent":[{"type":"text","text":"generic types"}],"type":"emphasis"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These are custom classes, structures, and enumerations"},{"text":" ","type":"text"},{"type":"text","text":"that can work with "},{"inlineContent":[{"text":"any","type":"text"}],"type":"emphasis"},{"type":"text","text":" type, in a similar way to "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Dictionary"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This section shows you how to write a generic collection type called "},{"type":"codeVoice","code":"Stack"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"A stack is an ordered set of values, similar to an array,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but with a more restricted set of operations than Swift’s "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" type."},{"text":" ","type":"text"},{"type":"text","text":"An array allows new items to be inserted and removed at any location in the array."},{"type":"text","text":" "},{"type":"text","text":"A stack, however, allows new items to be appended only to the end of the collection"},{"text":" ","type":"text"},{"type":"text","text":"(known as "},{"inlineContent":[{"type":"text","text":"pushing"}],"type":"emphasis"},{"text":" a new value on to the stack).","type":"text"},{"text":" ","type":"text"},{"text":"Similarly, a stack allows items to be removed only from the end of the collection","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(known as "},{"inlineContent":[{"type":"text","text":"popping"}],"type":"emphasis"},{"type":"text","text":" a value off the stack)."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"The concept of a stack is used by the "},{"type":"codeVoice","code":"UINavigationController"},{"text":" class","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to model the view controllers in its navigation hierarchy."},{"text":" ","type":"text"},{"type":"text","text":"You call the "},{"code":"UINavigationController","type":"codeVoice"},{"type":"text","text":" class"},{"text":" ","type":"text"},{"type":"codeVoice","code":"pushViewController(_:animated:)"},{"text":" method to add (or push)","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a view controller on to the navigation stack,"},{"type":"text","text":" "},{"text":"and its ","type":"text"},{"type":"codeVoice","code":"popViewControllerAnimated(_:)"},{"type":"text","text":" method to remove (or pop)"},{"text":" ","type":"text"},{"text":"a view controller from the navigation stack.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A stack is a useful collection model whenever you need a strict"},{"type":"text","text":" "},{"type":"text","text":"“last in, first out” approach to managing a collection."}],"type":"paragraph"}],"name":"Note","style":"note","type":"aside"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The illustration below shows the push and pop behavior for a stack:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"stackPushPop"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"There are currently three values on the stack."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A fourth value is pushed onto the top of the stack."}]}]},{"content":[{"inlineContent":[{"text":"The stack now holds four values, with the most recent one at the top.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The top item in the stack is popped.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"After popping a value, the stack once again holds three values."}]}]}]},{"inlineContent":[{"text":"Here’s how to write a nongeneric version of a stack,","type":"text"},{"type":"text","text":" "},{"text":"in this case for a stack of ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values:"}],"type":"paragraph"},{"code":["struct IntStack {","    var items: [Int] = []","    mutating func push(_ item: Int) {","        items.append(item)","    }","    mutating func pop() -> Int {","        return items.removeLast()","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This structure uses an ","type":"text"},{"type":"codeVoice","code":"Array"},{"type":"text","text":" property called "},{"type":"codeVoice","code":"items"},{"type":"text","text":" to store the values in the stack."},{"text":" ","type":"text"},{"type":"codeVoice","code":"Stack"},{"type":"text","text":" provides two methods, "},{"type":"codeVoice","code":"push"},{"text":" and ","type":"text"},{"code":"pop","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"to push and pop values on and off the stack.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"These methods are marked as "},{"code":"mutating","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because they need to modify (or "},{"inlineContent":[{"type":"text","text":"mutate"}],"type":"emphasis"},{"text":") the structure’s ","type":"text"},{"type":"codeVoice","code":"items"},{"text":" array.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"IntStack","type":"codeVoice"},{"text":" type shown above can only be used with ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" values, however."},{"text":" ","type":"text"},{"text":"It would be much more useful to define a ","type":"text"},{"inlineContent":[{"text":"generic","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"code":"Stack","type":"codeVoice"},{"type":"text","text":" structure,"},{"type":"text","text":" "},{"type":"text","text":"that can manage a stack of "},{"inlineContent":[{"type":"text","text":"any"}],"type":"emphasis"},{"text":" type of value.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s a generic version of the same code:"}]},{"type":"codeListing","syntax":"swift","code":["struct Stack<Element> {","    var items: [Element] = []","    mutating func push(_ item: Element) {","        items.append(item)","    }","    mutating func pop() -> Element {","        return items.removeLast()","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Note how the generic version of ","type":"text"},{"type":"codeVoice","code":"Stack"},{"type":"text","text":" "},{"text":"is essentially the same as the nongeneric version,","type":"text"},{"type":"text","text":" "},{"text":"but with a type parameter called ","type":"text"},{"code":"Element","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"instead of an actual type of "},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"This type parameter is written within a pair of angle brackets ("},{"type":"codeVoice","code":"<Element>"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"immediately after the structure’s name."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" defines a placeholder name for"},{"type":"text","text":" "},{"text":"a type to be provided later.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This future type can be referred to as "},{"type":"codeVoice","code":"Element"},{"text":" ","type":"text"},{"text":"anywhere within the structure’s definition.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In this case, "},{"code":"Element","type":"codeVoice"},{"text":" is used as a placeholder in three places:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"text":"To create a property called ","type":"text"},{"code":"items","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which is initialized with an empty array of values of type ","type":"text"},{"code":"Element","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"To specify that the ","type":"text"},{"type":"codeVoice","code":"push(_:)"},{"type":"text","text":" method has a single parameter called "},{"code":"item","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which must be of type "},{"code":"Element","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"To specify that the value returned by the ","type":"text"},{"code":"pop()","type":"codeVoice"},{"text":" method","type":"text"},{"type":"text","text":" "},{"type":"text","text":"will be a value of type "},{"code":"Element","type":"codeVoice"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Because it’s a generic type,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Stack"},{"type":"text","text":" can be used to create a stack of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" valid type in Swift,"},{"text":" ","type":"text"},{"type":"text","text":"in a similar manner to "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" and "},{"code":"Dictionary","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You create a new "},{"type":"codeVoice","code":"Stack"},{"type":"text","text":" instance by writing"},{"type":"text","text":" "},{"text":"the type to be stored in the stack within angle brackets.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, to create a new stack of strings,"},{"text":" ","type":"text"},{"type":"text","text":"you write "},{"type":"codeVoice","code":"Stack<String>()"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["var stackOfStrings = Stack<String>()","stackOfStrings.push(\"uno\")","stackOfStrings.push(\"dos\")","stackOfStrings.push(\"tres\")","stackOfStrings.push(\"cuatro\")","\/\/ the stack now contains 4 strings"],"type":"codeListing"},{"inlineContent":[{"text":"Here’s how ","type":"text"},{"type":"codeVoice","code":"stackOfStrings"},{"text":" looks after pushing these four values on to the stack:","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"stackPushedFourStrings"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Popping a value from the stack removes and returns the top value, "},{"type":"codeVoice","code":"\"cuatro\""},{"text":":","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let fromTheTop = stackOfStrings.pop()","\/\/ fromTheTop is equal to \"cuatro\", and the stack now contains 3 strings"]},{"type":"paragraph","inlineContent":[{"text":"Here’s how the stack looks after popping its top value:","type":"text"}]},{"inlineContent":[{"identifier":"stackPoppedOneString","type":"image"}],"type":"paragraph"},{"level":2,"type":"heading","anchor":"Extending-a-Generic-Type","text":"Extending a Generic Type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you extend a generic type,"},{"text":" ","type":"text"},{"text":"you don’t provide a type parameter list as part of the extension’s definition.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Instead, the type parameter list from the "},{"inlineContent":[{"text":"original","type":"text"}],"type":"emphasis"},{"type":"text","text":" type definition"},{"type":"text","text":" "},{"type":"text","text":"is available within the body of the extension,"},{"text":" ","type":"text"},{"type":"text","text":"and the original type parameter names are used to refer to"},{"text":" ","type":"text"},{"type":"text","text":"the type parameters from the original definition."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example extends the generic "},{"code":"Stack","type":"codeVoice"},{"text":" type to add","type":"text"},{"text":" ","type":"text"},{"text":"a read-only computed property called ","type":"text"},{"code":"topItem","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which returns the top item on the stack without popping it from the stack:"}]},{"code":["extension Stack {","    var topItem: Element? {","        return items.isEmpty ? nil : items[items.count - 1]","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"topItem","type":"codeVoice"},{"type":"text","text":" property returns an optional value of type "},{"code":"Element","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If the stack is empty, "},{"code":"topItem","type":"codeVoice"},{"type":"text","text":" returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":";"},{"type":"text","text":" "},{"text":"if the stack isn’t empty, ","type":"text"},{"type":"codeVoice","code":"topItem"},{"type":"text","text":" returns the final item in the "},{"type":"codeVoice","code":"items"},{"type":"text","text":" array."}]},{"type":"paragraph","inlineContent":[{"text":"Note that this extension doesn’t define a type parameter list.","type":"text"},{"text":" ","type":"text"},{"text":"Instead, the ","type":"text"},{"code":"Stack","type":"codeVoice"},{"type":"text","text":" type’s existing type parameter name, "},{"code":"Element","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"is used within the extension to indicate the optional type of","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"topItem","type":"codeVoice"},{"text":" computed property.","type":"text"}]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"topItem"},{"type":"text","text":" computed property can now be used with any "},{"code":"Stack","type":"codeVoice"},{"type":"text","text":" instance"},{"text":" ","type":"text"},{"text":"to access and query its top item without removing it.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["if let topItem = stackOfStrings.topItem {","    print(\"The top item on the stack is \\(topItem).\")","}","\/\/ Prints \"The top item on the stack is tres.\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions of a generic type can also include requirements"},{"type":"text","text":" "},{"type":"text","text":"that instances of the extended type must satisfy"},{"type":"text","text":" "},{"type":"text","text":"in order to gain the new functionality,"},{"text":" ","type":"text"},{"text":"as discussed in ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","isActive":true,"type":"reference"},{"type":"text","text":" below."}]},{"type":"heading","text":"Type Constraints","level":2,"anchor":"Type-Constraints"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"swapTwoValues(_:_:)"},{"type":"text","text":" function and the "},{"type":"codeVoice","code":"Stack"},{"type":"text","text":" type can work with any type."},{"text":" ","type":"text"},{"text":"However, it’s sometimes useful to enforce","type":"text"},{"type":"text","text":" "},{"type":"text","text":"certain "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type constraints"}]},{"type":"text","text":" on the types that can be used with"},{"text":" ","type":"text"},{"text":"generic functions and generic types.","type":"text"},{"text":" ","type":"text"},{"text":"Type constraints specify that a type parameter must","type":"text"},{"type":"text","text":" "},{"type":"text","text":"inherit from a specific class,"},{"type":"text","text":" "},{"text":"or conform to a particular protocol or protocol composition.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example,"},{"type":"text","text":" "},{"text":"Swift’s ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" type places a limitation on"},{"type":"text","text":" "},{"type":"text","text":"the types that can be used as keys for a dictionary."},{"text":" ","type":"text"},{"type":"text","text":"As described in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Dictionaries","isActive":true},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"the type of a dictionary’s keys must be ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"hashable","type":"text"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"That is, it must provide a way to make itself uniquely representable."},{"text":" ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" needs its keys to be hashable so that it can"},{"type":"text","text":" "},{"type":"text","text":"check whether it already contains a value for a particular key."},{"type":"text","text":" "},{"type":"text","text":"Without this requirement, "},{"code":"Dictionary","type":"codeVoice"},{"text":" couldn’t tell","type":"text"},{"text":" ","type":"text"},{"text":"whether it should insert or replace a value for a particular key,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"nor would it be able to find a value for a given key that’s already in the dictionary."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This requirement is enforced by a type constraint on the key type for "},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which specifies that the key type must conform to the ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":" protocol,","type":"text"},{"type":"text","text":" "},{"text":"a special protocol defined in the Swift standard library.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"All of Swift’s basic types (such as "},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", "},{"code":"Double","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Bool"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are hashable by default."},{"text":" ","type":"text"},{"type":"text","text":"For information about"},{"type":"text","text":" "},{"text":"making your own custom types conform to the ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/hashable#2849490","type":"reference"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"You can define your own type constraints when creating custom generic types,"},{"text":" ","type":"text"},{"type":"text","text":"and these constraints provide much of the power of generic programming."},{"text":" ","type":"text"},{"text":"Abstract concepts like ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":" "},{"text":"characterize types in terms of their conceptual characteristics,","type":"text"},{"type":"text","text":" "},{"text":"rather than their concrete type.","type":"text"}],"type":"paragraph"},{"level":3,"type":"heading","text":"Type Constraint Syntax","anchor":"Type-Constraint-Syntax"},{"inlineContent":[{"type":"text","text":"You write type constraints by placing a single class or protocol constraint"},{"text":" ","type":"text"},{"type":"text","text":"after a type parameter’s name, separated by a colon,"},{"text":" ","type":"text"},{"text":"as part of the type parameter list.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The basic syntax for type constraints on a generic function is shown below"},{"text":" ","type":"text"},{"type":"text","text":"(although the syntax is the same for generic types):"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func someFunction<T: SomeClass, U: SomeProtocol>(someT: T, someU: U) {","    \/\/ function body goes here","}"]},{"inlineContent":[{"text":"The hypothetical function above has two type parameters.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The first type parameter, "},{"type":"codeVoice","code":"T"},{"text":", has a type constraint","type":"text"},{"type":"text","text":" "},{"text":"that requires ","type":"text"},{"type":"codeVoice","code":"T"},{"text":" to be a subclass of ","type":"text"},{"type":"codeVoice","code":"SomeClass"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The second type parameter, "},{"type":"codeVoice","code":"U"},{"type":"text","text":", has a type constraint"},{"text":" ","type":"text"},{"type":"text","text":"that requires "},{"code":"U","type":"codeVoice"},{"type":"text","text":" to conform to the protocol "},{"type":"codeVoice","code":"SomeProtocol"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Type-Constraints-in-Action","level":3,"text":"Type Constraints in Action","type":"heading"},{"inlineContent":[{"text":"Here’s a nongeneric function called ","type":"text"},{"code":"findIndex(ofString:in:)","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is given a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" value to find"},{"type":"text","text":" "},{"type":"text","text":"and an array of "},{"code":"String","type":"codeVoice"},{"type":"text","text":" values within which to find it."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"findIndex(ofString:in:)"},{"type":"text","text":" function returns an optional "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value,"},{"text":" ","type":"text"},{"text":"which will be the index of the first matching string in the array if it’s found,","type":"text"},{"type":"text","text":" "},{"text":"or ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if the string can’t be found:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func findIndex(ofString valueToFind: String, in array: [String]) -> Int? {","    for (index, value) in array.enumerated() {","        if value == valueToFind {","            return index","        }","    }","    return nil","}"]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"findIndex(ofString:in:)"},{"type":"text","text":" function can be used to find a string value in an array of strings:"}],"type":"paragraph"},{"code":["let strings = [\"cat\", \"dog\", \"llama\", \"parakeet\", \"terrapin\"]","if let foundIndex = findIndex(ofString: \"llama\", in: strings) {","    print(\"The index of llama is \\(foundIndex)\")","}","\/\/ Prints \"The index of llama is 2\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The principle of finding the index of a value in an array isn’t useful only for strings, however."},{"type":"text","text":" "},{"type":"text","text":"You can write the same functionality as a generic function"},{"type":"text","text":" "},{"type":"text","text":"by replacing any mention of strings with values of some type "},{"type":"codeVoice","code":"T"},{"type":"text","text":" instead."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how you might expect a generic version of "},{"code":"findIndex(ofString:in:)","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"called "},{"type":"codeVoice","code":"findIndex(of:in:)"},{"text":", to be written.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Note that the return type of this function is still "},{"code":"Int?","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because the function returns an optional index number,"},{"type":"text","text":" "},{"type":"text","text":"not an optional value from the array."},{"type":"text","text":" "},{"text":"Be warned, though — this function doesn’t compile,","type":"text"},{"type":"text","text":" "},{"text":"for reasons explained after the example:","type":"text"}]},{"code":["func findIndex<T>(of valueToFind: T, in array:[T]) -> Int? {","    for (index, value) in array.enumerated() {","        if value == valueToFind {","            return index","        }","    }","    return nil","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This function doesn’t compile as written above.","type":"text"},{"text":" ","type":"text"},{"text":"The problem lies with the equality check, “","type":"text"},{"type":"codeVoice","code":"if value == valueToFind"},{"text":"”.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Not every type in Swift can be compared with the equal to operator ("},{"code":"==","type":"codeVoice"},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you create your own class or structure to represent a complex data model, for example,"},{"type":"text","text":" "},{"type":"text","text":"then the meaning of “equal to” for that class or structure"},{"type":"text","text":" "},{"type":"text","text":"isn’t something that Swift can guess for you."},{"type":"text","text":" "},{"type":"text","text":"Because of this, it isn’t possible to guarantee that this code will work"},{"type":"text","text":" "},{"type":"text","text":"for "},{"type":"emphasis","inlineContent":[{"text":"every","type":"text"}]},{"type":"text","text":" possible type "},{"type":"codeVoice","code":"T"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and an appropriate error is reported when you try to compile the code."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All is not lost, however."},{"text":" ","type":"text"},{"text":"The Swift standard library defines a protocol called ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which requires any conforming type to implement"},{"text":" ","type":"text"},{"text":"the equal to operator (","type":"text"},{"code":"==","type":"codeVoice"},{"type":"text","text":") and the not equal to operator ("},{"type":"codeVoice","code":"!="},{"text":")","type":"text"},{"type":"text","text":" "},{"text":"to compare any two values of that type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"All of Swift’s standard types automatically support the "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any type that’s "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" can be used safely with the "},{"type":"codeVoice","code":"findIndex(of:in:)"},{"type":"text","text":" function,"},{"type":"text","text":" "},{"text":"because it’s guaranteed to support the equal to operator.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"To express this fact, you write a type constraint of "},{"code":"Equatable","type":"codeVoice"},{"text":" ","type":"text"},{"text":"as part of the type parameter’s definition when you define the function:","type":"text"}]},{"syntax":"swift","code":["func findIndex<T: Equatable>(of valueToFind: T, in array:[T]) -> Int? {","    for (index, value) in array.enumerated() {","        if value == valueToFind {","            return index","        }","    }","    return nil","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The single type parameter for "},{"type":"codeVoice","code":"findIndex(of:in:)"},{"type":"text","text":" is written as "},{"type":"codeVoice","code":"T: Equatable"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which means “any type "},{"type":"codeVoice","code":"T"},{"type":"text","text":" that conforms to the "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol.”"}]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"findIndex(of:in:)"},{"type":"text","text":" function now compiles successfully"},{"type":"text","text":" "},{"type":"text","text":"and can be used with any type that’s "},{"type":"codeVoice","code":"Equatable"},{"text":", such as ","type":"text"},{"code":"Double","type":"codeVoice"},{"type":"text","text":" or "},{"code":"String","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let doubleIndex = findIndex(of: 9.3, in: [3.14159, 0.1, 0.25])","\/\/ doubleIndex is an optional Int with no value, because 9.3 isn't in the array","let stringIndex = findIndex(of: \"Andrea\", in: [\"Mike\", \"Malcolm\", \"Andrea\"])","\/\/ stringIndex is an optional Int containing a value of 2"]},{"level":2,"type":"heading","text":"Associated Types","anchor":"Associated-Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When defining a protocol,"},{"type":"text","text":" "},{"text":"it’s sometimes useful to declare one or more associated types","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as part of the protocol’s definition."},{"text":" ","type":"text"},{"text":"An ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"associated type"}]},{"type":"text","text":" gives a placeholder name"},{"type":"text","text":" "},{"type":"text","text":"to a type that’s used as part of the protocol."},{"type":"text","text":" "},{"text":"The actual type to use for that associated type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"isn’t specified until the protocol is adopted."},{"type":"text","text":" "},{"text":"Associated types are specified with the ","type":"text"},{"type":"codeVoice","code":"associatedtype"},{"type":"text","text":" keyword."}]},{"type":"heading","anchor":"Associated-Types-in-Action","level":3,"text":"Associated Types in Action"},{"inlineContent":[{"type":"text","text":"Here’s an example of a protocol called "},{"type":"codeVoice","code":"Container"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which declares an associated type called "},{"code":"Item","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["protocol Container {","    associatedtype Item","    mutating func append(_ item: Item)","    var count: Int { get }","    subscript(i: Int) -> Item { get }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"code":"Container","type":"codeVoice"},{"text":" protocol defines three required capabilities","type":"text"},{"type":"text","text":" "},{"text":"that any container must provide:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"It must be possible to add a new item to the container with an ","type":"text"},{"type":"codeVoice","code":"append(_:)"},{"text":" method.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"It must be possible to access a count of the items in the container","type":"text"},{"type":"text","text":" "},{"text":"through a ","type":"text"},{"type":"codeVoice","code":"count"},{"text":" property that returns an ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" value."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"It must be possible to retrieve each item in the container with a subscript","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that takes an "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" index value."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"This protocol doesn’t specify how the items in the container should be stored"},{"type":"text","text":" "},{"type":"text","text":"or what type they’re allowed to be."},{"text":" ","type":"text"},{"text":"The protocol only specifies the three bits of functionality","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that any type must provide in order to be considered a "},{"code":"Container","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A conforming type can provide additional functionality,"},{"type":"text","text":" "},{"type":"text","text":"as long as it satisfies these three requirements."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Any type that conforms to the "},{"code":"Container","type":"codeVoice"},{"type":"text","text":" protocol must be able to specify"},{"text":" ","type":"text"},{"text":"the type of values it stores.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Specifically, it must ensure that only items of the right type"},{"text":" ","type":"text"},{"type":"text","text":"are added to the container,"},{"text":" ","type":"text"},{"text":"and it must be clear about the type of the items returned by its subscript.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To define these requirements,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"Container","type":"codeVoice"},{"type":"text","text":" protocol needs a way to refer to"},{"type":"text","text":" "},{"type":"text","text":"the type of the elements that a container will hold,"},{"type":"text","text":" "},{"text":"without knowing what that type is for a specific container.","type":"text"},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"Container","type":"codeVoice"},{"text":" protocol needs to specify that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"any value passed to the "},{"type":"codeVoice","code":"append(_:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"must have the same type as the container’s element type,"},{"text":" ","type":"text"},{"type":"text","text":"and that the value returned by the container’s subscript"},{"type":"text","text":" "},{"text":"will be of the same type as the container’s element type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To achieve this,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Container"},{"type":"text","text":" protocol declares an associated type called "},{"code":"Item","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"written as  "},{"type":"codeVoice","code":"associatedtype Item"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The protocol doesn’t define what ","type":"text"},{"type":"codeVoice","code":"Item"},{"text":" is —","type":"text"},{"text":" ","type":"text"},{"text":"that information is left for any conforming type to provide.","type":"text"},{"type":"text","text":" "},{"text":"Nonetheless, the ","type":"text"},{"type":"codeVoice","code":"Item"},{"type":"text","text":" alias provides a way to refer to"},{"text":" ","type":"text"},{"type":"text","text":"the type of the items in a "},{"code":"Container","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and to define a type for use with the "},{"type":"codeVoice","code":"append(_:)"},{"type":"text","text":" method and subscript,"},{"type":"text","text":" "},{"type":"text","text":"to ensure that the expected behavior of any "},{"type":"codeVoice","code":"Container"},{"type":"text","text":" is enforced."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s a version of the nongeneric "},{"code":"IntStack","type":"codeVoice"},{"type":"text","text":" type"},{"type":"text","text":" "},{"text":"from ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Types","type":"reference","isActive":true},{"type":"text","text":" above,"},{"text":" ","type":"text"},{"type":"text","text":"adapted to conform to the "},{"code":"Container","type":"codeVoice"},{"text":" protocol:","type":"text"}]},{"code":["struct IntStack: Container {","    \/\/ original IntStack implementation","    var items: [Int] = []","    mutating func push(_ item: Int) {","        items.append(item)","    }","    mutating func pop() -> Int {","        return items.removeLast()","    }","    \/\/ conformance to the Container protocol","    typealias Item = Int","    mutating func append(_ item: Int) {","        self.push(item)","    }","    var count: Int {","        return items.count","    }","    subscript(i: Int) -> Int {","        return items[i]","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"IntStack"},{"type":"text","text":" type implements all three of the "},{"code":"Container","type":"codeVoice"},{"type":"text","text":" protocol’s requirements,"},{"type":"text","text":" "},{"type":"text","text":"and in each case wraps part of the "},{"code":"IntStack","type":"codeVoice"},{"type":"text","text":" type’s existing functionality"},{"type":"text","text":" "},{"text":"to satisfy these requirements.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Moreover, "},{"type":"codeVoice","code":"IntStack"},{"type":"text","text":" specifies that for this implementation of "},{"type":"codeVoice","code":"Container"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"the appropriate ","type":"text"},{"code":"Item","type":"codeVoice"},{"type":"text","text":" to use is a type of "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The definition of ","type":"text"},{"type":"codeVoice","code":"typealias Item = Int"},{"type":"text","text":" turns the abstract type of "},{"type":"codeVoice","code":"Item"},{"type":"text","text":" "},{"text":"into a concrete type of ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" for this implementation of the ","type":"text"},{"code":"Container","type":"codeVoice"},{"text":" protocol.","type":"text"}]},{"inlineContent":[{"text":"Thanks to Swift’s type inference,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you don’t actually need to declare a concrete "},{"type":"codeVoice","code":"Item"},{"text":" of ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" "},{"type":"text","text":"as part of the definition of "},{"code":"IntStack","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"IntStack"},{"text":" conforms to all of the requirements of the ","type":"text"},{"type":"codeVoice","code":"Container"},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"type":"text","text":"Swift can infer the appropriate "},{"type":"codeVoice","code":"Item"},{"type":"text","text":" to use,"},{"text":" ","type":"text"},{"type":"text","text":"simply by looking at the type of the "},{"type":"codeVoice","code":"append(_:)"},{"type":"text","text":" method’s "},{"type":"codeVoice","code":"item"},{"type":"text","text":" parameter"},{"type":"text","text":" "},{"type":"text","text":"and the return type of the subscript."},{"type":"text","text":" "},{"text":"Indeed, if you delete the ","type":"text"},{"code":"typealias Item = Int","type":"codeVoice"},{"text":" line from the code above,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"everything still works, because it’s clear what type should be used for "},{"code":"Item","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also make the generic "},{"type":"codeVoice","code":"Stack"},{"type":"text","text":" type conform to the "},{"type":"codeVoice","code":"Container"},{"type":"text","text":" protocol:"}]},{"code":["struct Stack<Element>: Container {","    \/\/ original Stack<Element> implementation","    var items: [Element] = []","    mutating func push(_ item: Element) {","        items.append(item)","    }","    mutating func pop() -> Element {","        return items.removeLast()","    }","    \/\/ conformance to the Container protocol","    mutating func append(_ item: Element) {","        self.push(item)","    }","    var count: Int {","        return items.count","    }","    subscript(i: Int) -> Element {","        return items[i]","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This time, the type parameter ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" is used as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the type of the "},{"code":"append(_:)","type":"codeVoice"},{"type":"text","text":" method’s "},{"type":"codeVoice","code":"item"},{"type":"text","text":" parameter"},{"type":"text","text":" "},{"type":"text","text":"and the return type of the subscript."},{"text":" ","type":"text"},{"text":"Swift can therefore infer that ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" is the appropriate type to use","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as the "},{"code":"Item","type":"codeVoice"},{"type":"text","text":" for this particular container."}]},{"anchor":"Extending-an-Existing-Type-to-Specify-an-Associated-Type","level":3,"text":"Extending an Existing Type to Specify an Associated Type","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You can extend an existing type to add conformance to a protocol,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Adding-Protocol-Conformance-with-an-Extension"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"This includes a protocol with an associated type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" type already provides an "},{"code":"append(_:)","type":"codeVoice"},{"text":" method,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property, and a subscript with an "},{"type":"codeVoice","code":"Int"},{"text":" index to retrieve its elements.","type":"text"},{"type":"text","text":" "},{"text":"These three capabilities match the requirements of the ","type":"text"},{"code":"Container","type":"codeVoice"},{"text":" protocol.","type":"text"},{"text":" ","type":"text"},{"text":"This means that you can extend ","type":"text"},{"type":"codeVoice","code":"Array"},{"type":"text","text":" to conform to the "},{"type":"codeVoice","code":"Container"},{"type":"text","text":" protocol"},{"text":" ","type":"text"},{"type":"text","text":"simply by declaring that "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" adopts the protocol."},{"text":" ","type":"text"},{"type":"text","text":"You do this with an empty extension,"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Declaring-Protocol-Adoption-with-an-Extension"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["extension Array: Container {}"]},{"type":"paragraph","inlineContent":[{"text":"Array’s existing ","type":"text"},{"code":"append(_:)","type":"codeVoice"},{"type":"text","text":" method and subscript enable Swift to infer"},{"type":"text","text":" "},{"type":"text","text":"the appropriate type to use for "},{"type":"codeVoice","code":"Item"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"just as for the generic "},{"type":"codeVoice","code":"Stack"},{"type":"text","text":" type above."},{"text":" ","type":"text"},{"text":"After defining this extension, you can use any ","type":"text"},{"code":"Array","type":"codeVoice"},{"type":"text","text":" as a "},{"type":"codeVoice","code":"Container"},{"text":".","type":"text"}]},{"text":"Adding Constraints to an Associated Type","type":"heading","anchor":"Adding-Constraints-to-an-Associated-Type","level":3},{"inlineContent":[{"text":"You can add type constraints to an associated type in a protocol","type":"text"},{"type":"text","text":" "},{"text":"to require that conforming types satisfy those constraints.","type":"text"},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"text":"the following code defines a version of ","type":"text"},{"code":"Container","type":"codeVoice"},{"text":" ","type":"text"},{"text":"that requires the items in the container to be equatable.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["protocol Container {","    associatedtype Item: Equatable","    mutating func append(_ item: Item)","    var count: Int { get }","    subscript(i: Int) -> Item { get }","}"]},{"type":"paragraph","inlineContent":[{"text":"To conform to this version of ","type":"text"},{"code":"Container","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"the container’s ","type":"text"},{"code":"Item","type":"codeVoice"},{"text":" type has to conform to the ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":" protocol.","type":"text"}]},{"level":3,"text":"Using a Protocol in Its Associated Type’s Constraints","type":"heading","anchor":"Using-a-Protocol-in-Its-Associated-Types-Constraints"},{"type":"paragraph","inlineContent":[{"text":"A protocol can appear as part of its own requirements.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"text":"here’s a protocol that refines the ","type":"text"},{"type":"codeVoice","code":"Container"},{"text":" protocol,","type":"text"},{"type":"text","text":" "},{"text":"adding the requirement of a ","type":"text"},{"type":"codeVoice","code":"suffix(_:)"},{"type":"text","text":" method."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"suffix(_:)"},{"text":" method","type":"text"},{"type":"text","text":" "},{"text":"returns a given number of elements from the end of the container,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"storing them in an instance of the "},{"code":"Suffix","type":"codeVoice"},{"type":"text","text":" type."}]},{"type":"codeListing","syntax":"swift","code":["protocol SuffixableContainer: Container {","    associatedtype Suffix: SuffixableContainer where Suffix.Item == Item","    func suffix(_ size: Int) -> Suffix","}"]},{"type":"paragraph","inlineContent":[{"text":"In this protocol,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Suffix"},{"type":"text","text":" is an associated type,"},{"text":" ","type":"text"},{"text":"like the ","type":"text"},{"type":"codeVoice","code":"Item"},{"type":"text","text":" type in the "},{"type":"codeVoice","code":"Container"},{"type":"text","text":" example above."},{"type":"text","text":" "},{"type":"codeVoice","code":"Suffix"},{"text":" has two constraints:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It must conform to the "},{"code":"SuffixableContainer","type":"codeVoice"},{"type":"text","text":" protocol"},{"text":" ","type":"text"},{"type":"text","text":"(the protocol currently being defined),"},{"text":" ","type":"text"},{"type":"text","text":"and its "},{"code":"Item","type":"codeVoice"},{"type":"text","text":" type must be the same"},{"text":" ","type":"text"},{"text":"as the container’s ","type":"text"},{"type":"codeVoice","code":"Item"},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"The constraint on "},{"type":"codeVoice","code":"Item"},{"type":"text","text":" is a generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause,"},{"text":" ","type":"text"},{"text":"which is discussed in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause","isActive":true},{"type":"text","text":" below."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an extension of the "},{"type":"codeVoice","code":"Stack"},{"type":"text","text":" type"},{"text":" ","type":"text"},{"type":"text","text":"from "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Types","isActive":true},{"text":" above","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that adds conformance to the "},{"type":"codeVoice","code":"SuffixableContainer"},{"type":"text","text":" protocol:"}]},{"code":["extension Stack: SuffixableContainer {","    func suffix(_ size: Int) -> Stack {","        var result = Stack()","        for index in (count-size)..<count {","            result.append(self[index])","        }","        return result","    }","    \/\/ Inferred that Suffix is Stack.","}","var stackOfInts = Stack<Int>()","stackOfInts.append(10)","stackOfInts.append(20)","stackOfInts.append(30)","let suffix = stackOfInts.suffix(2)","\/\/ suffix contains 20 and 30"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In the example above,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"Suffix"},{"type":"text","text":" associated type for "},{"code":"Stack","type":"codeVoice"},{"type":"text","text":" is also "},{"code":"Stack","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"so the suffix operation on "},{"type":"codeVoice","code":"Stack"},{"type":"text","text":" returns another "},{"type":"codeVoice","code":"Stack"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Alternatively,"},{"type":"text","text":" "},{"text":"a type that conforms to ","type":"text"},{"code":"SuffixableContainer","type":"codeVoice"},{"text":" ","type":"text"},{"text":"can have a ","type":"text"},{"type":"codeVoice","code":"Suffix"},{"type":"text","text":" type that’s different from itself —"},{"text":" ","type":"text"},{"text":"meaning the suffix operation can return a different type.","type":"text"},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"here’s an extension to the nongeneric "},{"type":"codeVoice","code":"IntStack"},{"type":"text","text":" type"},{"text":" ","type":"text"},{"type":"text","text":"that adds "},{"type":"codeVoice","code":"SuffixableContainer"},{"type":"text","text":" conformance,"},{"type":"text","text":" "},{"type":"text","text":"using "},{"type":"codeVoice","code":"Stack<Int>"},{"type":"text","text":" as its suffix type instead of "},{"code":"IntStack","type":"codeVoice"},{"type":"text","text":":"}]},{"code":["extension IntStack: SuffixableContainer {","    func suffix(_ size: Int) -> Stack<Int> {","        var result = Stack<Int>()","        for index in (count-size)..<count {","            result.append(self[index])","        }","        return result","    }","    \/\/ Inferred that Suffix is Stack<Int>.","}"],"syntax":"swift","type":"codeListing"},{"text":"Generic Where Clauses","type":"heading","anchor":"Generic-Where-Clauses","level":2},{"inlineContent":[{"type":"text","text":"Type constraints, as described in "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Type-Constraints","type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"enable you to define requirements on the type parameters associated with"},{"type":"text","text":" "},{"text":"a generic function, subscript, or type.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can also be useful to define requirements for associated types."},{"text":" ","type":"text"},{"text":"You do this by defining a ","type":"text"},{"inlineContent":[{"text":"generic where clause","type":"text"}],"type":"emphasis"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"A generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause enables you to require that"},{"type":"text","text":" "},{"type":"text","text":"an associated type must conform to a certain protocol,"},{"type":"text","text":" "},{"text":"or that certain type parameters and associated types must be the same.","type":"text"},{"type":"text","text":" "},{"text":"A generic ","type":"text"},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause starts with the "},{"type":"codeVoice","code":"where"},{"text":" keyword,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"followed by constraints for associated types"},{"type":"text","text":" "},{"text":"or equality relationships between types and associated types.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You write a generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause right before the opening curly brace"},{"text":" ","type":"text"},{"type":"text","text":"of a type or function’s body."}]},{"inlineContent":[{"type":"text","text":"The example below defines a generic function called "},{"code":"allItemsMatch","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which checks to see if two ","type":"text"},{"type":"codeVoice","code":"Container"},{"type":"text","text":" instances contain"},{"text":" ","type":"text"},{"type":"text","text":"the same items in the same order."},{"type":"text","text":" "},{"type":"text","text":"The function returns a Boolean value of "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if all items match"},{"text":" ","type":"text"},{"type":"text","text":"and a value of "},{"type":"codeVoice","code":"false"},{"text":" if they don’t.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The two containers to be checked don’t have to be"},{"text":" ","type":"text"},{"text":"the same type of container (although they can be),","type":"text"},{"text":" ","type":"text"},{"text":"but they do have to hold the same type of items.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This requirement is expressed through a combination of type constraints"},{"type":"text","text":" "},{"text":"and a generic ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clause:","type":"text"}]},{"code":["func allItemsMatch<C1: Container, C2: Container>","        (_ someContainer: C1, _ anotherContainer: C2) -> Bool","        where C1.Item == C2.Item, C1.Item: Equatable {","","    \/\/ Check that both containers contain the same number of items.","    if someContainer.count != anotherContainer.count {","        return false","    }","","    \/\/ Check each pair of items to see if they're equivalent.","    for i in 0..<someContainer.count {","        if someContainer[i] != anotherContainer[i] {","            return false","        }","    }","","    \/\/ All items match, so return true.","    return true","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function takes two arguments called"},{"type":"text","text":" "},{"type":"codeVoice","code":"someContainer"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"anotherContainer"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"someContainer"},{"text":" argument is of type ","type":"text"},{"code":"C1","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"code":"anotherContainer","type":"codeVoice"},{"text":" argument is of type ","type":"text"},{"code":"C2","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Both ","type":"text"},{"code":"C1","type":"codeVoice"},{"type":"text","text":" and "},{"code":"C2","type":"codeVoice"},{"text":" are type parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for two container types to be determined when the function is called."}]},{"inlineContent":[{"text":"The following requirements are placed on the function’s two type parameters:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"C1","type":"codeVoice"},{"type":"text","text":" must conform to the "},{"type":"codeVoice","code":"Container"},{"text":" protocol (written as ","type":"text"},{"type":"codeVoice","code":"C1: Container"},{"text":").","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"C2"},{"type":"text","text":" must also conform to the "},{"type":"codeVoice","code":"Container"},{"type":"text","text":" protocol (written as "},{"code":"C2: Container","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"Item","type":"codeVoice"},{"type":"text","text":" for "},{"code":"C1","type":"codeVoice"},{"text":" must be the same as the ","type":"text"},{"type":"codeVoice","code":"Item"},{"type":"text","text":" for "},{"type":"codeVoice","code":"C2"},{"text":" ","type":"text"},{"text":"(written as ","type":"text"},{"type":"codeVoice","code":"C1.Item == C2.Item"},{"text":").","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"Item","type":"codeVoice"},{"text":" for ","type":"text"},{"type":"codeVoice","code":"C1"},{"text":" must conform to the ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"text":"(written as ","type":"text"},{"code":"C1.Item: Equatable","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first and second requirements are defined in the function’s type parameter list,"},{"type":"text","text":" "},{"text":"and the third and fourth requirements are defined in the function’s generic ","type":"text"},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause."}]},{"type":"paragraph","inlineContent":[{"text":"These requirements mean:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"someContainer"},{"type":"text","text":" is a container of type "},{"code":"C1","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"anotherContainer","type":"codeVoice"},{"type":"text","text":" is a container of type "},{"code":"C2","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"someContainer","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"anotherContainer"},{"type":"text","text":" contain the same type of items."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The items in "},{"type":"codeVoice","code":"someContainer"},{"text":" can be checked with the not equal operator (","type":"text"},{"type":"codeVoice","code":"!="},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"to see if they’re different from each other."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The third and fourth requirements combine to mean that"},{"type":"text","text":" "},{"text":"the items in ","type":"text"},{"code":"anotherContainer","type":"codeVoice"},{"type":"text","text":" can "},{"type":"emphasis","inlineContent":[{"type":"text","text":"also"}]},{"type":"text","text":" be checked with the "},{"type":"codeVoice","code":"!="},{"text":" operator,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because they’re exactly the same type as the items in "},{"type":"codeVoice","code":"someContainer"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"These requirements enable the "},{"code":"allItemsMatch(_:_:)","type":"codeVoice"},{"type":"text","text":" function to compare the two containers,"},{"type":"text","text":" "},{"text":"even if they’re of a different container type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"allItemsMatch(_:_:)"},{"type":"text","text":" function starts by checking that"},{"text":" ","type":"text"},{"text":"both containers contain the same number of items.","type":"text"},{"text":" ","type":"text"},{"text":"If they contain a different number of items, there’s no way that they can match,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the function returns "},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"After making this check, the function iterates over all of the items in "},{"code":"someContainer","type":"codeVoice"},{"type":"text","text":" "},{"text":"with a ","type":"text"},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"text":" loop and the half-open range operator (","type":"text"},{"type":"codeVoice","code":"..<"},{"text":").","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For each item, the function checks whether the item from "},{"type":"codeVoice","code":"someContainer"},{"text":" isn’t equal to","type":"text"},{"text":" ","type":"text"},{"text":"the corresponding item in ","type":"text"},{"type":"codeVoice","code":"anotherContainer"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"If the two items aren’t equal, then the two containers don’t match,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the function returns "},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the loop finishes without finding a mismatch,"},{"text":" ","type":"text"},{"type":"text","text":"the two containers match, and the function returns "},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Here’s how the ","type":"text"},{"type":"codeVoice","code":"allItemsMatch(_:_:)"},{"type":"text","text":" function looks in action:"}]},{"type":"codeListing","syntax":"swift","code":["var stackOfStrings = Stack<String>()","stackOfStrings.push(\"uno\")","stackOfStrings.push(\"dos\")","stackOfStrings.push(\"tres\")","","var arrayOfStrings = [\"uno\", \"dos\", \"tres\"]","","if allItemsMatch(stackOfStrings, arrayOfStrings) {","    print(\"All items match.\")","} else {","    print(\"Not all items match.\")","}","\/\/ Prints \"All items match.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above creates a "},{"code":"Stack","type":"codeVoice"},{"text":" instance to store ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" values,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and pushes three strings onto the stack."},{"type":"text","text":" "},{"text":"The example also creates an ","type":"text"},{"code":"Array","type":"codeVoice"},{"text":" instance initialized with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an array literal containing the same three strings as the stack."},{"type":"text","text":" "},{"text":"Even though the stack and the array are of a different type,","type":"text"},{"text":" ","type":"text"},{"text":"they both conform to the ","type":"text"},{"code":"Container","type":"codeVoice"},{"type":"text","text":" protocol,"},{"text":" ","type":"text"},{"type":"text","text":"and both contain the same type of values."},{"type":"text","text":" "},{"type":"text","text":"You can therefore call the "},{"type":"codeVoice","code":"allItemsMatch(_:_:)"},{"text":" function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with these two containers as its arguments."},{"type":"text","text":" "},{"type":"text","text":"In the example above, the "},{"type":"codeVoice","code":"allItemsMatch(_:_:)"},{"type":"text","text":" function correctly reports that"},{"text":" ","type":"text"},{"text":"all of the items in the two containers match.","type":"text"}]},{"text":"Extensions with a Generic Where Clause","type":"heading","anchor":"Extensions-with-a-Generic-Where-Clause","level":2},{"inlineContent":[{"text":"You can also use a generic ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clause as part of an extension.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The example below"},{"text":" ","type":"text"},{"type":"text","text":"extends the generic "},{"type":"codeVoice","code":"Stack"},{"text":" structure from the previous examples","type":"text"},{"text":" ","type":"text"},{"text":"to add an ","type":"text"},{"type":"codeVoice","code":"isTop(_:)"},{"text":" method.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["extension Stack where Element: Equatable {","    func isTop(_ item: Element) -> Bool {","        guard let topItem = items.last else {","            return false","        }","        return topItem == item","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This new "},{"code":"isTop(_:)","type":"codeVoice"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"type":"text","text":"first checks that the stack isn’t empty,"},{"text":" ","type":"text"},{"text":"and then compares the given item","type":"text"},{"type":"text","text":" "},{"text":"against the stack’s topmost item.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If you tried to do this without a generic "},{"type":"codeVoice","code":"where"},{"text":" clause,","type":"text"},{"type":"text","text":" "},{"text":"you would have a problem:","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The implementation of "},{"type":"codeVoice","code":"isTop(_:)"},{"type":"text","text":" uses the "},{"type":"codeVoice","code":"=="},{"type":"text","text":" operator,"},{"text":" ","type":"text"},{"text":"but the definition of ","type":"text"},{"code":"Stack","type":"codeVoice"},{"text":" doesn’t require","type":"text"},{"type":"text","text":" "},{"type":"text","text":"its items to be equatable,"},{"type":"text","text":" "},{"type":"text","text":"so using the "},{"type":"codeVoice","code":"=="},{"type":"text","text":" operator results in a compile-time error."},{"type":"text","text":" "},{"type":"text","text":"Using a generic "},{"code":"where","type":"codeVoice"},{"text":" clause","type":"text"},{"type":"text","text":" "},{"text":"lets you add a new requirement to the extension,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so that the extension adds the "},{"type":"codeVoice","code":"isTop(_:)"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"text":"only when the items in the stack are equatable.","type":"text"}]},{"inlineContent":[{"text":"Here’s how the ","type":"text"},{"type":"codeVoice","code":"isTop(_:)"},{"type":"text","text":" method looks in action:"}],"type":"paragraph"},{"code":["if stackOfStrings.isTop(\"tres\") {","    print(\"Top element is tres.\")","} else {","    print(\"Top element is something else.\")","}","\/\/ Prints \"Top element is tres.\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If you try to call the "},{"type":"codeVoice","code":"isTop(_:)"},{"text":" method","type":"text"},{"type":"text","text":" "},{"text":"on a stack whose elements aren’t equatable,","type":"text"},{"type":"text","text":" "},{"text":"you’ll get a compile-time error.","type":"text"}],"type":"paragraph"},{"code":["struct NotEquatable { }","var notEquatableStack = Stack<NotEquatable>()","let notEquatableValue = NotEquatable()","notEquatableStack.push(notEquatableValue)","notEquatableStack.isTop(notEquatableValue)  \/\/ Error"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can use a generic "},{"code":"where","type":"codeVoice"},{"text":" clause with extensions to a protocol.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The example below extends the "},{"code":"Container","type":"codeVoice"},{"text":" protocol from the previous examples","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to add a "},{"code":"startsWith(_:)","type":"codeVoice"},{"type":"text","text":" method."}],"type":"paragraph"},{"code":["extension Container where Item: Equatable {","    func startsWith(_ item: Item) -> Bool {","        return count >= 1 && self[0] == item","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"startsWith(_:)"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"text":"first makes sure that the container has at least one item,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and then it checks"},{"type":"text","text":" "},{"text":"whether the first item in the container matches the given item.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This new "},{"type":"codeVoice","code":"startsWith(_:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"can be used with any type that conforms to the "},{"code":"Container","type":"codeVoice"},{"type":"text","text":" protocol,"},{"type":"text","text":" "},{"text":"including the stacks and arrays used above,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as long as the container’s items are equatable."}]},{"type":"codeListing","syntax":"swift","code":["if [9, 9, 9].startsWith(42) {","    print(\"Starts with 42.\")","} else {","    print(\"Starts with something else.\")","}","\/\/ Prints \"Starts with something else.\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause in the example above"},{"text":" ","type":"text"},{"type":"text","text":"requires "},{"type":"codeVoice","code":"Item"},{"type":"text","text":" to conform to a protocol,"},{"text":" ","type":"text"},{"type":"text","text":"but you can also write a generic "},{"code":"where","type":"codeVoice"},{"text":" clauses that require ","type":"text"},{"type":"codeVoice","code":"Item"},{"type":"text","text":" "},{"type":"text","text":"to be a specific type."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"code":["extension Container where Item == Double {","    func average() -> Double {","        var sum = 0.0","        for index in 0..<count {","            sum += self[index]","        }","        return sum \/ Double(count)","    }","}","print([1260.0, 1200.0, 98.6, 37.0].average())","\/\/ Prints \"648.9\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This example adds an ","type":"text"},{"type":"codeVoice","code":"average()"},{"type":"text","text":" method"},{"type":"text","text":" "},{"text":"to containers whose ","type":"text"},{"type":"codeVoice","code":"Item"},{"type":"text","text":" type is "},{"code":"Double","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"It iterates over the items in the container to add them up,","type":"text"},{"text":" ","type":"text"},{"text":"and divides by the container’s count to compute the average.","type":"text"},{"type":"text","text":" "},{"text":"It explicitly converts the count from ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" to "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" "},{"type":"text","text":"to be able to do floating-point division."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can include multiple requirements in a generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause"},{"text":" ","type":"text"},{"text":"that’s part of an extension,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"just like you can for a generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause that you write elsewhere."},{"type":"text","text":" "},{"text":"Separate each requirement in the list with a comma.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Contextual Where Clauses","level":2,"anchor":"Contextual-Where-Clauses"},{"inlineContent":[{"text":"You can write a generic ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" clause","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as part of a declaration that doesn’t have its own generic type constraints,"},{"text":" ","type":"text"},{"type":"text","text":"when you’re already working in the context of generic types."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"you can write a generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause"},{"text":" ","type":"text"},{"type":"text","text":"on a subscript of a generic type"},{"text":" ","type":"text"},{"text":"or on a method in an extension to a generic type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"Container"},{"type":"text","text":" structure is generic,"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"code":"where","type":"codeVoice"},{"text":" clauses in the example below","type":"text"},{"text":" ","type":"text"},{"text":"specify what type constraints have to be satisfied","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to make these new  methods available on a container."}],"type":"paragraph"},{"code":["extension Container {","    func average() -> Double where Item == Int {","        var sum = 0.0","        for index in 0..<count {","            sum += Double(self[index])","        }","        return sum \/ Double(count)","    }","    func endsWith(_ item: Item) -> Bool where Item: Equatable {","        return count >= 1 && self[count-1] == item","    }","}","let numbers = [1260, 1200, 98, 37]","print(numbers.average())","\/\/ Prints \"648.75\"","print(numbers.endsWith(37))","\/\/ Prints \"true\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example"},{"text":" ","type":"text"},{"type":"text","text":"adds an "},{"type":"codeVoice","code":"average()"},{"type":"text","text":" method to "},{"type":"codeVoice","code":"Container"},{"type":"text","text":" when the items are integers,"},{"text":" ","type":"text"},{"type":"text","text":"and it adds an "},{"code":"endsWith(_:)","type":"codeVoice"},{"text":" method when the items are equatable.","type":"text"},{"text":" ","type":"text"},{"text":"Both functions include a generic ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clause","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that adds type constraints to the generic "},{"code":"Item","type":"codeVoice"},{"type":"text","text":" type parameter"},{"type":"text","text":" "},{"text":"from the original declaration of ","type":"text"},{"type":"codeVoice","code":"Container"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to write this code without using contextual "},{"type":"codeVoice","code":"where"},{"text":" clauses,","type":"text"},{"type":"text","text":" "},{"text":"you write two extensions,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"one for each generic "},{"type":"codeVoice","code":"where"},{"text":" clause.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The example above and the example below have the same behavior."}]},{"syntax":"swift","code":["extension Container where Item == Int {","    func average() -> Double {","        var sum = 0.0","        for index in 0..<count {","            sum += Double(self[index])","        }","        return sum \/ Double(count)","    }","}","extension Container where Item: Equatable {","    func endsWith(_ item: Item) -> Bool {","        return count >= 1 && self[count-1] == item","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"In the version of this example that uses contextual ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clauses,","type":"text"},{"text":" ","type":"text"},{"text":"the implementation of ","type":"text"},{"type":"codeVoice","code":"average()"},{"type":"text","text":" and "},{"type":"codeVoice","code":"endsWith(_:)"},{"text":" ","type":"text"},{"type":"text","text":"are both in the same extension"},{"text":" ","type":"text"},{"text":"because each method’s generic ","type":"text"},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause"},{"type":"text","text":" "},{"text":"states the requirements that need to be satisfied","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to make that method available."},{"text":" ","type":"text"},{"text":"Moving those requirements to the extensions’ generic ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clauses","type":"text"},{"text":" ","type":"text"},{"text":"makes the methods available in the same situations,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but requires one extension per requirement."}],"type":"paragraph"},{"text":"Associated Types with a Generic Where Clause","anchor":"Associated-Types-with-a-Generic-Where-Clause","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"You can include a generic ","type":"text"},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause on an associated type."},{"type":"text","text":" "},{"type":"text","text":"For example, suppose you want to make a version of "},{"code":"Container","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"that includes an iterator,"},{"text":" ","type":"text"},{"text":"like what the ","type":"text"},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":" protocol uses in the Swift standard library."},{"type":"text","text":" "},{"text":"Here’s how you write that:","type":"text"}]},{"type":"codeListing","code":["protocol Container {","    associatedtype Item","    mutating func append(_ item: Item)","    var count: Int { get }","    subscript(i: Int) -> Item { get }","","    associatedtype Iterator: IteratorProtocol where Iterator.Element == Item","    func makeIterator() -> Iterator","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause on "},{"type":"codeVoice","code":"Iterator"},{"type":"text","text":" requires that"},{"type":"text","text":" "},{"type":"text","text":"the iterator must traverse over elements"},{"type":"text","text":" "},{"type":"text","text":"of the same item type as the container’s items,"},{"text":" ","type":"text"},{"text":"regardless of the iterator’s type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"makeIterator()"},{"type":"text","text":" function provides access to a container’s iterator."}]},{"type":"paragraph","inlineContent":[{"text":"For a protocol that inherits from another protocol,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you add a constraint to an inherited associated type"},{"type":"text","text":" "},{"text":"by including the generic ","type":"text"},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause in the protocol declaration."},{"type":"text","text":" "},{"text":"For example, the following code","type":"text"},{"type":"text","text":" "},{"type":"text","text":"declares a "},{"type":"codeVoice","code":"ComparableContainer"},{"type":"text","text":" protocol"},{"text":" ","type":"text"},{"text":"that requires ","type":"text"},{"type":"codeVoice","code":"Item"},{"type":"text","text":" to conform to "},{"type":"codeVoice","code":"Comparable"},{"text":":","type":"text"}]},{"code":["protocol ComparableContainer: Container where Item: Comparable { }"],"syntax":"swift","type":"codeListing"},{"level":2,"type":"heading","text":"Generic Subscripts","anchor":"Generic-Subscripts"},{"type":"paragraph","inlineContent":[{"text":"Subscripts can be generic,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and they can include generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clauses."},{"text":" ","type":"text"},{"type":"text","text":"You write the placeholder type name inside angle brackets after "},{"type":"codeVoice","code":"subscript"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and you write a generic ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clause right before the opening curly brace","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the subscript’s body."},{"text":" ","type":"text"},{"text":"For example:","type":"text"}]},{"code":["extension Container {","    subscript<Indices: Sequence>(indices: Indices) -> [Item]","            where Indices.Iterator.Element == Int {","        var result: [Item] = []","        for index in indices {","            result.append(self[index])","        }","        return result","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This extension to the "},{"type":"codeVoice","code":"Container"},{"text":" protocol","type":"text"},{"type":"text","text":" "},{"text":"adds a subscript that takes a sequence of indices","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and returns an array containing the items at each given index."},{"text":" ","type":"text"},{"type":"text","text":"This generic subscript is constrained as follows:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The generic parameter "},{"code":"Indices","type":"codeVoice"},{"type":"text","text":" in angle brackets"},{"type":"text","text":" "},{"type":"text","text":"has to be a type that conforms to the "},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":" protocol"},{"type":"text","text":" "},{"type":"text","text":"from the Swift standard library."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The subscript takes a single parameter, "},{"type":"codeVoice","code":"indices"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which is an instance of that "},{"code":"Indices","type":"codeVoice"},{"type":"text","text":" type."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The generic ","type":"text"},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause requires"},{"text":" ","type":"text"},{"text":"that the iterator for the sequence","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"must traverse over elements of type "},{"code":"Int","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"This ensures that the indices in the sequence","type":"text"},{"type":"text","text":" "},{"text":"are the same type as the indices used for a container.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"Taken together, these constraints mean that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the value passed for the "},{"type":"codeVoice","code":"indices"},{"type":"text","text":" parameter"},{"type":"text","text":" "},{"text":"is a sequence of integers.","type":"text"}],"type":"paragraph"}]}],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"stackPoppedOneString":{"type":"image","alt":null,"variants":[{"url":"\/images\/stackPoppedOneString@2x.png","traits":["2x","light"]},{"url":"\/images\/stackPoppedOneString~dark@2x.png","traits":["2x","dark"]}],"identifier":"stackPoppedOneString"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Types":{"title":"Generic Types","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics#Generic-Types","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Types","kind":"section"},"stackPushPop":{"type":"image","alt":null,"variants":[{"url":"\/images\/stackPushPop@2x.png","traits":["2x","light"]},{"url":"\/images\/stackPushPop~dark@2x.png","traits":["2x","dark"]}],"identifier":"stackPushPop"},"https://developer.apple.com/documentation/swift/hashable#2849490":{"title":"Conforming to the Hashable Protocol","type":"link","titleInlineContent":[{"type":"text","text":"Conforming to the Hashable Protocol"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/hashable#2849490","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/hashable#2849490"},"stackPushedFourStrings":{"type":"image","alt":null,"variants":[{"url":"\/images\/stackPushedFourStrings@2x.png","traits":["2x","light"]},{"url":"\/images\/stackPushedFourStrings~dark@2x.png","traits":["2x","dark"]}],"identifier":"stackPushedFourStrings"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Type-Constraints":{"title":"Type Constraints","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics#Type-Constraints","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Type-Constraints","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Dictionaries":{"type":"topic","title":"Dictionaries","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Dictionaries","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Dictionaries","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Adding-Protocol-Conformance-with-an-Extension":{"title":"Adding Protocol Conformance with an Extension","url":"\/documentation\/the-swift-programming-language\/protocols#Adding-Protocol-Conformance-with-an-Extension","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Adding-Protocol-Conformance-with-an-Extension","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extensions-with-a-Generic-Where-Clause":{"type":"topic","abstract":[],"title":"Extensions with a Generic Where Clause","url":"\/documentation\/the-swift-programming-language\/generics#Extensions-with-a-Generic-Where-Clause","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#In-Out-Parameters":{"title":"In-Out Parameters","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions#In-Out-Parameters","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#In-Out-Parameters","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types-with-a-Generic-Where-Clause":{"type":"topic","title":"Associated Types with a Generic Where Clause","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause","url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types-with-a-Generic-Where-Clause","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Declaring-Protocol-Adoption-with-an-Extension":{"title":"Declaring Protocol Adoption with an Extension","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Declaring-Protocol-Adoption-with-an-Extension","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Declaring-Protocol-Adoption-with-an-Extension","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"title":"The Swift Programming Language (5.9)","kind":"article","role":"collection","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","url":"\/documentation\/the-swift-programming-language","abstract":[],"type":"topic"}}}