{"abstract":[{"type":"text","text":"Use macros to generate code at compile time."}],"metadata":{"title":"Macros"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"text":"Macros transform your source code when you compile it,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"letting you avoid writing repetitive code by hand."},{"type":"text","text":" "},{"text":"During compilation,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift expands any macros in your code before building your code as usual."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"macro-expansion"}]},{"type":"paragraph","inlineContent":[{"text":"Expanding a macro is always an additive operation:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Macros add new code,"},{"type":"text","text":" "},{"type":"text","text":"but they never delete or modify existing code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both the input to a macro and the output of macro expansion"},{"text":" ","type":"text"},{"text":"are checked to ensure they’re syntactically valid Swift code.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Likewise, the values you pass to a macro"},{"text":" ","type":"text"},{"type":"text","text":"and the values in code generated by a macro"},{"text":" ","type":"text"},{"text":"are checked to ensure they have the correct types.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In addition,"},{"text":" ","type":"text"},{"text":"if the macro’s implementation encounters an error when expanding that macro,","type":"text"},{"text":" ","type":"text"},{"text":"the compiler treats this as a compilation error.","type":"text"},{"type":"text","text":" "},{"text":"These guarantees make it easier to reason about code that uses macros,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and they make it easier to identify issues"},{"type":"text","text":" "},{"type":"text","text":"like using a macro incorrectly"},{"type":"text","text":" "},{"text":"or a macro implementation that has a bug.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Swift has two kinds of macros:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Freestanding macros"}],"type":"emphasis"},{"text":" appear on their own,","type":"text"},{"text":" ","type":"text"},{"text":"without being attached to a declaration.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Attached macros","type":"text"}],"type":"emphasis"},{"text":" modify the declaration that they’re attached to.","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"You call attached and freestanding macros slightly differently,"},{"type":"text","text":" "},{"text":"but they both follow the same model for macro expansion,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and you implement them both using the same approach."},{"type":"text","text":" "},{"text":"The following sections describe both kinds of macros in more detail.","type":"text"}],"type":"paragraph"},{"text":"Freestanding Macros","level":2,"type":"heading","anchor":"Freestanding-Macros"},{"inlineContent":[{"type":"text","text":"To call a freestanding macro,"},{"type":"text","text":" "},{"text":"you write a number sign (","type":"text"},{"code":"#","type":"codeVoice"},{"type":"text","text":") before its name,"},{"type":"text","text":" "},{"type":"text","text":"and you write any arguments to the macro in parentheses after its name."},{"text":" ","type":"text"},{"type":"text","text":"For example:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func myFunction() {","    print(\"Currently running \\(#function)\")","    #warning(\"Something's wrong\")","}"]},{"type":"paragraph","inlineContent":[{"text":"In the first line,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"#function"},{"type":"text","text":" calls the "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/function()","isActive":true},{"text":" macro from the Swift standard library.","type":"text"},{"text":" ","type":"text"},{"text":"When you compile this code,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift calls that macro’s implementation,"},{"type":"text","text":" "},{"type":"text","text":"which replaces "},{"type":"codeVoice","code":"#function"},{"type":"text","text":" with the name of the current function."},{"text":" ","type":"text"},{"type":"text","text":"When you run this code and call "},{"code":"myFunction()","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"it prints “Currently running myFunction()”.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In the second line,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"#warning"},{"text":" calls the ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/warning(_:)","type":"reference","isActive":true},{"text":" macro from the Swift standard library","type":"text"},{"text":" ","type":"text"},{"text":"to produce a custom compile-time warning.","type":"text"}]},{"inlineContent":[{"text":"Freestanding macros can produce a value, like ","type":"text"},{"type":"codeVoice","code":"#function"},{"type":"text","text":" does,"},{"text":" ","type":"text"},{"type":"text","text":"or they can perform an action at compile time, like "},{"type":"codeVoice","code":"#warning"},{"type":"text","text":" does."}],"type":"paragraph"},{"anchor":"Attached-Macros","level":2,"text":"Attached Macros","type":"heading"},{"inlineContent":[{"type":"text","text":"To call an attached macro,"},{"text":" ","type":"text"},{"type":"text","text":"you write an at sign ("},{"type":"codeVoice","code":"@"},{"type":"text","text":") before its name,"},{"type":"text","text":" "},{"text":"and you write any arguments to the macro in parentheses after its name.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Attached macros modify the declaration that they’re attached to."},{"text":" ","type":"text"},{"text":"They add code to that declaration,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"like defining a new method or adding conformance to a protocol."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example, consider the following code","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that doesn’t use macros:"}]},{"code":["struct SundaeToppings: OptionSet {","    let rawValue: Int","    static let nuts = SundaeToppings(rawValue: 1 << 0)","    static let cherry = SundaeToppings(rawValue: 1 << 1)","    static let fudge = SundaeToppings(rawValue: 1 << 2)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this code,"},{"type":"text","text":" "},{"type":"text","text":"each of the options in the "},{"type":"codeVoice","code":"SundaeToppings"},{"type":"text","text":" option set"},{"text":" ","type":"text"},{"text":"includes a call to the initializer,","type":"text"},{"text":" ","type":"text"},{"text":"which is repetitive and manual.","type":"text"},{"text":" ","type":"text"},{"text":"It would be easy to make a mistake when adding a new option,","type":"text"},{"type":"text","text":" "},{"text":"like typing the wrong number at the end of the line.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s a version of this code that uses a macro instead:"}]},{"type":"codeListing","code":["@OptionSet<Int>","struct SundaeToppings {","    private enum Options: Int {","        case nuts","        case cherry","        case fudge","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This version of ","type":"text"},{"type":"codeVoice","code":"SundaeToppings"},{"text":" calls an ","type":"text"},{"type":"codeVoice","code":"@OptionSet"},{"type":"text","text":" macro."},{"type":"text","text":" "},{"text":"The macro reads the list of cases in the private enumeration,","type":"text"},{"text":" ","type":"text"},{"text":"generates the list of constants for each option,","type":"text"},{"text":" ","type":"text"},{"text":"and adds a conformance to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/optionset"},{"text":" protocol.","type":"text"}]},{"inlineContent":[{"text":"For comparison,","type":"text"},{"type":"text","text":" "},{"text":"here’s what the expanded version of the ","type":"text"},{"type":"codeVoice","code":"@OptionSet"},{"text":" macro looks like.","type":"text"},{"text":" ","type":"text"},{"text":"You don’t write this code,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and you would see it only if you specifically asked Swift"},{"text":" ","type":"text"},{"type":"text","text":"to show the macro’s expansion."}],"type":"paragraph"},{"syntax":"swift","code":["struct SundaeToppings {","    private enum Options: Int {","        case nuts","        case cherry","        case fudge","    }","","    typealias RawValue = Int","    var rawValue: RawValue","    init() { self.rawValue = 0 }","    init(rawValue: RawValue) { self.rawValue = rawValue }","    static let nuts: Self = Self(rawValue: 1 << Options.nuts.rawValue)","    static let cherry: Self = Self(rawValue: 1 << Options.cherry.rawValue)","    static let fudge: Self = Self(rawValue: 1 << Options.fudge.rawValue)","}","extension SundaeToppings: OptionSet { }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of the code after the private enumeration"},{"text":" ","type":"text"},{"type":"text","text":"comes from the "},{"code":"@OptionSet","type":"codeVoice"},{"text":" macro.","type":"text"},{"type":"text","text":" "},{"text":"The version of ","type":"text"},{"type":"codeVoice","code":"SundaeToppings"},{"type":"text","text":" "},{"type":"text","text":"that uses a macro to generate all of the static variables"},{"type":"text","text":" "},{"type":"text","text":"is easier to read and easier to maintain"},{"text":" ","type":"text"},{"text":"than the manually coded version, earlier.","type":"text"}]},{"level":2,"type":"heading","anchor":"Macro-Declarations","text":"Macro Declarations"},{"type":"paragraph","inlineContent":[{"text":"In most Swift code,","type":"text"},{"type":"text","text":" "},{"text":"when you implement a symbol, like a function or type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"there’s no separate declaration."},{"type":"text","text":" "},{"text":"However, for macros, the declaration and implementation are separate.","type":"text"},{"type":"text","text":" "},{"text":"A macro’s declaration contains its name,","type":"text"},{"text":" ","type":"text"},{"text":"the parameters it takes,","type":"text"},{"type":"text","text":" "},{"text":"where it can be used,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and what kind of code it generates."},{"text":" ","type":"text"},{"text":"A macro’s implementation contains the code","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that expands the macro by generating Swift code."}]},{"inlineContent":[{"text":"You introduce a macro declaration with the ","type":"text"},{"type":"codeVoice","code":"macro"},{"text":" keyword.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"here’s part of the declaration for"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"@OptionSet"},{"type":"text","text":" macro used in the previous example:"}],"type":"paragraph"},{"syntax":"swift","code":["public macro OptionSet<RawType>() =","        #externalMacro(module: \"SwiftMacros\", type: \"OptionSetMacro\")"],"type":"codeListing"},{"inlineContent":[{"text":"The first line","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specifies the macro’s name and its arguments —"},{"text":" ","type":"text"},{"type":"text","text":"the name is "},{"type":"codeVoice","code":"OptionSet"},{"text":", and it doesn’t take any arguments.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The second line"},{"text":" ","type":"text"},{"type":"text","text":"uses the "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/externalmacro(module:type:)","type":"reference"},{"type":"text","text":" macro from the Swift standard library"},{"type":"text","text":" "},{"text":"to tell Swift where the macro’s implementation is located.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In this case,"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"SwiftMacros","type":"codeVoice"},{"type":"text","text":" module"},{"text":" ","type":"text"},{"type":"text","text":"contains a type named "},{"code":"OptionSetMacro","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which implements the "},{"code":"@OptionSet","type":"codeVoice"},{"type":"text","text":" macro."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"OptionSet"},{"text":" is an attached macro,","type":"text"},{"type":"text","text":" "},{"text":"its name uses upper camel case,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"like the names for structures and classes."},{"type":"text","text":" "},{"type":"text","text":"Freestanding macros have lower camel case names,"},{"text":" ","type":"text"},{"type":"text","text":"like the names for variables and functions."}]},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"text":"","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Macros are always declared as "},{"type":"codeVoice","code":"public"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Because the code that declares a macro"},{"type":"text","text":" "},{"type":"text","text":"is in a different module from code that uses that macro,"},{"text":" ","type":"text"},{"type":"text","text":"there isn’t anywhere you could apply a nonpublic macro."}],"type":"paragraph"}]},{"inlineContent":[{"type":"text","text":"A macro declaration defines the macro’s "},{"inlineContent":[{"type":"text","text":"roles"}],"type":"emphasis"},{"type":"text","text":" —"},{"type":"text","text":" "},{"text":"the places in source code where that macro can be called,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the kinds of code the macro can generate."},{"text":" ","type":"text"},{"text":"Every macro has one or more roles,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which you write as part of the attributes"},{"type":"text","text":" "},{"type":"text","text":"at the beginning of the macro declaration."},{"type":"text","text":" "},{"type":"text","text":"Here’s a bit more of the declaration for "},{"type":"codeVoice","code":"@OptionSet"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"including the attributes for its roles:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@attached(member)","@attached(conformance)","public macro OptionSet<RawType>() =","        #externalMacro(module: \"SwiftMacros\", type: \"OptionSetMacro\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@attached"},{"type":"text","text":" attribute appears twice in this declaration,"},{"type":"text","text":" "},{"type":"text","text":"once for each macro role."},{"text":" ","type":"text"},{"type":"text","text":"The first use, "},{"type":"codeVoice","code":"@attached(member)"},{"text":", indicates that the macro","type":"text"},{"type":"text","text":" "},{"type":"text","text":"adds new members to the type you apply it to."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"@OptionSet","type":"codeVoice"},{"type":"text","text":" macro adds an "},{"type":"codeVoice","code":"init(rawValue:)"},{"text":" initializer","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that’s required by the "},{"code":"OptionSet","type":"codeVoice"},{"type":"text","text":" protocol,"},{"text":" ","type":"text"},{"text":"as well as some additional members.","type":"text"},{"type":"text","text":" "},{"text":"The second use, ","type":"text"},{"code":"@attached(conformance)","type":"codeVoice"},{"type":"text","text":", tells you that "},{"code":"@OptionSet","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"adds one or more protocol conformances."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"@OptionSet"},{"type":"text","text":" macro"},{"type":"text","text":" "},{"text":"extends the type that you apply the macro to,","type":"text"},{"type":"text","text":" "},{"text":"to add conformance to the ","type":"text"},{"type":"codeVoice","code":"OptionSet"},{"text":" protocol.","type":"text"}]},{"inlineContent":[{"text":"For a freestanding macro,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you write the "},{"type":"codeVoice","code":"@freestanding"},{"text":" attribute to specify its role:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@freestanding(expression)","public macro line<T: ExpressibleByIntegerLiteral>() -> T =","        \/* ... location of the macro implementation... *\/"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"#line"},{"type":"text","text":" macro above has the "},{"type":"codeVoice","code":"expression"},{"type":"text","text":" role."},{"text":" ","type":"text"},{"type":"text","text":"An expression macro produces a value,"},{"text":" ","type":"text"},{"text":"or performs a compile-time action like generating a warning.","type":"text"}]},{"inlineContent":[{"text":"In addition to the macro’s role,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a macro’s declaration provides information about"},{"text":" ","type":"text"},{"text":"the names of the symbols that the macro generates.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When a macro declaration provides a list of names,"},{"type":"text","text":" "},{"text":"it’s guaranteed to produce only declarations that use those names,","type":"text"},{"type":"text","text":" "},{"text":"which helps you understand and debug the generated code.","type":"text"},{"type":"text","text":" "},{"text":"Here’s the full declaration of ","type":"text"},{"code":"@OptionSet","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@attached(member, names: named(RawValue), named(rawValue),","        named(`init`), arbitrary)","@attached(conformance)","public macro OptionSet<RawType>() =","        #externalMacro(module: \"SwiftMacros\", type: \"OptionSetMacro\")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the declaration above,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"@attached(member)"},{"text":" macro includes arguments after the ","type":"text"},{"code":"named:","type":"codeVoice"},{"text":" label","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for each of the symbols that the "},{"code":"@OptionSet","type":"codeVoice"},{"type":"text","text":" macro generates."},{"text":" ","type":"text"},{"type":"text","text":"The macro adds declarations for symbols named"},{"text":" ","type":"text"},{"type":"codeVoice","code":"RawValue"},{"text":", ","type":"text"},{"type":"codeVoice","code":"rawValue"},{"text":", and ","type":"text"},{"code":"init","type":"codeVoice"},{"text":" —","type":"text"},{"type":"text","text":" "},{"text":"because those names are known ahead of time,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the macro declaration lists them explicitly."}]},{"type":"paragraph","inlineContent":[{"text":"The macro declaration also includes ","type":"text"},{"code":"arbitrary","type":"codeVoice"},{"text":" after the list of names,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"allowing the macro to generate declarations"},{"type":"text","text":" "},{"text":"whose names aren’t known until you use the macro.","type":"text"},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when the "},{"code":"@OptionSet","type":"codeVoice"},{"type":"text","text":" macro is applied to the "},{"type":"codeVoice","code":"SundaeToppings"},{"text":" above,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it generates type properties that correspond to the enumeration cases,"},{"type":"text","text":" "},{"type":"codeVoice","code":"nuts"},{"text":", ","type":"text"},{"type":"codeVoice","code":"cherry"},{"text":", and ","type":"text"},{"code":"fudge","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"For more information,"},{"text":" ","type":"text"},{"type":"text","text":"including a full list of macro roles,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#attached","type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#freestanding","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","anchor":"Macro-Expansion","text":"Macro Expansion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"When building Swift code that uses macros,"},{"type":"text","text":" "},{"type":"text","text":"the compiler calls the macros’ implementation to expand them."}]},{"inlineContent":[{"identifier":"macro-expansion-full","type":"image"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Specifically, Swift expands macros in the following way:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The compiler reads the code,"},{"type":"text","text":" "},{"type":"text","text":"creating an in-memory representation of the syntax."}]}]},{"content":[{"inlineContent":[{"text":"The compiler sends part of the in-memory representation","type":"text"},{"text":" ","type":"text"},{"text":"to the macro implementation,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which expands the macro."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The compiler replaces the macro call with its expanded form.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The compiler continues with compilation,","type":"text"},{"type":"text","text":" "},{"text":"using the expanded source code.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"To go through the specific steps, consider the following:","type":"text"}],"type":"paragraph"},{"code":["let magicNumber = #fourCharacterCode(\"ABCD\")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"code":"#fourCharacterCode","type":"codeVoice"},{"type":"text","text":" macro takes a string that’s four characters long"},{"text":" ","type":"text"},{"text":"and returns an unsigned 32-bit integer","type":"text"},{"text":" ","type":"text"},{"text":"that corresponds to the ASCII values in the string joined together.","type":"text"},{"type":"text","text":" "},{"text":"Some file formats use integers like this to identify data","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because they’re compact but still readable in a debugger."},{"type":"text","text":" "},{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros#Implementing-a-Macro"},{"text":" section below","type":"text"},{"type":"text","text":" "},{"type":"text","text":"shows how to implement this macro."}],"type":"paragraph"},{"inlineContent":[{"text":"To expand the macros in the code above,","type":"text"},{"text":" ","type":"text"},{"text":"the compiler reads the Swift file","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and creates an in-memory representation of that code"},{"text":" ","type":"text"},{"text":"known as an ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"abstract syntax tree"}]},{"text":", or AST.","type":"text"},{"type":"text","text":" "},{"text":"The AST makes the code’s structure explicit,","type":"text"},{"type":"text","text":" "},{"text":"which makes it easier to write code that interacts with that structure —","type":"text"},{"text":" ","type":"text"},{"text":"like a compiler or a macro implementation.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Here’s a representation of the AST for the code above,"},{"text":" ","type":"text"},{"text":"slightly simplified by omitting some extra detail:","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"macro-ast-original"}]},{"inlineContent":[{"text":"The diagram above shows how the structure of this code","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is represented in memory."},{"type":"text","text":" "},{"type":"text","text":"Each element in the AST"},{"type":"text","text":" "},{"type":"text","text":"corresponds to a part of the source code."},{"text":" ","type":"text"},{"type":"text","text":"The “Constant declaration” AST element"},{"text":" ","type":"text"},{"type":"text","text":"has two child elements under it,"},{"type":"text","text":" "},{"text":"which represent the two parts of a constant declaration:","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"its name and its value."},{"text":" ","type":"text"},{"type":"text","text":"The “Macro call” element has child elements"},{"text":" ","type":"text"},{"type":"text","text":"that represent the macro’s name"},{"text":" ","type":"text"},{"text":"and the list of arguments being passed to the macro.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As part of constructing this AST,"},{"type":"text","text":" "},{"text":"the compiler checks that the source code is valid Swift.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, "},{"type":"codeVoice","code":"#fourCharacterCode"},{"text":" takes a single argument,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which must be a string."},{"type":"text","text":" "},{"type":"text","text":"If you tried to pass an integer argument,"},{"type":"text","text":" "},{"type":"text","text":"or forgot the quotation mark ("},{"type":"codeVoice","code":"\""},{"type":"text","text":") at the end of the string literal,"},{"type":"text","text":" "},{"text":"you’d get an error at this point in the process.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The compiler finds the places in the code where you call a macro,"},{"text":" ","type":"text"},{"type":"text","text":"and loads the external binary that implements those macros."},{"type":"text","text":" "},{"text":"For each macro call,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the compiler passes part of the AST to that macro’s implementation."},{"type":"text","text":" "},{"type":"text","text":"Here’s a representation of that partial AST:"}]},{"type":"paragraph","inlineContent":[{"identifier":"macro-ast-input","type":"image"}]},{"inlineContent":[{"type":"text","text":"The implementation of the "},{"type":"codeVoice","code":"#fourCharacterCode"},{"type":"text","text":" macro"},{"type":"text","text":" "},{"text":"reads this partial AST as its input when expanding the macro.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A macro’s implementation"},{"type":"text","text":" "},{"type":"text","text":"operates only on the partial AST that it receives as its input,"},{"type":"text","text":" "},{"type":"text","text":"meaning a macro always expands the same way"},{"type":"text","text":" "},{"type":"text","text":"regardless of what code comes before and after it."},{"text":" ","type":"text"},{"type":"text","text":"This limitation helps make macro expansion easier to understand,"},{"type":"text","text":" "},{"text":"and helps your code build faster","type":"text"},{"type":"text","text":" "},{"text":"because Swift can avoid expanding macros that haven’t changed.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift helps macro authors avoid accidentally reading other input"},{"type":"text","text":" "},{"text":"by restricting the code that implements macros:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"The AST passed to a macro implementation"},{"text":" ","type":"text"},{"text":"contains only the AST elements that represent the macro,","type":"text"},{"type":"text","text":" "},{"text":"not any of the code that comes before or after it.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The macro implementation runs in a sandboxed environment"},{"text":" ","type":"text"},{"type":"text","text":"that prevents it from accessing the file system or the network."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to these safeguards,"},{"type":"text","text":" "},{"text":"the macro’s author is responsible for not reading or modifying anything","type":"text"},{"text":" ","type":"text"},{"text":"outside of the macro’s inputs.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, a macro’s expansion must not depend on the current time of day."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The implementation of "},{"type":"codeVoice","code":"#fourCharacterCode"},{"text":" ","type":"text"},{"text":"generates a new AST containing the expanded code.","type":"text"},{"text":" ","type":"text"},{"text":"Here’s what that code returns to the compiler:","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"macro-ast-output"}]},{"type":"paragraph","inlineContent":[{"text":"When the compiler receives this expansion,","type":"text"},{"text":" ","type":"text"},{"text":"it replaces the AST element that contains the macro call","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with the element that contains the macro’s expansion."},{"type":"text","text":" "},{"type":"text","text":"After macro expansion,"},{"type":"text","text":" "},{"text":"the compiler checks again to ensure","type":"text"},{"text":" ","type":"text"},{"text":"the program is still syntactically valid Swift","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and all the types are correct."},{"type":"text","text":" "},{"type":"text","text":"That produces a final AST that can be compiled as usual:"}]},{"inlineContent":[{"type":"image","identifier":"macro-ast-result"}],"type":"paragraph"},{"inlineContent":[{"text":"This AST corresponds to Swift code like this:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let magicNumber = 1145258561 as UInt32"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, the input source code has only one macro,"},{"type":"text","text":" "},{"text":"but a real program could have several instances of the same macro","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and several calls to different macros."},{"type":"text","text":" "},{"type":"text","text":"The compiler expands macros one at a time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If one macro appears inside another,"},{"text":" ","type":"text"},{"text":"the outer macro is expanded first —","type":"text"},{"type":"text","text":" "},{"text":"this lets the outer macro modify the inner macro before it’s expanded.","type":"text"}]},{"level":2,"text":"Implementing a Macro","anchor":"Implementing-a-Macro","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To implement a macro, you make two components:"},{"text":" ","type":"text"},{"type":"text","text":"A type that performs the macro expansion,"},{"text":" ","type":"text"},{"type":"text","text":"and a library that declares the macro to expose it as API."},{"type":"text","text":" "},{"text":"These parts are built separately from code that uses the macro,","type":"text"},{"text":" ","type":"text"},{"text":"even if you’re developing the macro and its clients together,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because the macro implementation runs"},{"type":"text","text":" "},{"type":"text","text":"as part of building the macro’s clients."}]},{"type":"paragraph","inlineContent":[{"text":"To create a new macro using Swift Package Manager,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"run "},{"type":"codeVoice","code":"swift package init --type macro"},{"type":"text","text":" —"},{"text":" ","type":"text"},{"type":"text","text":"this creates several files,"},{"text":" ","type":"text"},{"text":"including a template for a macro implementation and declaration.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To add macros to an existing project,"},{"type":"text","text":" "},{"type":"text","text":"add a target for the macro implementation"},{"type":"text","text":" "},{"type":"text","text":"and a target for the macro library."},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can add something like the following to your "},{"code":"Package.swift","type":"codeVoice"},{"text":" file,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"changing the names to match your project:"}]},{"type":"codeListing","code":["targets: [","    \/\/ Macro implementation that performs the source transformations.","    .macro(","        name: \"MyProjectMacros\",","        dependencies: [","            .product(name: \"SwiftSyntaxMacros\", package: \"swift-syntax\"),","            .product(name: \"SwiftCompilerPlugin\", package: \"swift-syntax\")","        ]","    ),","","    \/\/ Library that exposes a macro as part of its API.","    .target(name: \"MyProject\", dependencies: [\"MyProjectMacros\"]),","]"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The code above defines two targets:","type":"text"},{"text":" ","type":"text"},{"code":"MyProjectMacros","type":"codeVoice"},{"text":" contains the implementation of the macros,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"MyProject"},{"type":"text","text":" makes those macros available."}]},{"inlineContent":[{"text":"The implementation of a macro","type":"text"},{"type":"text","text":" "},{"text":"uses the ","type":"text"},{"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/apple\/swift-syntax\/"},{"type":"text","text":" module to interact with Swift code"},{"type":"text","text":" "},{"text":"in a structured way, using an AST.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"If you created a new macro package with Swift Package Manager,"},{"type":"text","text":" "},{"text":"the generated ","type":"text"},{"code":"Package.swift","type":"codeVoice"},{"text":" file","type":"text"},{"text":" ","type":"text"},{"text":"automatically includes a dependency on SwiftSyntax.","type":"text"},{"text":" ","type":"text"},{"text":"If you’re adding macros to an existing project,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"add a dependency on SwiftSyntax in your "},{"type":"codeVoice","code":"Package.swift"},{"text":" file:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["dependencies: [","    .package(url: \"https:\/\/github.com\/apple\/swift-syntax\", from: \"509.0.0\")","],"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Replace the "},{"code":"some-tag","type":"codeVoice"},{"type":"text","text":" placeholder in the code above"},{"type":"text","text":" "},{"type":"text","text":"with the Git tag for the version of SwiftSyntax you want to use."}]},{"inlineContent":[{"type":"text","text":"Depending on your macro’s role,"},{"type":"text","text":" "},{"type":"text","text":"there’s a corresponding protocol from SwiftSyntax"},{"type":"text","text":" "},{"type":"text","text":"that the macro implementation conforms to."},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"consider "},{"code":"#fourCharacterCode","type":"codeVoice"},{"type":"text","text":" from the previous section."},{"text":" ","type":"text"},{"text":"Here’s a structure that implements that macro:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["public struct FourCharacterCode: ExpressionMacro {","    public static func expansion(","        of node: some FreestandingMacroExpansionSyntax,","        in context: some MacroExpansionContext","    ) throws -> ExprSyntax {","        guard let argument = node.argumentList.first?.expression,","              let segments = argument.as(StringLiteralExprSyntax.self)?.segments,","              segments.count == 1,","              case .stringSegment(let literalSegment)? = segments.first","        else {","            throw CustomError.message(\"Need a static string\")","        }","","        let string = literalSegment.content.text","        guard let result = fourCharacterCode(for: string) else {","            throw CustomError.message(\"Invalid four-character code\")","        }","","        return \"\\(raw: result) as UInt32\"","    }","}","","private func fourCharacterCode(for characters: String) -> UInt32? {","    guard characters.count == 4 else { return nil }","","    var result: UInt32 = 0","    for character in characters {","        result = result << 8","        guard let asciiValue = character.asciiValue else { return nil }","        result += UInt32(asciiValue)","    }","    return result","}","enum CustomError: Error { case message(String) }"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If you’re adding this macro to an existing Swift Package Manager project,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"add a type that acts as the entry point for the macro target"},{"text":" ","type":"text"},{"type":"text","text":"and lists the macros that the target defines:"}]},{"syntax":"swift","code":["import SwiftCompilerPlugin","","@main","struct MyProjectMacros: CompilerPlugin {","    var providingMacros: [Macro.Type] = [FourCharacterCode.self]","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"#fourCharacterCode"},{"text":" macro","type":"text"},{"text":" ","type":"text"},{"text":"is a freestanding macro that produces an expression,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"so the "},{"type":"codeVoice","code":"FourCharacterCode"},{"type":"text","text":" type that implements it"},{"text":" ","type":"text"},{"type":"text","text":"conforms to the "},{"code":"ExpressionMacro","type":"codeVoice"},{"text":" protocol.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"ExpressionMacro"},{"type":"text","text":" protocol has one requirement,"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"expansion(of:in:)"},{"type":"text","text":" method that expands the AST."},{"type":"text","text":" "},{"type":"text","text":"For the list of macro roles and their corresponding SwiftSyntax protocols,"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#attached","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#freestanding","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"in "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","type":"reference"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"To expand the ","type":"text"},{"type":"codeVoice","code":"#fourCharacterCode"},{"text":" macro,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift sends the AST for the code that uses this macro"},{"text":" ","type":"text"},{"text":"to the library that contains the macro implementation.","type":"text"},{"text":" ","type":"text"},{"text":"Inside the library, Swift calls ","type":"text"},{"code":"FourCharacterCode.expansion(of:in:)","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"passing in the AST and the context as arguments to the method.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The implementation of "},{"type":"codeVoice","code":"expansion(of:in:)"},{"type":"text","text":" "},{"type":"text","text":"finds the string that was passed as an argument to "},{"type":"codeVoice","code":"#fourCharacterCode"},{"text":" ","type":"text"},{"text":"and calculates the corresponding 32-bit unsigned integer literal value.","type":"text"}]},{"inlineContent":[{"text":"In the example above,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the first "},{"code":"guard","type":"codeVoice"},{"type":"text","text":" block extracts the string literal from the AST,"},{"text":" ","type":"text"},{"type":"text","text":"assigning that AST element to "},{"code":"literalSegment","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The second "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" block"},{"text":" ","type":"text"},{"text":"calls the private ","type":"text"},{"code":"fourCharacterCode(for:)","type":"codeVoice"},{"type":"text","text":" function."},{"type":"text","text":" "},{"type":"text","text":"Both of these blocks throw an error if the macro is used incorrectly —"},{"text":" ","type":"text"},{"type":"text","text":"the error message becomes a compiler error"},{"type":"text","text":" "},{"type":"text","text":"at the malformed call site."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"text":"if you try to call the macro as ","type":"text"},{"code":"#fourCharacterCode(\"AB\" + \"CD\")","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"the compiler shows the error “Need a static string”."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"expansion(of:in:)"},{"text":" method returns an instance of ","type":"text"},{"type":"codeVoice","code":"ExprSyntax"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"a type from SwiftSyntax that represents an expression in an AST."},{"text":" ","type":"text"},{"text":"Because this type conforms to the ","type":"text"},{"type":"codeVoice","code":"StringLiteralConvertible"},{"text":" protocol,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the macro implementation uses a string literal"},{"text":" ","type":"text"},{"type":"text","text":"as a lightweight syntax to create its result."},{"text":" ","type":"text"},{"text":"All of the SwiftSyntax types that you return from a macro implementation","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"conform to "},{"type":"codeVoice","code":"StringLiteralConvertible"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"so you can use this approach when implementing any kind of macro."}]},{"type":"heading","anchor":"Developing-and-Debugging-Macros","text":"Developing and Debugging Macros","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Macros are well suited to development using tests:"},{"type":"text","text":" "},{"type":"text","text":"They transform one AST into another AST"},{"type":"text","text":" "},{"text":"without depending on any external state,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and without making changes to any external state."},{"type":"text","text":" "},{"text":"In addition, you can create syntax nodes from a string literal,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which simplifies setting up the input for a test."},{"type":"text","text":" "},{"text":"You can also read the ","type":"text"},{"code":"description","type":"codeVoice"},{"type":"text","text":" property of an AST"},{"type":"text","text":" "},{"text":"to get a string to compare against an expected value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"here’s a test of the "},{"code":"#fourCharacterCode","type":"codeVoice"},{"type":"text","text":" macro from previous sections:"}]},{"type":"codeListing","syntax":"swift","code":["let source: SourceFileSyntax =","    \"\"\"","    let abcd = #fourCharacterCode(\"ABCD\")","    \"\"\"","","let file = BasicMacroExpansionContext.KnownSourceFile(","    moduleName: \"MyModule\",","    fullFilePath: \"test.swift\"",")","","let context = BasicMacroExpansionContext(sourceFiles: [source: file])","","let transformedSF = source.expand(","    macros:[\"fourCharacterCode\": FourCharacterCode.self],","    in: context",")","","let expectedDescription =","    \"\"\"","    let abcd = 1145258561 as UInt32","    \"\"\"","","precondition(transformedSF.description == expectedDescription)"]},{"inlineContent":[{"type":"text","text":"The example above tests the macro using a precondition,"},{"type":"text","text":" "},{"text":"but you could use a testing framework instead.","type":"text"}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"kind":"article","references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#freestanding":{"title":"freestanding","abstract":[],"url":"\/documentation\/the-swift-programming-language\/attributes#freestanding","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#freestanding","type":"topic"},"macro-expansion-full":{"variants":[{"url":"\/images\/macro-expansion-full@2x.png","traits":["2x","light"]},{"url":"\/images\/macro-expansion-full~dark@2x.png","traits":["2x","dark"]}],"identifier":"macro-expansion-full","type":"image","alt":"Diagram showing the four steps of expanding macros.  The input is Swift source code.  This becomes a tree, representing the code’s structure.  The macro implementation adds branches to the tree.  The result is Swift source with additional code."},"https://developer.apple.com/documentation/swift/optionset":{"title":"OptionSet","titleInlineContent":[{"code":"OptionSet","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/optionset","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/optionset","type":"link"},"macro-ast-result":{"variants":[{"url":"\/images\/macro-ast-result@2x.png","traits":["2x","light"]},{"url":"\/images\/macro-ast-result~dark@2x.png","traits":["2x","dark"]}],"identifier":"macro-ast-result","type":"image","alt":"A tree diagram, with a constant as the root element.  The constant has a name, magic number, and a value.  The constant’s value is the integer literal 1145258561 of type UInt32."},"macro-ast-original":{"variants":[{"url":"\/images\/macro-ast-original@2x.png","traits":["2x","light"]},{"traits":["2x","dark"],"url":"\/images\/macro-ast-original~dark@2x.png"}],"alt":"A tree diagram, with a constant as the root element.  The constant has a name, magic number, and a value.  The constant’s value is a macro call.  The macro call has a name, fourCharacterCode, and arguments.  The argument is a string literal, ABCD.","identifier":"macro-ast-original","type":"image"},"http://github.com/apple/swift-syntax/":{"titleInlineContent":[{"type":"text","text":"SwiftSyntax"}],"type":"link","title":"SwiftSyntax","identifier":"http:\/\/github.com\/apple\/swift-syntax\/","url":"http:\/\/github.com\/apple\/swift-syntax\/"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Macros#Implementing-a-Macro":{"title":"Implementing a Macro","abstract":[],"url":"\/documentation\/the-swift-programming-language\/macros#Implementing-a-Macro","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros#Implementing-a-Macro","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","type":"topic","role":"collection","title":"The Swift Programming Language (5.9)","abstract":[]},"https://developer.apple.com/documentation/swift/warning(_:)":{"titleInlineContent":[{"code":"warning(_:)","type":"codeVoice"}],"type":"link","title":"warning(_:)","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/warning(_:)","url":"https:\/\/developer.apple.com\/documentation\/swift\/warning(_:)"},"https://developer.apple.com/documentation/swift/function()":{"title":"function()","titleInlineContent":[{"code":"function()","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/function()","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/function()","type":"link"},"macro-ast-input":{"variants":[{"traits":["2x","light"],"url":"\/images\/macro-ast-input@2x.png"},{"traits":["2x","dark"],"url":"\/images\/macro-ast-input~dark@2x.png"}],"type":"image","identifier":"macro-ast-input","alt":"A tree diagram, with a macro call as the root element.  The macro call has a name, fourCharacterCode, and arguments.  The argument is a string literal, ABCD."},"macro-expansion":{"identifier":"macro-expansion","alt":"A diagram showing an overview of macro expansion.  On the left, a stylized representation of Swift code.  On the right, the same code with several lines added by the macro.","variants":[{"traits":["2x","light"],"url":"\/images\/macro-expansion@2x.png"},{"url":"\/images\/macro-expansion~dark@2x.png","traits":["2x","dark"]}],"type":"image"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","kind":"article","title":"Attributes","abstract":[{"text":"Add information to declarations and types.","type":"text"}],"url":"\/documentation\/the-swift-programming-language\/attributes","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#attached":{"abstract":[],"kind":"section","type":"topic","title":"attached","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#attached","url":"\/documentation\/the-swift-programming-language\/attributes#attached"},"macro-ast-output":{"variants":[{"traits":["2x","light"],"url":"\/images\/macro-ast-output@2x.png"},{"url":"\/images\/macro-ast-output~dark@2x.png","traits":["2x","dark"]}],"identifier":"macro-ast-output","type":"image","alt":"A tree diagram with the integer literal 1145258561 of type UInt32."},"https://developer.apple.com/documentation/swift/externalmacro(module:type:)":{"titleInlineContent":[{"type":"codeVoice","code":"externalMacro(module:type:)"}],"type":"link","title":"externalMacro(module:type:)","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/externalmacro(module:type:)","url":"https:\/\/developer.apple.com\/documentation\/swift\/externalmacro(module:type:)"}}}