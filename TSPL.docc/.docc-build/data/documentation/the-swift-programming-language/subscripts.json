{"sections":[],"metadata":{"title":"Subscripts"},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"abstract":[{"type":"text","text":"Access the elements of a collection."}],"kind":"article","schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"text":"Classes, structures, and enumerations can define ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"subscripts","type":"text"}]},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which are shortcuts for accessing the member elements of a collection, list, or sequence.","type":"text"},{"type":"text","text":" "},{"text":"You use subscripts to set and retrieve values by index without needing","type":"text"},{"text":" ","type":"text"},{"text":"separate methods for setting and retrieval.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"text":" instance as ","type":"text"},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" "},{"type":"text","text":"and elements in a "},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"You can define multiple subscripts for a single type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the appropriate subscript overload to use is selected"},{"type":"text","text":" "},{"text":"based on the type of index value you pass to the subscript.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Subscripts aren’t limited to a single dimension,"},{"type":"text","text":" "},{"type":"text","text":"and you can define subscripts with multiple input parameters"},{"text":" ","type":"text"},{"type":"text","text":"to suit your custom type’s needs."}]},{"anchor":"Subscript-Syntax","level":2,"type":"heading","text":"Subscript Syntax"},{"inlineContent":[{"type":"text","text":"Subscripts enable you to query instances of a type"},{"text":" ","type":"text"},{"text":"by writing one or more values in square brackets after the instance name.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Their syntax is similar to both instance method syntax and computed property syntax."},{"type":"text","text":" "},{"text":"You write subscript definitions with the ","type":"text"},{"type":"codeVoice","code":"subscript"},{"text":" keyword,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and specify one or more input parameters and a return type,"},{"type":"text","text":" "},{"text":"in the same way as instance methods.","type":"text"},{"text":" ","type":"text"},{"text":"Unlike instance methods, subscripts can be read-write or read-only.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This behavior is communicated by a getter and setter"},{"text":" ","type":"text"},{"text":"in the same way as for computed properties:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["subscript(index: Int) -> Int {","    get {","        \/\/ Return an appropriate subscript value here.","    }","    set(newValue) {","        \/\/ Perform a suitable setting action here.","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The type of ","type":"text"},{"code":"newValue","type":"codeVoice"},{"text":" is the same as the return value of the subscript.","type":"text"},{"type":"text","text":" "},{"text":"As with computed properties, you can choose not to specify","type":"text"},{"type":"text","text":" "},{"text":"the setter’s ","type":"text"},{"type":"codeVoice","code":"(newValue)"},{"type":"text","text":" parameter."},{"type":"text","text":" "},{"type":"text","text":"A default parameter called "},{"code":"newValue","type":"codeVoice"},{"type":"text","text":" is provided to your setter"},{"type":"text","text":" "},{"text":"if you don’t provide one yourself.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with read-only computed properties,"},{"type":"text","text":" "},{"text":"you can simplify the declaration of a read-only subscript","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by removing the "},{"type":"codeVoice","code":"get"},{"type":"text","text":" keyword and its braces:"}]},{"code":["subscript(index: Int) -> Int {","    \/\/ Return an appropriate subscript value here.","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of a read-only subscript implementation,"},{"type":"text","text":" "},{"text":"which defines a ","type":"text"},{"type":"codeVoice","code":"TimesTable"},{"type":"text","text":" structure to represent an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":"-times-table of integers:"}]},{"type":"codeListing","syntax":"swift","code":["struct TimesTable {","    let multiplier: Int","    subscript(index: Int) -> Int {","        return multiplier * index","    }","}","let threeTimesTable = TimesTable(multiplier: 3)","print(\"six times three is \\(threeTimesTable[6])\")","\/\/ Prints \"six times three is 18\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, a new instance of "},{"type":"codeVoice","code":"TimesTable"},{"text":" is created","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to represent the three-times-table."},{"text":" ","type":"text"},{"type":"text","text":"This is indicated by passing a value of "},{"type":"codeVoice","code":"3"},{"text":" to the structure’s ","type":"text"},{"type":"codeVoice","code":"initializer"},{"type":"text","text":" "},{"type":"text","text":"as the value to use for the instance’s "},{"type":"codeVoice","code":"multiplier"},{"text":" parameter.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can query the "},{"code":"threeTimesTable","type":"codeVoice"},{"type":"text","text":" instance by calling its subscript,"},{"type":"text","text":" "},{"type":"text","text":"as shown in the call to "},{"type":"codeVoice","code":"threeTimesTable[6]"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This requests the sixth entry in the three-times-table,"},{"text":" ","type":"text"},{"type":"text","text":"which returns a value of "},{"type":"codeVoice","code":"18"},{"type":"text","text":", or "},{"code":"3","type":"codeVoice"},{"type":"text","text":" times "},{"type":"codeVoice","code":"6"},{"type":"text","text":"."}]},{"style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":"-times-table is based on a fixed mathematical rule.","type":"text"},{"type":"text","text":" "},{"text":"It isn’t appropriate to set ","type":"text"},{"code":"threeTimesTable[someIndex]","type":"codeVoice"},{"text":" to a new value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and so the subscript for "},{"type":"codeVoice","code":"TimesTable"},{"type":"text","text":" is defined as a read-only subscript."}],"type":"paragraph"}],"name":"Note"},{"level":2,"anchor":"Subscript-Usage","type":"heading","text":"Subscript Usage"},{"inlineContent":[{"text":"The exact meaning of “subscript” depends on the context in which it’s used.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Subscripts are typically used as a shortcut for accessing"},{"type":"text","text":" "},{"type":"text","text":"the member elements in a collection, list, or sequence."},{"text":" ","type":"text"},{"text":"You are free to implement subscripts in the most appropriate way for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"your particular class or structure’s functionality."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, Swift’s ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type implements a subscript"},{"type":"text","text":" "},{"type":"text","text":"to set and retrieve the values stored in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"You can set a value in a dictionary"},{"type":"text","text":" "},{"type":"text","text":"by providing a key of the dictionary’s key type within subscript brackets,"},{"text":" ","type":"text"},{"type":"text","text":"and assigning a value of the dictionary’s value type to the subscript:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var numberOfLegs = [\"spider\": 8, \"ant\": 6, \"cat\": 4]","numberOfLegs[\"bird\"] = 2"]},{"inlineContent":[{"text":"The example above defines a variable called ","type":"text"},{"code":"numberOfLegs","type":"codeVoice"},{"type":"text","text":" "},{"text":"and initializes it with a dictionary literal containing three key-value pairs.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The type of the "},{"code":"numberOfLegs","type":"codeVoice"},{"text":" dictionary is inferred to be ","type":"text"},{"code":"[String: Int]","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"After creating the dictionary,"},{"type":"text","text":" "},{"type":"text","text":"this example uses subscript assignment to add"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":" key of "},{"type":"codeVoice","code":"\"bird\""},{"text":" and an ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" value of ","type":"text"},{"type":"codeVoice","code":"2"},{"text":" to the dictionary.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For more information about ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" subscripting,"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Accessing-and-Modifying-a-Dictionary","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type implements its key-value subscripting"},{"type":"text","text":" "},{"text":"as a subscript that takes and returns an ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"optional","type":"text"}]},{"text":" type.","type":"text"},{"type":"text","text":" "},{"text":"For the ","type":"text"},{"code":"numberOfLegs","type":"codeVoice"},{"type":"text","text":" dictionary above,"},{"text":" ","type":"text"},{"type":"text","text":"the key-value subscript takes and returns a value of type "},{"type":"codeVoice","code":"Int?"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"or “optional int”.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type uses an optional subscript type to model the fact that"},{"text":" ","type":"text"},{"text":"not every key will have a value, and to give a way to delete a value for a key","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by assigning a "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" value for that key."}]}],"name":"Note","style":"note"},{"level":2,"type":"heading","anchor":"Subscript-Options","text":"Subscript Options"},{"inlineContent":[{"text":"Subscripts can take any number of input parameters,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and these input parameters can be of any type."},{"text":" ","type":"text"},{"type":"text","text":"Subscripts can also return a value of any type."}],"type":"paragraph"},{"inlineContent":[{"text":"Like functions,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"subscripts can take a varying number of parameters"},{"type":"text","text":" "},{"type":"text","text":"and provide default values for their parameters,"},{"type":"text","text":" "},{"text":"as discussed in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Variadic-Parameters","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values","type":"reference","isActive":true},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, unlike functions,"},{"type":"text","text":" "},{"type":"text","text":"subscripts can’t use in-out parameters."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A class or structure can provide as many subscript implementations as it needs,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the appropriate subscript to be used will be inferred based on"},{"type":"text","text":" "},{"text":"the types of the value or values that are contained within the subscript brackets","type":"text"},{"type":"text","text":" "},{"type":"text","text":"at the point that the subscript is used."},{"text":" ","type":"text"},{"type":"text","text":"This definition of multiple subscripts is known as "},{"inlineContent":[{"type":"text","text":"subscript overloading"}],"type":"emphasis"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While it’s most common for a subscript to take a single parameter,"},{"text":" ","type":"text"},{"text":"you can also define a subscript with multiple parameters","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if it’s appropriate for your type."},{"text":" ","type":"text"},{"type":"text","text":"The following example defines a "},{"type":"codeVoice","code":"Matrix"},{"text":" structure,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which represents a two-dimensional matrix of "},{"code":"Double","type":"codeVoice"},{"type":"text","text":" values."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"Matrix"},{"text":" structure’s subscript takes two integer parameters:","type":"text"}]},{"type":"codeListing","code":["struct Matrix {","    let rows: Int, columns: Int","    var grid: [Double]","    init(rows: Int, columns: Int) {","        self.rows = rows","        self.columns = columns","        grid = Array(repeating: 0.0, count: rows * columns)","    }","    func indexIsValid(row: Int, column: Int) -> Bool {","        return row >= 0 && row < rows && column >= 0 && column < columns","    }","    subscript(row: Int, column: Int) -> Double {","        get {","            assert(indexIsValid(row: row, column: column), \"Index out of range\")","            return grid[(row * columns) + column]","        }","        set {","            assert(indexIsValid(row: row, column: column), \"Index out of range\")","            grid[(row * columns) + column] = newValue","        }","    }","}"],"syntax":"swift"},{"inlineContent":[{"code":"Matrix","type":"codeVoice"},{"text":" provides an initializer that takes two parameters called ","type":"text"},{"type":"codeVoice","code":"rows"},{"type":"text","text":" and "},{"type":"codeVoice","code":"columns"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and creates an array that’s large enough to store "},{"code":"rows * columns","type":"codeVoice"},{"type":"text","text":" values of type "},{"code":"Double","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Each position in the matrix is given an initial value of "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"To achieve this, the array’s size, and an initial cell value of "},{"type":"codeVoice","code":"0.0"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are passed to an array initializer that creates and initializes a new array of the correct size."},{"text":" ","type":"text"},{"text":"This initializer is described in more detail","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Creating-an-Array-with-a-Default-Value","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"You can construct a new ","type":"text"},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" instance by passing"},{"text":" ","type":"text"},{"type":"text","text":"an appropriate row and column count to its initializer:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var matrix = Matrix(rows: 2, columns: 2)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example above creates a new "},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" instance with two rows and two columns."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"code":"grid","type":"codeVoice"},{"text":" array for this ","type":"text"},{"code":"Matrix","type":"codeVoice"},{"type":"text","text":" instance"},{"type":"text","text":" "},{"type":"text","text":"is effectively a flattened version of the matrix,"},{"text":" ","type":"text"},{"text":"as read from top left to bottom right:","type":"text"}]},{"inlineContent":[{"type":"image","identifier":"subscriptMatrix01"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Values in the matrix can be set by passing row and column values into the subscript,","type":"text"},{"text":" ","type":"text"},{"text":"separated by a comma:","type":"text"}]},{"syntax":"swift","code":["matrix[0, 1] = 1.5","matrix[1, 0] = 3.2"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"These two statements call the subscript’s setter to set","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a value of "},{"code":"1.5","type":"codeVoice"},{"type":"text","text":" in the top right position of the matrix"},{"type":"text","text":" "},{"type":"text","text":"(where "},{"type":"codeVoice","code":"row"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" and "},{"code":"column","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"1","type":"codeVoice"},{"text":"),","type":"text"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"codeVoice","code":"3.2"},{"text":" in the bottom left position","type":"text"},{"text":" ","type":"text"},{"text":"(where ","type":"text"},{"type":"codeVoice","code":"row"},{"type":"text","text":" is "},{"code":"1","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"column"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":"):"}]},{"inlineContent":[{"type":"image","identifier":"subscriptMatrix02"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Matrix"},{"text":" subscript’s getter and setter both contain an assertion","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to check that the subscript’s  "},{"type":"codeVoice","code":"row"},{"type":"text","text":" and "},{"code":"column","type":"codeVoice"},{"type":"text","text":" values are valid."},{"type":"text","text":" "},{"text":"To assist with these assertions,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Matrix"},{"text":" includes a convenience method called ","type":"text"},{"code":"indexIsValid(row:column:)","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which checks whether the requested ","type":"text"},{"code":"row","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"column","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"are inside the bounds of the matrix:"}],"type":"paragraph"},{"code":["func indexIsValid(row: Int, column: Int) -> Bool {","    return row >= 0 && row < rows && column >= 0 && column < columns","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"An assertion is triggered if you try to access a subscript","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that’s outside of the matrix bounds:"}]},{"syntax":"swift","code":["let someValue = matrix[2, 2]","\/\/ This triggers an assert, because [2, 2] is outside of the matrix bounds."],"type":"codeListing"},{"text":"Type Subscripts","anchor":"Type-Subscripts","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instance subscripts, as described above,"},{"text":" ","type":"text"},{"type":"text","text":"are subscripts that you call on an instance of a particular type."},{"text":" ","type":"text"},{"type":"text","text":"You can also define subscripts that are called on the type itself."},{"text":" ","type":"text"},{"type":"text","text":"This kind of subscript is called a "},{"inlineContent":[{"text":"type subscript","type":"text"}],"type":"emphasis"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You indicate a type subscript"},{"text":" ","type":"text"},{"type":"text","text":"by writing the "},{"code":"static","type":"codeVoice"},{"text":" keyword before the ","type":"text"},{"code":"subscript","type":"codeVoice"},{"text":" keyword.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Classes can use the "},{"code":"class","type":"codeVoice"},{"type":"text","text":" keyword instead,"},{"type":"text","text":" "},{"type":"text","text":"to allow subclasses to override the superclass’s implementation of that subscript."},{"type":"text","text":" "},{"text":"The example below shows how you define and call a type subscript:","type":"text"}]},{"code":["enum Planet: Int {","    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune","    static subscript(n: Int) -> Planet {","        return Planet(rawValue: n)!","    }","}","let mars = Planet[4]","print(mars)"],"type":"codeListing","syntax":"swift"}]}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Creating-an-Array-with-a-Default-Value":{"kind":"section","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Creating-an-Array-with-a-Default-Value","title":"Creating an Array with a Default Value","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Creating-an-Array-with-a-Default-Value"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"title":"The Swift Programming Language (5.9)","kind":"article","role":"collection","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","url":"\/documentation\/the-swift-programming-language","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Variadic-Parameters":{"type":"topic","kind":"section","title":"Variadic Parameters","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Variadic-Parameters","url":"\/documentation\/the-swift-programming-language\/functions#Variadic-Parameters","abstract":[]},"subscriptMatrix01":{"identifier":"subscriptMatrix01","variants":[{"traits":["2x","light"],"url":"\/images\/subscriptMatrix01@2x.png"},{"traits":["2x","dark"],"url":"\/images\/subscriptMatrix01~dark@2x.png"}],"type":"image","alt":null},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Default-Parameter-Values":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values","title":"Default Parameter Values","type":"topic","url":"\/documentation\/the-swift-programming-language\/functions#Default-Parameter-Values","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Accessing-and-Modifying-a-Dictionary":{"type":"topic","kind":"section","title":"Accessing and Modifying a Dictionary","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Accessing-and-Modifying-a-Dictionary","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Accessing-and-Modifying-a-Dictionary","abstract":[]},"subscriptMatrix02":{"alt":null,"type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/subscriptMatrix02@2x.png"},{"traits":["2x","dark"],"url":"\/images\/subscriptMatrix02~dark@2x.png"}],"identifier":"subscriptMatrix02"}}}