{"metadata":{"title":"Document Revision History"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2023-09-18","type":"text"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.9."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" and "},{"code":"switch","type":"codeVoice"},{"text":" expressions","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros"},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"text":"with information about generating code at compile time.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Expanded the discussion of optionals in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added an example of concurrency to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about boxed protocol types"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","isActive":true},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"buildPartialBlock(first:)"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"code":"buildPartialBlock(accumulated:next:)","type":"codeVoice"},{"text":" methods","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations","isActive":true,"type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added visionOS to the lists of platforms in","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available","isActive":true},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Formatted the formal grammar to use blank lines for grouping."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2023-03-30","type":"text"}]}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.8."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Deferred-Actions"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"showing "},{"code":"defer","type":"codeVoice"},{"text":" outside of error handling.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Adopted Swift-DocC for publication."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Minor corrections and additions throughout."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2022-09-12","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.7."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency#Sendable-Types","type":"reference","isActive":true},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about sending data between actors and tasks,"},{"type":"text","text":" "},{"type":"text","text":"and added information about the "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" and "},{"code":"@unchecked","type":"codeVoice"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable","type":"reference","isActive":true},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked"},{"type":"text","text":" sections."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"with information about creating a regular expression.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the short form of "},{"code":"if","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"let"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optional-Binding","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about "},{"type":"codeVoice","code":"#unavailable"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Checking-API-Availability","type":"reference"},{"type":"text","text":" section."}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"2022-03-14","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.6."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","type":"reference"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"with information about using ","type":"text"},{"code":"#if","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"around chained method calls and other postfix expressions."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the visual styling of figures throughout.","type":"text"}]}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2021-09-20"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.5.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about asynchronous functions, tasks, and actors"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","isActive":true,"type":"reference"},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"type":"text","text":"and to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","isActive":true},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator","type":"reference","isActive":true},{"type":"text","text":" sections."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers","type":"reference","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"with information about identifiers that start with an underscore.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2021-04-26"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.4."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Result-Builders","type":"reference"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder"},{"text":" sections","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about result builders."}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about how in-out parameters"},{"text":" ","type":"text"},{"type":"text","text":"can be implicitly converted to unsafe pointers in a function call."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Variadic-Parameters"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","isActive":true,"type":"reference"},{"type":"text","text":" sections,"},{"type":"text","text":" "},{"type":"text","text":"now that a function can have multiple variadic parameters."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression","type":"reference","isActive":true},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"text":"now that implicit member expressions can be chained together.","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2020-09-16"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 5.3.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about multiple trailing closures"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Trailing-Closures"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"and added information about how trailing closures are matched to parameters"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression","isActive":true,"type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about synthesized implementations"},{"text":" ","type":"text"},{"text":"of ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" for enumerations"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"now that you can write a generic ","type":"text"},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause in more places."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Unowned-Optional-References","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about using unowned references with optional values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"@main"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added ","type":"text"},{"code":"#filePath","type":"codeVoice"},{"type":"text","text":" to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"and updated the discussion of ","type":"text"},{"type":"codeVoice","code":"#file"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Escaping-Closures","isActive":true,"type":"reference"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that closures can refer to ","type":"text"},{"code":"self","type":"codeVoice"},{"type":"text","text":" implicitly in more scenarios."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Handling-Errors-Using-Do-Catch"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","isActive":true},{"type":"text","text":" sections,"},{"type":"text","text":" "},{"type":"text","text":"now that a "},{"code":"catch","type":"codeVoice"},{"text":" clause can match against multiple errors.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added more information about "},{"type":"codeVoice","code":"Any"},{"text":" ","type":"text"},{"type":"text","text":"and moved it into the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that lazy properties can have observers."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration","type":"reference"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that members of an enumeration can satisfy protocol requirements."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers","type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to describe when the getter is called before the observer."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","isActive":true},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"to mention atomic operations."}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2020-03-24"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.2."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about passing a key path instead of a closure"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about syntactic sugar the lets instances of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"classes, structures, and enumerations be used with function call syntax."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts#Subscript-Options","type":"reference","isActive":true},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that subscripts support parameters with default values.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","type":"reference","isActive":true},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that the ","type":"text"},{"type":"codeVoice","code":"Self"},{"type":"text","text":" can be used in more contexts."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Implicitly-Unwrapped-Optionals","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"to make it clearer that an implicitly unwrapped optional value","type":"text"},{"text":" ","type":"text"},{"text":"can be used as either an optional or non-optional value.","type":"text"}]}]}]},{"inlineContent":[{"inlineContent":[{"text":"2019-09-10","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.1."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about functions"},{"type":"text","text":" "},{"text":"that specify a protocol that their return value conforms to,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"instead of providing a specific named return type,"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","type":"reference"},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"text":"Added information about property wrappers","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers","type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about enumerations and structures","type":"text"},{"type":"text","text":" "},{"text":"that are frozen for library evolution","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-With-an-Implicit-Return","type":"reference"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Shorthand-Getter-Declaration"},{"text":" sections","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about functions that omit "},{"code":"return","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about using subscripts on types"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts#Type-Subscripts","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns#Enumeration-Case-Pattern","isActive":true},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that an enumeration case pattern can match an optional value."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Memberwise-Initializers-for-Structure-Types"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"type":"text","text":"now that memberwise initializers support"},{"text":" ","type":"text"},{"type":"text","text":"omitting parameters for properties that have a default value."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about dynamic members"},{"text":" ","type":"text"},{"text":"that are looked up by key path at runtime","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added "},{"type":"codeVoice","code":"macCatalyst"},{"type":"text","text":" to the list of target environments"},{"type":"text","text":" "},{"type":"text","text":"in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","type":"reference"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"text":"now that ","type":"text"},{"type":"codeVoice","code":"Self"},{"text":" can be used to refer to the type","type":"text"},{"type":"text","text":" "},{"text":"introduced by the current class, structure, or enumeration declaration.","type":"text"}]}]}]},{"inlineContent":[{"inlineContent":[{"text":"2019-03-25","type":"text"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Extended-String-Delimiters","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about extended string delimiters."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"with information about dynamically calling instances as functions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"using the "},{"type":"codeVoice","code":"dynamicCallable"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases"},{"type":"text","text":" sections"},{"text":" ","type":"text"},{"type":"text","text":"with information about handling future enumeration cases"},{"type":"text","text":" "},{"text":"in switch statements using","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"unknown","type":"codeVoice"},{"type":"text","text":" switch case attribute."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the identity key path ("},{"code":"\\.self","type":"codeVoice"},{"text":")","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about using the less than (","type":"text"},{"code":"<","type":"codeVoice"},{"type":"text","text":") operator"},{"text":" ","type":"text"},{"type":"text","text":"in platform conditions to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2018-09-17","type":"text"}]}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 4.2."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about accessing all of an enumeration’s cases"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Iterating-over-Enumeration-Cases","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about "},{"type":"codeVoice","code":"#error"},{"type":"text","text":" and "},{"code":"#warning","type":"codeVoice"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about inlining"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"under the "},{"type":"codeVoice","code":"inlinable"},{"type":"text","text":" and  "},{"type":"codeVoice","code":"usableFromInline"},{"type":"text","text":" attributes."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about members that are looked up by name at runtime","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"under the ","type":"text"},{"type":"codeVoice","code":"dynamicMemberLookup"},{"type":"text","text":" attribute."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"code":"requires_stored_property_inits","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"warn_unqualified_access"},{"text":" attributes","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about how to conditionally compile code"},{"type":"text","text":" "},{"type":"text","text":"depending on the Swift compiler version being used"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about ","type":"text"},{"code":"#dsohandle","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2018-03-29","type":"text"}]}]},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 4.1.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about synthesized implementations of equivalence operators","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Equivalence-Operators","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about conditional protocol conformance"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","type":"reference"},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about recursive protocol constraints","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"canImport()","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"targetEnvironment()"},{"text":" platform conditions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"reference","isActive":true},{"type":"text","text":"."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2017-12-04"}]}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 4.0.3."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","isActive":true,"type":"reference"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that key paths support subscript components."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2017-09-19"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 4.0."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about exclusive access to memory","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","isActive":true,"type":"reference"},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause","type":"reference","isActive":true},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that you can use generic ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" clauses","type":"text"},{"type":"text","text":" "},{"text":"to constrain associated types.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about multiline string literals","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-Literals","type":"reference","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","isActive":true,"type":"reference"},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"type":"text","text":"and to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that this attribute is inferred in fewer places."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts"},{"type":"text","text":" section,"},{"type":"text","text":" "},{"text":"now that subscripts can be generic.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true,"type":"reference"},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","isActive":true},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"text":"now that protocol composition types can contain a superclass requirement.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of protocol extensions","type":"text"},{"type":"text","text":" "},{"text":"in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","isActive":true},{"type":"text","text":" "},{"text":"now that ","type":"text"},{"type":"codeVoice","code":"final"},{"text":" isn’t allowed in them.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about preconditions and fatal errors","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Assertions-and-Preconditions","type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2017-03-27"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 3.1."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about extensions that include requirements."}]}]},{"content":[{"inlineContent":[{"text":"Added examples of iterating over a range","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#For-In-Loops","isActive":true,"type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added an example of failable numeric conversions","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Failable-Initializers"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"about using the ","type":"text"},{"type":"codeVoice","code":"available"},{"type":"text","text":" attribute with a Swift language version."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"to note that argument labels aren’t allowed when writing a function type.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of Swift language version numbers"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"text":"now that an optional patch number is allowed.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","type":"reference"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that Swift distinguishes between functions that take multiple parameters"},{"text":" ","type":"text"},{"type":"text","text":"and functions that take a single parameter of a tuple type."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Removed the Dynamic Type Expression section"},{"text":" ","type":"text"},{"type":"text","text":"from the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","isActive":true},{"type":"text","text":" chapter,"},{"text":" ","type":"text"},{"text":"now that ","type":"text"},{"type":"codeVoice","code":"type(of:)"},{"text":" is a Swift standard library function.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2016-10-27"}],"type":"strong"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 3.0.1."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of weak and unowned references","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","isActive":true},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":", "},{"type":"codeVoice","code":"unowned(safe)"},{"text":", and ","type":"text"},{"code":"unowned(unsafe)","type":"codeVoice"},{"type":"text","text":" "},{"text":"declaration modifiers","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting#Type-Casting-for-Any-and-AnyObject","type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"about using an optional value when a value of type ","type":"text"},{"code":"Any","type":"codeVoice"},{"type":"text","text":" is expected."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","isActive":true,"type":"reference"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"to separate the discussion of parenthesized expressions and tuple expressions.","type":"text"}]}]}]},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2016-09-13"}]}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 3.0.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of functions in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","isActive":true,"type":"reference"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","isActive":true,"type":"reference"},{"type":"text","text":" section to note that"},{"type":"text","text":" "},{"type":"text","text":"all parameters get an argument label by default."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of operators"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","isActive":true},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"text":"now that you implement them as type methods instead of as global functions.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"open"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"fileprivate"},{"type":"text","text":" access-level modifiers"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl"},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of ","type":"text"},{"type":"codeVoice","code":"inout"},{"text":" in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to note that it appears in front of a parameter’s type"},{"text":" ","type":"text"},{"type":"text","text":"instead of in front of a parameter’s name."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"type":"codeVoice","code":"@noescape"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":" attributes"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Escaping-Closures","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures","isActive":true,"type":"reference"},{"type":"text","text":" sections"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"now that they’re type attributes, rather than declaration attributes."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about operator precedence groups"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Precedence-for-Custom-Infix-Operators"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators","type":"reference"},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated discussion throughout"},{"text":" ","type":"text"},{"type":"text","text":"to use macOS instead of OS X,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Error"},{"type":"text","text":" instead of "},{"code":"ErrorProtocol","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and protocol names such as ","type":"text"},{"type":"codeVoice","code":"ExpressibleByStringLiteral"},{"type":"text","text":" "},{"text":"instead of ","type":"text"},{"type":"codeVoice","code":"StringLiteralConvertible"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","type":"reference","isActive":true},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","isActive":true,"type":"reference"},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that generic "},{"code":"where","type":"codeVoice"},{"text":" clauses are written at the end of a declaration.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Escaping-Closures","isActive":true,"type":"reference"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"now that closures are nonescaping by default."}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optional-Binding","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","isActive":true,"type":"reference"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"and the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement","type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements"},{"type":"text","text":" chapter,"},{"type":"text","text":" "},{"type":"text","text":"now that "},{"code":"if","type":"codeVoice"},{"type":"text","text":", "},{"code":"while","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"guard","type":"codeVoice"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"text":"use a comma-separated list of conditions without ","type":"text"},{"code":"where","type":"codeVoice"},{"type":"text","text":" clauses."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about switch cases that have multiple patterns"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Switch","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true,"type":"reference"},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","type":"reference","isActive":true},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of function types","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"now that function argument labels are no longer part of a function’s type."}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of protocol composition types","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"and in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types","isActive":true,"type":"reference"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"to use the new ","type":"text"},{"type":"codeVoice","code":"Protocol1 & Protocol2"},{"type":"text","text":" syntax."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the Dynamic Type Expression section"},{"type":"text","text":" "},{"type":"text","text":"to use the new "},{"type":"codeVoice","code":"type(of:)"},{"text":" syntax for dynamic type expressions.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of line control statements"},{"type":"text","text":" "},{"type":"text","text":"to use the "},{"type":"codeVoice","code":"#sourceLocation(file:line:)"},{"type":"text","text":" syntax"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement","type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"to use the new ","type":"text"},{"code":"Never","type":"codeVoice"},{"type":"text","text":" type."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about playground literals","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression","type":"reference","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#In-Out-Parameters"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to note that only nonescaping closures can capture in-out parameters."}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion about default parameters","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values","isActive":true,"type":"reference"},{"text":" section,","type":"text"},{"text":" ","type":"text"},{"text":"now that they can’t be reordered in function calls.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated attribute arguments to use a colon","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about throwing an error","type":"text"},{"type":"text","text":" "},{"text":"inside the catch block of a rethrowing function","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about accessing the selector"},{"text":" ","type":"text"},{"type":"text","text":"of an Objective-C property’s getter or setter"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added information to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration","type":"reference","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"about generic type aliases and using type aliases inside of protocols."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of function types in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that parentheses around the parameter types are required."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes"},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"type":"text","text":"to note that the "},{"type":"codeVoice","code":"@IBAction"},{"type":"text","text":", "},{"code":"@IBOutlet","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"@NSManaged"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"text":"imply the ","type":"text"},{"type":"codeVoice","code":"@objc"},{"text":" attribute.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"code":"@GKInspectable","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of optional protocol requirements","type":"text"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"to clarify that they’re used only in code that interoperates with Objective-C."}]}]},{"content":[{"inlineContent":[{"text":"Removed the discussion of explicitly using ","type":"text"},{"type":"codeVoice","code":"let"},{"text":" in function parameters","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"from the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed the discussion of the "},{"type":"codeVoice","code":"Boolean"},{"type":"text","text":" protocol"},{"text":" ","type":"text"},{"type":"text","text":"from the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","type":"reference"},{"text":" chapter,","type":"text"},{"text":" ","type":"text"},{"text":"now that the protocol has been removed from the Swift standard library.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Corrected the discussion of the ","type":"text"},{"type":"codeVoice","code":"@NSApplicationMain"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section."}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2016-03-21","type":"text"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 2.2.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about how to conditionally compile code"},{"text":" ","type":"text"},{"type":"text","text":"depending on the version of Swift being used"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about how to distinguish","type":"text"},{"text":" ","type":"text"},{"text":"between methods or initializers whose names differ","type":"text"},{"type":"text","text":" "},{"text":"only by the names of their arguments","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"code":"#selector","type":"codeVoice"},{"text":" syntax","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for Objective-C selectors"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of associated types"},{"text":" ","type":"text"},{"type":"text","text":"to use the "},{"type":"codeVoice","code":"associatedtype"},{"text":" keyword","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration"},{"text":" sections.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated information about initializers that return "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"before the instance is fully initialized"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Failable-Initializers","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about comparing tuples","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Comparison-Operators","type":"reference","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about using keywords as external parameter names","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"code":"@objc","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","type":"reference"},{"type":"text","text":" section to note that"},{"type":"text","text":" "},{"text":"enumerations and enumeration cases can use this attribute.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Operators"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with discussion of custom operators that contain a dot.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"that rethrowing functions can’t directly throw errors."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"about property observers being called"},{"text":" ","type":"text"},{"text":"when you pass a property as an in-out parameter.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added a section about error handling","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","isActive":true,"type":"reference"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated figures in the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Weak-References"},{"type":"text","text":" "},{"type":"text","text":"section to show the deallocation process more clearly."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed discussion of C-style "},{"type":"codeVoice","code":"for"},{"type":"text","text":" loops,"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"++"},{"type":"text","text":" prefix and postfix operators,"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"code":"--","type":"codeVoice"},{"type":"text","text":" prefix and postfix operators."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Removed discussion of variable function arguments"},{"type":"text","text":" "},{"type":"text","text":"and the special syntax for curried functions."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2015-10-20"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 2.1."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-Interpolation","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},{"text":" sections","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now that string interpolations can contain string literals."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Escaping-Closures","type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"with information about the ","type":"text"},{"type":"codeVoice","code":"@noescape"},{"text":" attribute.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","isActive":true},{"type":"text","text":" sections"},{"text":" ","type":"text"},{"type":"text","text":"with information about tvOS."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the behavior of in-out parameters"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#In-Out-Parameters","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Capture-Lists","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"about how values specified in closure capture lists are captured.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","isActive":true},{"type":"text","text":" "},{"type":"text","text":"section to clarify how assignment through optional chaining"},{"type":"text","text":" "},{"text":"behaves.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Improved the discussion of autoclosures"},{"type":"text","text":" "},{"type":"text","text":"in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example that uses the "},{"type":"codeVoice","code":"??"},{"text":" operator","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour"},{"type":"text","text":" chapter."}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"2015-09-16"}],"type":"strong"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 2.0.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about error handling"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","type":"reference"},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement","type":"reference"},{"type":"text","text":" section,"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement","type":"reference","isActive":true},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator","type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Representing-and-Throwing-Errors"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that all types can conform to the ","type":"text"},{"type":"codeVoice","code":"ErrorType"},{"type":"text","text":" protocol."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the new "},{"type":"codeVoice","code":"try?"},{"type":"text","text":" keyword"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Converting-Errors-to-Optional-Values","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about recursive enumerations"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Recursive-Enumerations"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","isActive":true,"type":"reference"},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","type":"reference","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about API availability checking"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Checking-API-Availability","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","isActive":true},{"text":" chapter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition"},{"text":" section","type":"text"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","isActive":true},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about the new ","type":"text"},{"code":"guard","type":"codeVoice"},{"text":" statement","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Early-Exit","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","type":"reference","isActive":true},{"type":"text","text":" chapter"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement","type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","isActive":true,"type":"reference"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about protocol extensions","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about access control for unit testing"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl#Access-Levels-for-Unit-Test-Targets"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","isActive":true},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the new optional pattern","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns#Optional-Pattern","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"of the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns"},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Repeat-While","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"with information about the ","type":"text"},{"code":"repeat","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"while"},{"type":"text","text":" loop."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","isActive":true,"type":"reference"},{"text":" chapter,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that "},{"type":"codeVoice","code":"String"},{"type":"text","text":" no longer conforms"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"code":"CollectionType","type":"codeVoice"},{"type":"text","text":" protocol from the Swift standard library."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the new Swift standard library"},{"text":" ","type":"text"},{"type":"codeVoice","code":"print(_:separator:terminator)"},{"text":" function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Printing-Constants-and-Variables","type":"reference","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about the behavior","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of enumeration cases with "},{"code":"String","type":"codeVoice"},{"text":" raw values","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Implicitly-Assigned-Raw-Values"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations"},{"text":" chapter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"@autoclosure"},{"text":" attribute —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including its "},{"code":"@autoclosure(escaping)","type":"codeVoice"},{"text":" form —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"with information about the ","type":"text"},{"type":"codeVoice","code":"@available"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"@warn_unused_result"},{"type":"text","text":" attributes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about the "},{"type":"codeVoice","code":"@convention"},{"text":" attribute.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added an example of using multiple optional bindings","type":"text"},{"type":"text","text":" "},{"text":"with a ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clause","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optional-Binding","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"about how concatenating string literals using the ","type":"text"},{"code":"+","type":"codeVoice"},{"type":"text","text":" operator"},{"type":"text","text":" "},{"text":"happens at compile time.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"about comparing metatype values and using them"},{"text":" ","type":"text"},{"text":"to construct instances with initializer expressions.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added a note to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Debugging-with-Assertions","isActive":true,"type":"reference"},{"text":" section","type":"text"},{"type":"text","text":" "},{"type":"text","text":"about when user-defined assertions are disabled."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of the ","type":"text"},{"code":"@NSManaged","type":"codeVoice"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"text":"in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"text":" section,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"now that the attribute can be applied to certain instance methods."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Variadic-Parameters"},{"text":" section,","type":"text"},{"type":"text","text":" "},{"text":"now that variadic parameters can be declared in any position","type":"text"},{"text":" ","type":"text"},{"text":"in a function’s parameter list.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Overriding-a-Failable-Initializer","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"about how a nonfailable initializer can delegate"},{"text":" ","type":"text"},{"text":"up to a failable initializer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by force-unwrapping the result of the superclass’s initializer."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about using enumeration cases as functions"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about explicitly referencing an initializer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about build configuration"},{"text":" ","type":"text"},{"type":"text","text":"and line control statements"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements","isActive":true,"type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type","type":"reference","isActive":true},{"type":"text","text":" section"},{"text":" ","type":"text"},{"type":"text","text":"about constructing class instances from metatype values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Weak-References"},{"type":"text","text":" "},{"text":"section about weak references being unsuitable for caching.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated a note in the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","isActive":true},{"text":" section","type":"text"},{"type":"text","text":" "},{"text":"to mention that stored type properties are lazily initialized.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Capturing-Values","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to clarify how variables and constants are captured in closures."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to describe when you can apply the "},{"code":"@objc","type":"codeVoice"},{"type":"text","text":" attribute to classes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Handling-Errors"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"about the performance of executing a ","type":"text"},{"code":"throw","type":"codeVoice"},{"text":" statement.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Added similar information about the "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"type":"text","text":"in the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"with information about stored and computed type properties","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for classes, structures, and enumerations."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","isActive":true,"type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"with information about labeled break statements."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated a note in the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","type":"reference","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"text":"to clarify the behavior of ","type":"text"},{"code":"willSet","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observers."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added a note to the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl#Access-Levels","type":"reference","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with information about the scope of "},{"code":"private","type":"codeVoice"},{"type":"text","text":" access."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Weak-References","type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"section about the differences in weak references","type":"text"},{"type":"text","text":" "},{"type":"text","text":"between garbage collected systems and ARC."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Special-Characters-in-String-Literals","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with a more precise definition of Unicode scalars."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"2015-04-08","type":"text"}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 1.2."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift now has a native "},{"code":"Set","type":"codeVoice"},{"text":" collection type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":" is now an attribute of the parameter declaration,"},{"type":"text","text":" "},{"text":"not its type.","type":"text"},{"type":"text","text":" "},{"text":"There’s also a new ","type":"text"},{"type":"codeVoice","code":"@noescape"},{"type":"text","text":" parameter declaration attribute."},{"text":" ","type":"text"},{"type":"text","text":"For more information, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Type methods and properties now use the "},{"type":"codeVoice","code":"static"},{"text":" keyword","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as a declaration modifier."},{"text":" ","type":"text"},{"type":"text","text":"For more information see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift now includes the ","type":"text"},{"type":"codeVoice","code":"as?"},{"type":"text","text":" and "},{"code":"as!","type":"codeVoice"},{"text":" failable downcast operators.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For more information,"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added a new guide section about","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-Indices"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Removed the overflow division (","type":"text"},{"type":"codeVoice","code":"&\/"},{"type":"text","text":") and"},{"type":"text","text":" "},{"type":"text","text":"overflow remainder ("},{"type":"codeVoice","code":"&%"},{"type":"text","text":") operators"},{"type":"text","text":" "},{"type":"text","text":"from "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Overflow-Operators"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the rules for constant and","type":"text"},{"text":" ","type":"text"},{"text":"constant property declaration and initialization.","type":"text"},{"text":" ","type":"text"},{"text":"For more information, see ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the definition of Unicode scalars in string literals.","type":"text"},{"type":"text","text":" "},{"text":"See ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Special-Characters-in-String-Literals","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Range-Operators","type":"reference"},{"text":" to note that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a half-open range with the same start and end index will be empty."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Closures-Are-Reference-Types"},{"text":" to clarify","type":"text"},{"type":"text","text":" "},{"text":"the capturing rules for variables.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Value-Overflow","isActive":true},{"type":"text","text":" to clarify"},{"type":"text","text":" "},{"text":"the overflow behavior of signed and unsigned integers","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration","type":"reference","isActive":true},{"text":" to clarify","type":"text"},{"text":" ","type":"text"},{"text":"protocol declaration scope and members.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Defining-a-Capture-List"},{"type":"text","text":" "},{"type":"text","text":"to clarify the syntax for"},{"type":"text","text":" "},{"type":"text","text":"weak and unowned references in closure capture lists."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Operators"},{"text":" to explicitly mention","type":"text"},{"text":" ","type":"text"},{"text":"examples of supported characters for custom operators,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such as those in the Mathematical Operators, Miscellaneous Symbols,"},{"type":"text","text":" "},{"type":"text","text":"and Dingbats Unicode blocks."}]}]},{"content":[{"inlineContent":[{"text":"Constants can now be declared without being initialized","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in local function scope."},{"type":"text","text":" "},{"text":"They must have a set value before first use.","type":"text"},{"type":"text","text":" "},{"text":"For more information, see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"In an initializer, constant properties can now only assign a value once.","type":"text"},{"text":" ","type":"text"},{"text":"For more information,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Assigning-Constant-Properties-During-Initialization","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiple optional bindings can now appear in a single "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement"},{"text":" ","type":"text"},{"type":"text","text":"as a comma-separated list of assignment expressions."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optional-Binding","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression","isActive":true},{"type":"text","text":" "},{"type":"text","text":"must appear within a postfix expression."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Protocol casts are no longer limited to ","type":"text"},{"type":"codeVoice","code":"@objc"},{"text":" protocols.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Type casts that can fail at runtime","type":"text"},{"type":"text","text":" "},{"text":"now use the ","type":"text"},{"code":"as?","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"as!"},{"type":"text","text":" operator,"},{"text":" ","type":"text"},{"type":"text","text":"and type casts that are guaranteed not to fail use the "},{"code":"as","type":"codeVoice"},{"type":"text","text":" operator."},{"type":"text","text":" "},{"type":"text","text":"For more information, see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2014-10-16","type":"text"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 1.1.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a full guide to ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Failable-Initializers","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a description of "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"for protocols."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Constants and variables of type "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" can now contain"},{"text":" ","type":"text"},{"type":"text","text":"function instances. Updated the example in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting#Type-Casting-for-Any-and-AnyObject","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"to show how to check for and cast to a function type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"within a "},{"code":"switch","type":"codeVoice"},{"text":" statement.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Enumerations with raw values"},{"text":" ","type":"text"},{"text":"now have a ","type":"text"},{"code":"rawValue","type":"codeVoice"},{"type":"text","text":" property rather than a "},{"code":"toRaw()","type":"codeVoice"},{"type":"text","text":" method"},{"type":"text","text":" "},{"text":"and a failable initializer with a ","type":"text"},{"type":"codeVoice","code":"rawValue"},{"text":" parameter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"rather than a "},{"type":"codeVoice","code":"fromRaw()"},{"type":"text","text":" method."},{"text":" ","type":"text"},{"type":"text","text":"For more information, see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Raw-Values","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Added a new reference section about","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Failable-Initializers","isActive":true,"type":"reference"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which can trigger initialization failure."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Custom operators can now contain the "},{"type":"codeVoice","code":"?"},{"text":" character.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Operators"},{"text":" reference to describe","type":"text"},{"type":"text","text":" "},{"text":"the revised rules.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Removed a duplicate description of the valid set of operator characters"},{"text":" ","type":"text"},{"text":"from ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Custom-Operators","isActive":true},{"text":".","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"2014-08-18","type":"text"}],"type":"strong"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"New document that describes Swift 1.0,"},{"type":"text","text":" "},{"type":"text","text":"Apple’s new programming language for building iOS and OS X apps."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements"},{"type":"text","text":" in protocols."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new section about "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Assertions-and-Preconditions"},{"text":" can now use string interpolation.","type":"text"},{"text":" ","type":"text"},{"text":"Removed a note to the contrary.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Concatenating-Strings-and-Characters","isActive":true},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to reflect the fact that "},{"code":"String","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values"},{"type":"text","text":" "},{"type":"text","text":"can no longer be combined with the addition operator ("},{"code":"+","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"or addition assignment operator (","type":"text"},{"code":"+=","type":"codeVoice"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"These operators are now used only with "},{"code":"String","type":"codeVoice"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"Use the "},{"code":"String","type":"codeVoice"},{"type":"text","text":" type’s "},{"code":"append(_:)","type":"codeVoice"},{"text":" method","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to append a single "},{"code":"Character","type":"codeVoice"},{"type":"text","text":" value onto the end of a string."}]}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"availability"},{"text":" attribute to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optionals","isActive":true,"type":"reference"},{"type":"text","text":" no longer implicitly evaluate to"},{"text":" ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":" when they have a value and "},{"type":"codeVoice","code":"false"},{"type":"text","text":" when they do not,"},{"type":"text","text":" "},{"text":"to avoid confusion when working with optional ","type":"text"},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" values."},{"type":"text","text":" "},{"type":"text","text":"Instead, make an explicit check against "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"type":"codeVoice","code":"=="},{"type":"text","text":" or "},{"code":"!=","type":"codeVoice"},{"type":"text","text":" operators"},{"text":" ","type":"text"},{"type":"text","text":"to find out if an optional contains a value."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Swift now has a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Nil-Coalescing-Operator"},{"text":" ","type":"text"},{"text":"(","type":"text"},{"type":"codeVoice","code":"a ?? b"},{"type":"text","text":"), which unwraps an optional’s value if it exists,"},{"text":" ","type":"text"},{"text":"or returns a default value if the optional is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated and expanded","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Comparing-Strings","type":"reference"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"to reflect and demonstrate that string and character comparison","type":"text"},{"text":" ","type":"text"},{"text":"and prefix \/ suffix comparison are now based on","type":"text"},{"text":" ","type":"text"},{"text":"Unicode canonical equivalence of extended grapheme clusters.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"You can now try to set a property’s value, assign to a subscript,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or call a mutating method or operator through"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","isActive":true,"type":"reference"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The information about"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"has been updated accordingly,"},{"text":" ","type":"text"},{"type":"text","text":"and the examples of checking for method call success in"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining","isActive":true},{"text":" ","type":"text"},{"text":"have been expanded to show how to check for property setting success.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new section about","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"through optional chaining."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Accessing-and-Modifying-an-Array","type":"reference","isActive":true},{"text":" section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to note that you can no longer append a single item to an array"},{"text":" ","type":"text"},{"type":"text","text":"with the "},{"code":"+=","type":"codeVoice"},{"text":" operator.","type":"text"},{"text":" ","type":"text"},{"text":"Instead, use the ","type":"text"},{"code":"append(_:)","type":"codeVoice"},{"text":" method,","type":"text"},{"type":"text","text":" "},{"text":"or append a single-item array with the ","type":"text"},{"type":"codeVoice","code":"+="},{"type":"text","text":" operator."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note that the start value "},{"code":"a","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"for the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Range-Operators","isActive":true},{"type":"text","text":" "},{"type":"codeVoice","code":"a...b"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"a..<b"},{"type":"text","text":" "},{"type":"text","text":"must not be greater than the end value "},{"code":"b","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Rewrote the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"type":"text","text":"to remove its introductory coverage of initializer overrides."},{"type":"text","text":" "},{"text":"This chapter now focuses more on the addition of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"new functionality in a subclass,"},{"type":"text","text":" "},{"text":"and the modification of existing functionality with overrides.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The chapter’s example of"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance#Overriding-Property-Getters-and-Setters","isActive":true},{"type":"text","text":" "},{"type":"text","text":"has been rewritten to show how to override a "},{"code":"description","type":"codeVoice"},{"type":"text","text":" property."},{"text":" ","type":"text"},{"type":"text","text":"(The examples of modifying an inherited property’s default value"},{"text":" ","type":"text"},{"text":"in a subclass initializer have been moved to","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","isActive":true,"type":"reference"},{"text":" chapter.)","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Inheritance-and-Overriding"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that overrides of a designated initializer"},{"type":"text","text":" "},{"type":"text","text":"must now be marked with the "},{"code":"override","type":"codeVoice"},{"type":"text","text":" modifier."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Required-Initializers","type":"reference"},{"type":"text","text":" section"},{"type":"text","text":" "},{"type":"text","text":"to note that the "},{"type":"codeVoice","code":"required"},{"type":"text","text":" modifier is now written before"},{"type":"text","text":" "},{"type":"text","text":"every subclass implementation of a required initializer,"},{"type":"text","text":" "},{"text":"and that the requirements for required initializers","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can now be satisfied by automatically inherited initializers."}]}]},{"content":[{"inlineContent":[{"text":"Infix ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Operator-Methods"},{"text":" no longer require","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"@infix","type":"codeVoice"},{"text":" attribute.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@prefix"},{"type":"text","text":" and "},{"code":"@postfix","type":"codeVoice"},{"type":"text","text":" attributes"},{"text":" ","type":"text"},{"text":"for ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Prefix-and-Postfix-Operators"},{"type":"text","text":" "},{"text":"have been replaced by ","type":"text"},{"code":"prefix","type":"codeVoice"},{"type":"text","text":" and "},{"code":"postfix","type":"codeVoice"},{"type":"text","text":" declaration modifiers."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note about the order in which"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Prefix-and-Postfix-Operators","isActive":true,"type":"reference"},{"type":"text","text":" are applied"},{"type":"text","text":" "},{"type":"text","text":"when both a prefix and a postfix operator are applied to"},{"text":" ","type":"text"},{"type":"text","text":"the same operand."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Operator functions for"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Compound-Assignment-Operators"},{"type":"text","text":" no longer use"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"@assignment","type":"codeVoice"},{"type":"text","text":" attribute when defining the function."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The order in which modifiers are specified when defining"},{"text":" ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Custom-Operators","isActive":true,"type":"reference"},{"type":"text","text":" has changed."},{"text":" ","type":"text"},{"type":"text","text":"You now write "},{"type":"codeVoice","code":"prefix operator"},{"text":" rather than ","type":"text"},{"type":"codeVoice","code":"operator prefix"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"for example.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"dynamic"},{"type":"text","text":" declaration modifier"},{"text":" ","type":"text"},{"text":"in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about how type inference works"},{"type":"text","text":" "},{"text":"with ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added more information about curried functions.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new chapter about "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","type":"reference"},{"type":"text","text":" chapter"},{"type":"text","text":" "},{"text":"to reflect the fact that Swift’s ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" type now represents","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a single Unicode extended grapheme cluster."},{"text":" ","type":"text"},{"type":"text","text":"Includes a new section on"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Extended-Grapheme-Clusters","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"and more information about"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Unicode-Scalar-Values","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Comparing-Strings"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-Literals"},{"type":"text","text":" section"},{"text":" ","type":"text"},{"text":"to note that Unicode scalars inside string literals","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are now written as "},{"type":"codeVoice","code":"\\u{n}"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"where "},{"type":"codeVoice","code":"n"},{"text":" is a hexadecimal number between 0 and 10FFFF,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the range of Unicode’s codespace."}]}]},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"NSString","type":"codeVoice"},{"type":"text","text":" "},{"code":"length","type":"codeVoice"},{"type":"text","text":" property is now mapped onto"},{"text":" ","type":"text"},{"text":"Swift’s native ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" type as "},{"code":"utf16Count","type":"codeVoice"},{"type":"text","text":", not "},{"type":"codeVoice","code":"utf16count"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s native "},{"code":"String","type":"codeVoice"},{"type":"text","text":" type no longer has"},{"text":" ","type":"text"},{"type":"text","text":"an "},{"type":"codeVoice","code":"uppercaseString"},{"text":" or ","type":"text"},{"code":"lowercaseString","type":"codeVoice"},{"type":"text","text":" property."},{"text":" ","type":"text"},{"text":"The corresponding section in","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters"},{"text":" ","type":"text"},{"type":"text","text":"has been removed, and various code examples have been updated."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new section about","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Parameters-Without-Argument-Labels"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Required-Initializers"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new section about ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Optional-Tuple-Return-Types","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Type-Annotations","type":"reference","isActive":true},{"text":" section to note that","type":"text"},{"text":" ","type":"text"},{"text":"multiple related variables can be defined on a single line","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with one type annotation."}]}]},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"@optional"},{"type":"text","text":", "},{"code":"@lazy","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"@final"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"@required"},{"text":" attributes","type":"text"},{"text":" ","type":"text"},{"text":"are now the ","type":"text"},{"type":"codeVoice","code":"optional"},{"type":"text","text":", "},{"code":"lazy","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"final"},{"type":"text","text":", and "},{"type":"codeVoice","code":"required"},{"type":"text","text":" "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the entire book to refer to "},{"type":"codeVoice","code":"..<"},{"type":"text","text":" as"},{"type":"text","text":" "},{"type":"text","text":"the "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Half-Open-Range-Operator","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"(rather than the “half-closed range operator”)."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Accessing-and-Modifying-a-Dictionary","isActive":true},{"type":"text","text":" "},{"type":"text","text":"section to note that "},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" now has"},{"type":"text","text":" "},{"type":"text","text":"a Boolean "},{"type":"codeVoice","code":"isEmpty"},{"type":"text","text":" property."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Clarified the full list of characters that can be used"},{"text":" ","type":"text"},{"type":"text","text":"when defining "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Custom-Operators","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"nil"},{"type":"text","text":" and the Booleans "},{"code":"true","type":"codeVoice"},{"type":"text","text":" and "},{"code":"false","type":"codeVoice"},{"type":"text","text":" are now "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Swift’s "},{"code":"Array","type":"codeVoice"},{"text":" type now has full value semantics.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Updated the information about "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Mutability-of-Collections"},{"type":"text","text":" "},{"type":"text","text":"and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Arrays"},{"type":"text","text":" to reflect the new approach."},{"text":" ","type":"text"},{"type":"text","text":"Also clarified the assignment and copy behavior for strings arrays and dictionaries."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Array-Type-Shorthand-Syntax"},{"type":"text","text":" is now written as"},{"text":" ","type":"text"},{"code":"[SomeType]","type":"codeVoice"},{"text":" rather than ","type":"text"},{"code":"SomeType[]","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Added a new section about ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Dictionary-Type-Shorthand-Syntax","type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which is written as "},{"type":"codeVoice","code":"[KeyType: ValueType]"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new section about "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Hash-Values-for-Set-Types","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Examples of "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Closure-Expressions","type":"reference"},{"text":" now use","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the global "},{"code":"sorted(_:_:)","type":"codeVoice"},{"type":"text","text":" function"},{"text":" ","type":"text"},{"text":"rather than the global ","type":"text"},{"code":"sort(_:_:)","type":"codeVoice"},{"type":"text","text":" function,"},{"type":"text","text":" "},{"text":"to reflect the new array value semantics.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the information about "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Memberwise-Initializers-for-Structure-Types"},{"text":" ","type":"text"},{"type":"text","text":"to clarify that the memberwise structure initializer is made available"},{"type":"text","text":" "},{"type":"text","text":"even if a structure’s stored properties don’t have default values."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated to "},{"code":"..<","type":"codeVoice"},{"type":"text","text":" rather than "},{"code":"..","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"for the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Half-Open-Range-Operator"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added an example of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type"},{"type":"text","text":"."}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/RevisionHistory","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Review the recent changes to this book."}],"sections":[],"kind":"article","references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#For-In-Loops":{"kind":"section","title":"For-In Loops","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#For-In-Loops","url":"\/documentation\/the-swift-programming-language\/controlflow#For-In-Loops","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Overflow-Operators":{"kind":"section","type":"topic","abstract":[],"title":"Overflow Operators","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Overflow-Operators","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Overflow-Operators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Associated-Type-Declaration":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Associated-Type-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Associated-Type-Declaration","kind":"section","abstract":[],"type":"topic","title":"Protocol Associated Type Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Initializer-Expression":{"url":"\/documentation\/the-swift-programming-language\/expressions#Initializer-Expression","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Initializer-Expression","title":"Initializer Expression","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#String-Literals":{"title":"String Literals","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#String-Literals","type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#String-Literals","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Conversion-to-a-Pointer-Type":{"url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Conversion-to-a-Pointer-Type","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Conversion-to-a-Pointer-Type","title":"Implicit Conversion to a Pointer Type","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Extension-Declaration":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Extension-Declaration","abstract":[],"title":"Extension Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Extension-Declaration","type":"topic","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency#Sendable-Types":{"title":"Sendable Types","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency#Sendable-Types","type":"topic","url":"\/documentation\/the-swift-programming-language\/concurrency#Sendable-Types","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators#Half-Open-Range-Operator":{"url":"\/documentation\/the-swift-programming-language\/basicoperators#Half-Open-Range-Operator","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Half-Open-Range-Operator","title":"Half-Open Range Operator","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-Any-Type":{"title":"Enumerations with Cases of Any Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-Any-Type","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-Any-Type","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Constant-Declaration":{"url":"\/documentation\/the-swift-programming-language\/declarations#Constant-Declaration","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Constant-Declaration","title":"Constant Declaration","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Operators":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Operators","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Operators","kind":"section","title":"Operators","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Optional-Chaining-Expression":{"title":"Optional-Chaining Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Optional-Chaining-Expression","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Optional-Chaining-Expression","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Protocol-Declaration":{"url":"\/documentation\/the-swift-programming-language\/declarations#Protocol-Declaration","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Protocol-Declaration","title":"Protocol Declaration","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Failable-Initializers":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Failable-Initializers","url":"\/documentation\/the-swift-programming-language\/declarations#Failable-Initializers","kind":"section","title":"Failable Initializers","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Functions-that-Never-Return":{"type":"topic","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Functions-that-Never-Return","abstract":[],"title":"Functions that Never Return","url":"\/documentation\/the-swift-programming-language\/declarations#Functions-that-Never-Return"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#In-Out-Parameters":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#In-Out-Parameters","title":"In-Out Parameters","url":"\/documentation\/the-swift-programming-language\/declarations#In-Out-Parameters","kind":"section","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Function-Declaration":{"url":"\/documentation\/the-swift-programming-language\/declarations#Function-Declaration","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Function-Declaration","kind":"section","abstract":[],"title":"Function Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators#Range-Operators":{"type":"topic","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Range-Operators","abstract":[],"title":"Range Operators","url":"\/documentation\/the-swift-programming-language\/basicoperators#Range-Operators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Arrays":{"kind":"section","type":"topic","abstract":[],"title":"Arrays","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Arrays","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Arrays"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Conditional-Compilation-Block":{"title":"Conditional Compilation Block","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Conditional-Compilation-Block","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Conditional-Compilation-Block","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl#Access-Levels-for-Unit-Test-Targets":{"url":"\/documentation\/the-swift-programming-language\/accesscontrol#Access-Levels-for-Unit-Test-Targets","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl#Access-Levels-for-Unit-Test-Targets","title":"Access Levels for Unit Test Targets","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns":{"url":"\/documentation\/the-swift-programming-language\/patterns","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns","abstract":[{"text":"Match and destructure values.","type":"text"}],"kind":"article","role":"article","type":"topic","title":"Patterns"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TypeCasting#Type-Casting-for-Any-and-AnyObject":{"title":"Type Casting for Any and AnyObject","url":"\/documentation\/the-swift-programming-language\/typecasting#Type-Casting-for-Any-and-AnyObject","kind":"section","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TypeCasting#Type-Casting-for-Any-and-AnyObject","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Try-Operator":{"title":"Try Operator","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Try-Operator","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Try-Operator","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Required-Initializers":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Required-Initializers","title":"Required Initializers","url":"\/documentation\/the-swift-programming-language\/initialization#Required-Initializers","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types","url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types","kind":"section","abstract":[],"type":"topic","title":"Associated Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Closure-Expressions":{"url":"\/documentation\/the-swift-programming-language\/closures#Closure-Expressions","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Closure-Expressions","title":"Closure Expressions","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations":{"abstract":[{"text":"Model custom types that define a list of possible values.","type":"text"}],"title":"Enumerations","type":"topic","kind":"article","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations","url":"\/documentation\/the-swift-programming-language\/enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Calling-Methods-Through-Optional-Chaining":{"title":"Calling Methods Through Optional Chaining","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Calling-Methods-Through-Optional-Chaining","type":"topic","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Calling-Methods-Through-Optional-Chaining","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compile-Time-Diagnostic-Statement":{"url":"\/documentation\/the-swift-programming-language\/statements#Compile-Time-Diagnostic-Statement","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compile-Time-Diagnostic-Statement","title":"Compile-Time Diagnostic Statement","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Repeat-While":{"title":"Repeat-While","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Repeat-While","type":"topic","url":"\/documentation\/the-swift-programming-language\/controlflow#Repeat-While","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Conditionally-Conforming-to-a-Protocol":{"url":"\/documentation\/the-swift-programming-language\/protocols#Conditionally-Conforming-to-a-Protocol","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Conditionally-Conforming-to-a-Protocol","title":"Conditionally Conforming to a Protocol","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Declaration-Attributes":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Declaration-Attributes","url":"\/documentation\/the-swift-programming-language\/attributes#Declaration-Attributes","kind":"section","title":"Declaration Attributes","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Sets":{"title":"Sets","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Sets","type":"topic","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Sets","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Line-Control-Statement":{"url":"\/documentation\/the-swift-programming-language\/statements#Line-Control-Statement","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Line-Control-Statement","title":"Line Control Statement","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#String-Interpolation":{"title":"String Interpolation","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-Interpolation","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters#String-Interpolation","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Literals":{"url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Literals","abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Literals","title":"Literals","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#Comparing-Strings":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters#Comparing-Strings","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Comparing-Strings","title":"Comparing Strings","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols":{"abstract":[{"text":"Define requirements that conforming types must implement.","type":"text"}],"title":"Protocols","type":"topic","kind":"article","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols","url":"\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Composition":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Composition","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Composition","kind":"section","abstract":[],"type":"topic","title":"Protocol Composition"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"kind":"article","abstract":[{"type":"text","text":"Write code that works for multiple types and specify requirements for those types."}],"url":"\/documentation\/the-swift-programming-language\/generics","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","title":"Generics","type":"topic","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Self-Type":{"title":"Self Type","url":"\/documentation\/the-swift-programming-language\/types#Self-Type","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Self-Type","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Optionals":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optionals","abstract":[],"title":"Optionals","url":"\/documentation\/the-swift-programming-language\/thebasics#Optionals","type":"topic","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Identifiers":{"type":"topic","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Identifiers","abstract":[],"title":"Identifiers","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Identifiers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Type-Casting-Operators":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Type-Casting-Operators","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Type-Casting-Operators","title":"Type-Casting Operators","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Declaration-Modifiers":{"title":"Declaration Modifiers","url":"\/documentation\/the-swift-programming-language\/declarations#Declaration-Modifiers","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Declaration-Modifiers","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#While-Statement":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#While-Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#While-Statement","title":"While Statement","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Array-Type-Shorthand-Syntax":{"title":"Array Type Shorthand Syntax","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Array-Type-Shorthand-Syntax","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Array-Type-Shorthand-Syntax","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Selector-Expression":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Selector-Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Selector-Expression","title":"Selector Expression","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#Unicode-Scalar-Values":{"title":"Unicode Scalar Values","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters#Unicode-Scalar-Values","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Unicode-Scalar-Values","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Actor-Declaration":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Actor-Declaration","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Actor-Declaration","title":"Actor Declaration","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types":{"abstract":[{"text":"Use built-in named and compound types.","type":"text"}],"title":"Types","type":"topic","kind":"article","role":"article","url":"\/documentation\/the-swift-programming-language\/types","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Asynchronous-Functions-and-Methods":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Asynchronous-Functions-and-Methods","url":"\/documentation\/the-swift-programming-language\/declarations#Asynchronous-Functions-and-Methods","kind":"section","title":"Asynchronous Functions and Methods","type":"topic","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators#Comparison-Operators":{"type":"topic","kind":"section","url":"\/documentation\/the-swift-programming-language\/basicoperators#Comparison-Operators","title":"Comparison Operators","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Comparison-Operators","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Wrappers":{"title":"Property Wrappers","url":"\/documentation\/the-swift-programming-language\/properties#Property-Wrappers","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Wrappers","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Checking-for-Protocol-Conformance":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Checking-for-Protocol-Conformance","url":"\/documentation\/the-swift-programming-language\/protocols#Checking-for-Protocol-Conformance","kind":"section","abstract":[],"type":"topic","title":"Checking for Protocol Conformance"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics":{"kind":"article","role":"article","url":"\/documentation\/the-swift-programming-language\/thebasics","title":"The Basics","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics","abstract":[{"text":"Work with common kinds of data and write basic syntax.","type":"text"}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns#Optional-Pattern":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/patterns#Optional-Pattern","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns#Optional-Pattern","title":"Optional Pattern","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#available":{"title":"available","url":"\/documentation\/the-swift-programming-language\/attributes#available","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#available","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Alias-Declaration":{"url":"\/documentation\/the-swift-programming-language\/declarations#Type-Alias-Declaration","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Alias-Declaration","kind":"section","abstract":[],"title":"Type Alias Declaration"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Result-Transformations":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#Result-Transformations","title":"Result Transformations","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Result-Transformations","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions":{"kind":"article","role":"article","url":"\/documentation\/the-swift-programming-language\/functions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions","title":"Functions","abstract":[{"text":"Define and call functions, label their arguments, and use their return values.","type":"text"}],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Initializer-Requirements":{"title":"Initializer Requirements","url":"\/documentation\/the-swift-programming-language\/protocols#Initializer-Requirements","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Initializer-Requirements","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Type-Attributes":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#Type-Attributes","title":"Type Attributes","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Type-Attributes","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Printing-Constants-and-Variables":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Printing-Constants-and-Variables","url":"\/documentation\/the-swift-programming-language\/thebasics#Printing-Constants-and-Variables","title":"Printing Constants and Variables"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations#Iterating-over-Enumeration-Cases":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/enumerations#Iterating-over-Enumeration-Cases","title":"Iterating over Enumeration Cases","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Iterating-over-Enumeration-Cases","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unknown":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unknown","url":"\/documentation\/the-swift-programming-language\/attributes#unknown","title":"unknown"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Prefix-and-Postfix-Operators":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Prefix-and-Postfix-Operators","title":"Prefix and Postfix Operators","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Prefix-and-Postfix-Operators","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Variadic-Parameters":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Variadic-Parameters","abstract":[],"title":"Variadic Parameters","url":"\/documentation\/the-swift-programming-language\/functions#Variadic-Parameters","type":"topic","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#String-Literals":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-Literals","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters#String-Literals","title":"String Literals"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Implicit-Member-Expression":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Implicit-Member-Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Implicit-Member-Expression","kind":"section","abstract":[],"type":"topic","title":"Implicit Member Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#Concatenating-Strings-and-Characters":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters#Concatenating-Strings-and-Characters","title":"Concatenating Strings and Characters","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Concatenating-Strings-and-Characters","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extending-a-Generic-Type":{"title":"Extending a Generic Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type","url":"\/documentation\/the-swift-programming-language\/generics#Extending-a-Generic-Type","abstract":[],"type":"topic","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation","abstract":[],"title":"Adopting a Protocol Using a Synthesized Implementation","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Accessing-and-Modifying-an-Array":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Accessing-and-Modifying-an-Array","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Accessing-and-Modifying-an-Array","title":"Accessing and Modifying an Array"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Conditional-Expression":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Conditional-Expression","title":"Conditional Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Conditional-Expression","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Dictionary-Type-Shorthand-Syntax":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Dictionary-Type-Shorthand-Syntax","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Dictionary-Type-Shorthand-Syntax","title":"Dictionary Type Shorthand Syntax"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Escaping-Closures":{"kind":"section","url":"\/documentation\/the-swift-programming-language\/closures#Escaping-Closures","abstract":[],"title":"Escaping Closures","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Escaping-Closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Custom-Operators":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Custom-Operators","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Custom-Operators","kind":"section","title":"Custom Operators","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicMemberLookup":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicMemberLookup","url":"\/documentation\/the-swift-programming-language\/attributes#dynamicMemberLookup","kind":"section","abstract":[],"type":"topic","title":"dynamicMemberLookup"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations#Raw-Values":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Raw-Values","abstract":[],"title":"Raw Values","url":"\/documentation\/the-swift-programming-language\/enumerations#Raw-Values","type":"topic","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#main":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#main","title":"main","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#main","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/MemorySafety":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/MemorySafety","abstract":[{"text":"Structure your code to avoid conflicts when accessing memory.","type":"text"}],"title":"Memory Safety","role":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/memorysafety","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Type-Properties":{"abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Type-Properties","url":"\/documentation\/the-swift-programming-language\/properties#Type-Properties","title":"Type Properties","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Explicit-Member-Expression":{"type":"topic","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Explicit-Member-Expression","abstract":[],"title":"Explicit Member Expression","url":"\/documentation\/the-swift-programming-language\/expressions#Explicit-Member-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Compound-Assignment-Operators":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Compound-Assignment-Operators","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Compound-Assignment-Operators","title":"Compound Assignment Operators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Memberwise-Initializers-for-Structure-Types":{"url":"\/documentation\/the-swift-programming-language\/initialization#Memberwise-Initializers-for-Structure-Types","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Memberwise-Initializers-for-Structure-Types","kind":"section","abstract":[],"title":"Memberwise Initializers for Structure Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Optional-Binding":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Optional-Binding","url":"\/documentation\/the-swift-programming-language\/thebasics#Optional-Binding","kind":"section","title":"Optional Binding","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting#Defining-a-Capture-List":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting#Defining-a-Capture-List","title":"Defining a Capture List","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Defining-a-Capture-List","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Result-Builders":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Result-Builders","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Result-Builders","title":"Result Builders"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl":{"kind":"article","role":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/accesscontrol","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl","title":"Access Control","abstract":[{"text":"Manage the visibility of code by declaration, file, and module.","type":"text"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Any-Type":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/types#Any-Type","title":"Any Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Any-Type","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Default-Parameter-Values":{"type":"topic","title":"Default Parameter Values","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Default-Parameter-Values","kind":"section","abstract":[],"url":"\/documentation\/the-swift-programming-language\/functions#Default-Parameter-Values"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Assertions-and-Preconditions":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Assertions-and-Preconditions","url":"\/documentation\/the-swift-programming-language\/thebasics#Assertions-and-Preconditions","title":"Assertions and Preconditions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Subscripts":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics#Generic-Subscripts","title":"Generic Subscripts","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Subscripts","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#unchecked":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#unchecked","url":"\/documentation\/the-swift-programming-language\/attributes#unchecked","title":"unchecked"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Availability-Condition":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Availability-Condition","title":"Availability Condition","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Availability-Condition","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling#Representing-and-Throwing-Errors":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Representing-and-Throwing-Errors","url":"\/documentation\/the-swift-programming-language\/errorhandling#Representing-and-Throwing-Errors","title":"Representing and Throwing Errors"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Literal-Expression":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/expressions#Literal-Expression","kind":"section","title":"Literal Expression","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Literal-Expression"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Associated-Types-with-a-Generic-Where-Clause":{"url":"\/documentation\/the-swift-programming-language\/generics#Associated-Types-with-a-Generic-Where-Clause","title":"Associated Types with a Generic Where Clause","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Associated-Types-with-a-Generic-Where-Clause","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Operator-Methods":{"type":"topic","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Operator-Methods","abstract":[],"title":"Operator Methods","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Operator-Methods"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Optional-Protocol-Requirements":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Optional-Protocol-Requirements","url":"\/documentation\/the-swift-programming-language\/protocols#Optional-Protocol-Requirements","kind":"section","abstract":[],"type":"topic","title":"Optional Protocol Requirements"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Function-Call-Expression":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Function-Call-Expression","title":"Function Call Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Function-Call-Expression","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators":{"abstract":[{"text":"Define custom operators, perform bitwise operations, and use builder syntax.","type":"text"}],"url":"\/documentation\/the-swift-programming-language\/advancedoperators","role":"article","kind":"article","title":"Advanced Operators","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting#Weak-References":{"abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Weak-References","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting#Weak-References","title":"Weak References","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling#Handling-Errors":{"abstract":[],"url":"\/documentation\/the-swift-programming-language\/errorhandling#Handling-Errors","title":"Handling Errors","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Handling-Errors","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations#Recursive-Enumerations":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Recursive-Enumerations","url":"\/documentation\/the-swift-programming-language\/enumerations#Recursive-Enumerations","title":"Recursive Enumerations"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extensions-with-a-Generic-Where-Clause":{"url":"\/documentation\/the-swift-programming-language\/generics#Extensions-with-a-Generic-Where-Clause","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","abstract":[],"title":"Extensions with a Generic Where Clause"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","title":"Using a Protocol in Its Associated Type’s Constraints","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Trailing-Closures":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Trailing-Closures","url":"\/documentation\/the-swift-programming-language\/closures#Trailing-Closures","title":"Trailing Closures"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Do-Statement":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Do-Statement","title":"Do Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Do-Statement","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Break-Statement":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Break-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Break-Statement","kind":"section","title":"Break Statement","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Early-Exit":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Early-Exit","url":"\/documentation\/the-swift-programming-language\/controlflow#Early-Exit","title":"Early Exit"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Patterns#Enumeration-Case-Pattern":{"url":"\/documentation\/the-swift-programming-language\/patterns#Enumeration-Case-Pattern","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Patterns#Enumeration-Case-Pattern","kind":"section","abstract":[],"title":"Enumeration Case Pattern"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Accessing-and-Modifying-a-Dictionary":{"abstract":[],"title":"Accessing and Modifying a Dictionary","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Accessing-and-Modifying-a-Dictionary","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Accessing-and-Modifying-a-Dictionary","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Properties-Through-Optional-Chaining":{"url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Properties-Through-Optional-Chaining","kind":"section","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","title":"Accessing Properties Through Optional Chaining","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Keywords-and-Punctuation":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Keywords-and-Punctuation","title":"Keywords and Punctuation","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Keywords-and-Punctuation","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency":{"role":"article","url":"\/documentation\/the-swift-programming-language\/concurrency","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","type":"topic","abstract":[{"text":"Perform asynchronous operations.","type":"text"}],"title":"Concurrency","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Enumerations#Implicitly-Assigned-Raw-Values":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Enumerations#Implicitly-Assigned-Raw-Values","url":"\/documentation\/the-swift-programming-language\/enumerations#Implicitly-Assigned-Raw-Values","title":"Implicitly Assigned Raw Values"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Closures-Are-Reference-Types":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/closures#Closures-Are-Reference-Types","title":"Closures Are Reference Types","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Closures-Are-Reference-Types","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Equivalence-Operators":{"url":"\/documentation\/the-swift-programming-language\/advancedoperators#Equivalence-Operators","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Equivalence-Operators","title":"Equivalence Operators","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OpaqueTypes":{"title":"Opaque and Boxed Types","kind":"article","url":"\/documentation\/the-swift-programming-language\/opaquetypes","role":"article","abstract":[{"type":"text","text":"Hide implementation details about a value’s type."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OpaqueTypes","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Capture-Lists":{"type":"topic","kind":"section","title":"Capture Lists","abstract":[],"url":"\/documentation\/the-swift-programming-language\/expressions#Capture-Lists","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Capture-Lists"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining#Accessing-Subscripts-of-Optional-Type":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining#Accessing-Subscripts-of-Optional-Type","url":"\/documentation\/the-swift-programming-language\/optionalchaining#Accessing-Subscripts-of-Optional-Type","title":"Accessing Subscripts of Optional Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Guard-Statement":{"url":"\/documentation\/the-swift-programming-language\/statements#Guard-Statement","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Guard-Statement","kind":"section","abstract":[],"title":"Guard Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Extensions":{"title":"Protocol Extensions","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Extensions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions","abstract":[],"type":"topic","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Failable-Initializer-Requirements":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/protocols#Failable-Initializer-Requirements","title":"Failable Initializer Requirements","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Failable-Initializer-Requirements","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Optional-Tuple-Return-Types":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Optional-Tuple-Return-Types","url":"\/documentation\/the-swift-programming-language\/functions#Optional-Tuple-Return-Types","title":"Optional Tuple Return Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#Extended-Grapheme-Clusters":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters#Extended-Grapheme-Clusters","title":"Extended Grapheme Clusters","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Extended-Grapheme-Clusters","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes":{"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","kind":"article","title":"Attributes","abstract":[{"text":"Add information to declarations and types.","type":"text"}],"url":"\/documentation\/the-swift-programming-language\/attributes","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations":{"kind":"article","role":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations","title":"Declarations","abstract":[{"text":"Introduce types, operators, variables, and other names and constructs.","type":"text"}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Autoclosures":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures","abstract":[],"title":"Autoclosures","url":"\/documentation\/the-swift-programming-language\/closures#Autoclosures","type":"topic","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Protocol-Composition-Type":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Protocol-Composition-Type","url":"\/documentation\/the-swift-programming-language\/types#Protocol-Composition-Type","kind":"section","abstract":[],"type":"topic","title":"Protocol Composition Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Metatype-Type":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Metatype-Type","url":"\/documentation\/the-swift-programming-language\/types#Metatype-Type","title":"Metatype Type"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Compiler-Control-Statements":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Compiler-Control-Statements","title":"Compiler Control Statements","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Compiler-Control-Statements","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Macros":{"abstract":[{"text":"Use macros to generate code at compile time.","type":"text"}],"title":"Macros","type":"topic","kind":"article","role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Macros","url":"\/documentation\/the-swift-programming-language\/macros"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","type":"topic","role":"collection","title":"The Swift Programming Language (5.9)","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Type-Annotations":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Type-Annotations","url":"\/documentation\/the-swift-programming-language\/thebasics#Type-Annotations","kind":"section","title":"Type Annotations","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Precedence-Group-Declaration":{"abstract":[],"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Precedence-Group-Declaration","url":"\/documentation\/the-swift-programming-language\/declarations#Precedence-Group-Declaration","title":"Precedence Group Declaration","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Defer-Statement":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Defer-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Defer-Statement","title":"Defer Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Functions#Functions-With-an-Implicit-Return":{"abstract":[],"kind":"section","title":"Functions With an Implicit Return","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Functions#Functions-With-an-Implicit-Return","url":"\/documentation\/the-swift-programming-language\/functions#Functions-With-an-Implicit-Return"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Implicitly-Unwrapped-Optionals":{"type":"topic","kind":"section","title":"Implicitly Unwrapped Optionals","abstract":[],"url":"\/documentation\/the-swift-programming-language\/thebasics#Implicitly-Unwrapped-Optionals","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Implicitly-Unwrapped-Optionals"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling#Handling-Errors-Using-Do-Catch":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling#Handling-Errors-Using-Do-Catch","title":"Handling Errors Using Do-Catch","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Handling-Errors-Using-Do-Catch","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#frozen":{"title":"frozen","abstract":[],"url":"\/documentation\/the-swift-programming-language\/attributes#frozen","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#frozen","type":"topic","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switch-Statement":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switch-Statement","url":"\/documentation\/the-swift-programming-language\/statements#Switch-Statement","title":"Switch Statement"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Key-Path-Expression":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Key-Path-Expression","title":"Key-Path Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Key-Path-Expression","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/TheBasics#Debugging-with-Assertions":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/TheBasics#Debugging-with-Assertions","url":"\/documentation\/the-swift-programming-language\/thebasics#Debugging-with-Assertions","title":"Debugging with Assertions"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements":{"kind":"article","role":"article","url":"\/documentation\/the-swift-programming-language\/statements","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements","abstract":[{"text":"Group expressions and control the flow of execution.","type":"text"}],"title":"Statements","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","title":"Enumerations with Cases of a Raw-Value Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling":{"title":"Error Handling","kind":"article","url":"\/documentation\/the-swift-programming-language\/errorhandling","role":"article","abstract":[{"text":"Respond to and recover from errors.","type":"text"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#Extended-String-Delimiters":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Extended-String-Delimiters","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters#Extended-String-Delimiters","title":"Extended String Delimiters"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting","kind":"article","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting","type":"topic","abstract":[{"text":"Model the lifetime of objects and their relationships.","type":"text"}],"title":"Automatic Reference Counting","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure#Regular-Expression-Literals":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/lexicalstructure#Regular-Expression-Literals","title":"Regular Expression Literals","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure#Regular-Expression-Literals","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Type-Variable-Properties":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Type-Variable-Properties","url":"\/documentation\/the-swift-programming-language\/declarations#Type-Variable-Properties","title":"Type Variable Properties"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Value-Overflow":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Value-Overflow","title":"Value Overflow","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Value-Overflow","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#String-Indices":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#String-Indices","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters#String-Indices","title":"String Indices"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Failable-Initializers":{"url":"\/documentation\/the-swift-programming-language\/initialization#Failable-Initializers","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Failable-Initializers","kind":"section","abstract":[],"title":"Failable Initializers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Stored-Variable-Observers-and-Property-Observers":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/declarations#Stored-Variable-Observers-and-Property-Observers","title":"Stored Variable Observers and Property Observers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Stored-Variable-Observers-and-Property-Observers","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Rethrowing-Functions-and-Methods":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Rethrowing-Functions-and-Methods","url":"\/documentation\/the-swift-programming-language\/declarations#Rethrowing-Functions-and-Methods","kind":"section","title":"Rethrowing Functions and Methods","type":"topic","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Where-Clauses":{"kind":"section","title":"Generic Where Clauses","url":"\/documentation\/the-swift-programming-language\/generics#Generic-Where-Clauses","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Initializer-Parameters-Without-Argument-Labels":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Parameters-Without-Argument-Labels","url":"\/documentation\/the-swift-programming-language\/initialization#Initializer-Parameters-Without-Argument-Labels","title":"Initializer Parameters Without Argument Labels"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters":{"role":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters","kind":"article","title":"Strings and Characters","abstract":[{"type":"text","text":"Store and manipulate text."}],"url":"\/documentation\/the-swift-programming-language\/stringsandcharacters","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Capturing-Values":{"kind":"section","abstract":[],"type":"topic","title":"Capturing Values","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Capturing-Values","url":"\/documentation\/the-swift-programming-language\/closures#Capturing-Values"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments":{"url":"\/documentation\/the-swift-programming-language\/genericparametersandarguments","type":"topic","abstract":[{"text":"Generalize declarations to abstract away concrete types.","type":"text"}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","role":"article","title":"Generic Parameters and Arguments","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/StringsAndCharacters#Special-Characters-in-String-Literals":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/stringsandcharacters#Special-Characters-in-String-Literals","title":"Special Characters in String Literals","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/StringsAndCharacters#Special-Characters-in-String-Literals","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Assigning-Constant-Properties-During-Initialization":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Assigning-Constant-Properties-During-Initialization","abstract":[],"type":"topic","kind":"section","title":"Assigning Constant Properties During Initialization","url":"\/documentation\/the-swift-programming-language\/initialization#Assigning-Constant-Properties-During-Initialization"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts#Type-Subscripts":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts#Type-Subscripts","url":"\/documentation\/the-swift-programming-language\/subscripts#Type-Subscripts","title":"Type Subscripts"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/OptionalChaining":{"url":"\/documentation\/the-swift-programming-language\/optionalchaining","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/OptionalChaining","abstract":[{"type":"text","text":"Access members of an optional value without unwrapping."}],"role":"article","title":"Optional Chaining","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#Sendable":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/attributes#Sendable","title":"Sendable","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#Sendable","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Precedence-for-Custom-Infix-Operators":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Precedence-for-Custom-Infix-Operators","url":"\/documentation\/the-swift-programming-language\/advancedoperators#Precedence-for-Custom-Infix-Operators","title":"Precedence for Custom Infix Operators"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Function-Type":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/types#Function-Type","title":"Function Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance":{"abstract":[{"text":"Subclass to add or override functionality.","type":"text"}],"role":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance","title":"Inheritance","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#resultBuilder":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#resultBuilder","url":"\/documentation\/the-swift-programming-language\/attributes#resultBuilder","abstract":[],"title":"resultBuilder","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Checking-API-Availability":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Checking-API-Availability","url":"\/documentation\/the-swift-programming-language\/controlflow#Checking-API-Availability","title":"Checking API Availability"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AutomaticReferenceCounting#Unowned-Optional-References":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/automaticreferencecounting#Unowned-Optional-References","title":"Unowned Optional References","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AutomaticReferenceCounting#Unowned-Optional-References","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AccessControl#Access-Levels":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AccessControl#Access-Levels","url":"\/documentation\/the-swift-programming-language\/accesscontrol#Access-Levels","title":"Access Levels"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ErrorHandling#Converting-Errors-to-Optional-Values":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/errorhandling#Converting-Errors-to-Optional-Values","title":"Converting Errors to Optional Values","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ErrorHandling#Converting-Errors-to-Optional-Values","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Shorthand-Getter-Declaration":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Shorthand-Getter-Declaration","title":"Shorthand Getter Declaration","url":"\/documentation\/the-swift-programming-language\/properties#Shorthand-Getter-Declaration","kind":"section","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Mutability-of-Collections":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Mutability-of-Collections","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Mutability-of-Collections","title":"Mutability of Collections"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Inheritance#Overriding-Property-Getters-and-Setters":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/inheritance#Overriding-Property-Getters-and-Setters","title":"Overriding Property Getters and Setters","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Inheritance#Overriding-Property-Getters-and-Setters","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow":{"url":"\/documentation\/the-swift-programming-language\/controlflow","type":"topic","abstract":[{"text":"Structure code with branches, loops, and early exits.","type":"text"}],"title":"Control Flow","kind":"article","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/CollectionTypes#Hash-Values-for-Set-Types":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/CollectionTypes#Hash-Values-for-Set-Types","url":"\/documentation\/the-swift-programming-language\/collectiontypes#Hash-Values-for-Set-Types","title":"Hash Values for Set Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Await-Operator":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/expressions#Await-Operator","title":"Await Operator","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Await-Operator","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Deferred-Actions":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Deferred-Actions","title":"Deferred Actions","url":"\/documentation\/the-swift-programming-language\/controlflow#Deferred-Actions","kind":"section","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/BasicOperators#Nil-Coalescing-Operator":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/BasicOperators#Nil-Coalescing-Operator","url":"\/documentation\/the-swift-programming-language\/basicoperators#Nil-Coalescing-Operator","title":"Nil-Coalescing Operator"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GuidedTour":{"role":"article","type":"topic","title":"A Swift Tour","kind":"article","abstract":[{"type":"text","text":"Explore the features and syntax of Swift."}],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GuidedTour","url":"\/documentation\/the-swift-programming-language\/guidedtour"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Class-Only-Protocols":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Class-Only-Protocols","abstract":[],"title":"Class-Only Protocols","url":"\/documentation\/the-swift-programming-language\/protocols#Class-Only-Protocols","type":"topic","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Properties#Property-Observers":{"url":"\/documentation\/the-swift-programming-language\/properties#Property-Observers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Properties#Property-Observers","title":"Property Observers","type":"topic","abstract":[],"kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Throw-Statement":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Throw-Statement","title":"Throw Statement","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Throw-Statement","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#dynamicCallable":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#dynamicCallable","url":"\/documentation\/the-swift-programming-language\/attributes#dynamicCallable","kind":"section","abstract":[],"type":"topic","title":"dynamicCallable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions","role":"article","kind":"article","url":"\/documentation\/the-swift-programming-language\/expressions","title":"Expressions","type":"topic","abstract":[{"type":"text","text":"Access, modify, and assign values."}]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ControlFlow#Switch":{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ControlFlow#Switch","url":"\/documentation\/the-swift-programming-language\/controlflow#Switch","kind":"section","title":"Switch","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Methods-with-Special-Names":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Methods-with-Special-Names","url":"\/documentation\/the-swift-programming-language\/declarations#Methods-with-Special-Names","title":"Methods with Special Names"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Initializer-Inheritance-and-Overriding":{"url":"\/documentation\/the-swift-programming-language\/initialization#Initializer-Inheritance-and-Overriding","type":"topic","kind":"section","title":"Initializer Inheritance and Overriding","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Inheritance-and-Overriding","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switching-Over-Future-Enumeration-Cases":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/statements#Switching-Over-Future-Enumeration-Cases","title":"Switching Over Future Enumeration Cases","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/LexicalStructure":{"role":"article","url":"\/documentation\/the-swift-programming-language\/lexicalstructure","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/LexicalStructure","abstract":[{"text":"Use the lowest-level components of the syntax.","type":"text"}],"type":"topic","title":"Lexical Structure","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Overriding-a-Failable-Initializer":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Overriding-a-Failable-Initializer","url":"\/documentation\/the-swift-programming-language\/initialization#Overriding-a-Failable-Initializer","title":"Overriding a Failable Initializer"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization":{"abstract":[{"text":"Set the initial values for a type’s stored properties and perform one-time setup.","type":"text"}],"role":"article","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization","title":"Initialization","kind":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Contextual-Where-Clauses":{"kind":"section","type":"topic","url":"\/documentation\/the-swift-programming-language\/generics#Contextual-Where-Clauses","title":"Contextual Where Clauses","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Contextual-Where-Clauses","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Subscripts#Subscript-Options":{"type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Subscripts#Subscript-Options","url":"\/documentation\/the-swift-programming-language\/subscripts#Subscript-Options","title":"Subscript Options"}}}