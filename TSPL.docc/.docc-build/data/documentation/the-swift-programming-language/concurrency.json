{"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"article","abstract":[{"text":"Perform asynchronous operations.","type":"text"}],"metadata":{"title":"Concurrency"},"sections":[],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift has built-in support for writing asynchronous and parallel code","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in a structured way."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"Asynchronous code","type":"text"}]},{"type":"text","text":" can be suspended and resumed later,"},{"text":" ","type":"text"},{"text":"although only one piece of the program executes at a time.","type":"text"},{"type":"text","text":" "},{"text":"Suspending and resuming code in your program","type":"text"},{"type":"text","text":" "},{"type":"text","text":"lets it continue to make progress"},{"type":"text","text":" "},{"text":"on short-term operations like updating its UI","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"while continuing to work on long-running operations"},{"text":" ","type":"text"},{"type":"text","text":"like fetching data over the network or parsing files."},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Parallel code"}]},{"type":"text","text":" means multiple pieces of code run simultaneously —"},{"type":"text","text":" "},{"type":"text","text":"for example, a computer with a four-core processor"},{"type":"text","text":" "},{"type":"text","text":"can run four pieces of code at the same time,"},{"type":"text","text":" "},{"type":"text","text":"with each core carrying out one of the tasks."},{"text":" ","type":"text"},{"type":"text","text":"A program that uses parallel and asynchronous code"},{"type":"text","text":" "},{"text":"carries out multiple operations at a time;","type":"text"},{"type":"text","text":" "},{"text":"it suspends operations that are waiting for an external system,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and makes it easier to write this code in a memory-safe way."}]},{"inlineContent":[{"type":"text","text":"The additional scheduling flexibility from parallel or asynchronous code"},{"type":"text","text":" "},{"text":"also comes with a cost of increased complexity.","type":"text"},{"type":"text","text":" "},{"text":"Swift lets you express your intent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in a way that enables some compile-time checking —"},{"type":"text","text":" "},{"type":"text","text":"for example, you can use actors to safely access mutable state."},{"type":"text","text":" "},{"type":"text","text":"However, adding concurrency to slow or buggy code"},{"text":" ","type":"text"},{"text":"isn’t a guarantee that it will become fast or correct.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In fact, adding concurrency might even make your code harder to debug."},{"type":"text","text":" "},{"type":"text","text":"However, using Swift’s language-level support for concurrency"},{"type":"text","text":" "},{"text":"in code that needs to be concurrent","type":"text"},{"text":" ","type":"text"},{"text":"means Swift can help you catch problems at compile time.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The rest of this chapter uses the term ","type":"text"},{"inlineContent":[{"text":"concurrency","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"text","text":"to refer to this common combination of asynchronous and parallel code."}],"type":"paragraph"},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"If you’ve written concurrent code before,"},{"type":"text","text":" "},{"type":"text","text":"you might be used to working with threads."},{"type":"text","text":" "},{"type":"text","text":"The concurrency model in Swift is built on top of threads,"},{"text":" ","type":"text"},{"text":"but you don’t interact with them directly.","type":"text"},{"type":"text","text":" "},{"text":"An asynchronous function in Swift","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can give up the thread that it’s running on,"},{"type":"text","text":" "},{"type":"text","text":"which lets another asynchronous function run on that thread"},{"type":"text","text":" "},{"type":"text","text":"while the first function is blocked."},{"text":" ","type":"text"},{"type":"text","text":"When an asynchronous function resumes,"},{"type":"text","text":" "},{"text":"Swift doesn’t make any guarantee about which thread","type":"text"},{"text":" ","type":"text"},{"text":"that function will run on.","type":"text"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"Although it’s possible to write concurrent code","type":"text"},{"text":" ","type":"text"},{"text":"without using Swift’s language support,","type":"text"},{"type":"text","text":" "},{"text":"that code tends to be harder to read.","type":"text"},{"text":" ","type":"text"},{"text":"For example, the following code downloads a list of photo names,","type":"text"},{"type":"text","text":" "},{"text":"downloads the first photo in that list,","type":"text"},{"type":"text","text":" "},{"text":"and shows that photo to the user:","type":"text"}]},{"syntax":"swift","code":["listPhotos(inGallery: \"Summer Vacation\") { photoNames in","    let sortedNames = photoNames.sorted()","    let name = sortedNames[0]","    downloadPhoto(named: name) { photo in","        show(photo)","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Even in this simple case,","type":"text"},{"text":" ","type":"text"},{"text":"because the code has to be written as a series of completion handlers,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you end up writing nested closures."},{"type":"text","text":" "},{"text":"In this style,","type":"text"},{"text":" ","type":"text"},{"text":"more complex code with deep nesting can quickly become unwieldy.","type":"text"}]},{"text":"Defining and Calling Asynchronous Functions","type":"heading","level":2,"anchor":"Defining-and-Calling-Asynchronous-Functions"},{"inlineContent":[{"type":"text","text":"An "},{"inlineContent":[{"type":"text","text":"asynchronous function"}],"type":"emphasis"},{"text":" or ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"asynchronous method"}]},{"text":" ","type":"text"},{"text":"is a special kind of function or method","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that can be suspended while it’s partway through execution."},{"type":"text","text":" "},{"text":"This is in contrast to ordinary, synchronous functions and methods,","type":"text"},{"type":"text","text":" "},{"text":"which either run to completion, throw an error, or never return.","type":"text"},{"type":"text","text":" "},{"text":"An asynchronous function or method still does one of those three things,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but it can also pause in the middle when it’s waiting for something."},{"type":"text","text":" "},{"type":"text","text":"Inside the body of an asynchronous function or method,"},{"text":" ","type":"text"},{"type":"text","text":"you mark each of these places where execution can be suspended."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To indicate that a function or method is asynchronous,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you write the "},{"type":"codeVoice","code":"async"},{"text":" keyword in its declaration after its parameters,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"similar to how you use "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" to mark a throwing function."},{"type":"text","text":" "},{"text":"If the function or method returns a value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you write "},{"code":"async","type":"codeVoice"},{"type":"text","text":" before the return arrow ("},{"code":"->","type":"codeVoice"},{"type":"text","text":")."},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"here’s how you might fetch the names of photos in a gallery:"}]},{"syntax":"swift","code":["func listPhotos(inGallery name: String) async -> [String] {","    let result = \/\/ ... some asynchronous networking code ...","    return result","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"For a function or method that’s both asynchronous and throwing,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you write "},{"type":"codeVoice","code":"async"},{"text":" before ","type":"text"},{"type":"codeVoice","code":"throws"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"When calling an asynchronous method,","type":"text"},{"type":"text","text":" "},{"text":"execution suspends until that method returns.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You write "},{"type":"codeVoice","code":"await"},{"type":"text","text":" in front of the call"},{"text":" ","type":"text"},{"text":"to mark the possible suspension point.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This is like writing "},{"type":"codeVoice","code":"try"},{"type":"text","text":" when calling a throwing function,"},{"text":" ","type":"text"},{"type":"text","text":"to mark the possible change to the program’s flow if there’s an error."},{"type":"text","text":" "},{"text":"Inside an asynchronous method,","type":"text"},{"text":" ","type":"text"},{"text":"the flow of execution is suspended ","type":"text"},{"inlineContent":[{"type":"text","text":"only"}],"type":"emphasis"},{"type":"text","text":" when you call another asynchronous method —"},{"text":" ","type":"text"},{"type":"text","text":"suspension is never implicit or preemptive —"},{"text":" ","type":"text"},{"text":"which means every possible suspension point is marked with ","type":"text"},{"code":"await","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the code below fetches the names of all the pictures in a gallery"},{"type":"text","text":" "},{"type":"text","text":"and then shows the first picture:"}],"type":"paragraph"},{"code":["let photoNames = await listPhotos(inGallery: \"Summer Vacation\")","let sortedNames = photoNames.sorted()","let name = sortedNames[0]","let photo = await downloadPhoto(named: name)","show(photo)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Because the "},{"code":"listPhotos(inGallery:)","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"type":"text","text":" functions"},{"type":"text","text":" "},{"text":"both need to make network requests,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"they could take a relatively long time to complete."},{"type":"text","text":" "},{"text":"Making them both asynchronous by writing ","type":"text"},{"type":"codeVoice","code":"async"},{"text":" before the return arrow","type":"text"},{"text":" ","type":"text"},{"text":"lets the rest of the app’s code keep running","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"while this code waits for the picture to be ready."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To understand the concurrent nature of the example above,"},{"text":" ","type":"text"},{"text":"here’s one possible order of execution:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"text":"The code starts running from the first line","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and runs up to the first "},{"type":"codeVoice","code":"await"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"It calls the ","type":"text"},{"type":"codeVoice","code":"listPhotos(inGallery:)"},{"text":" function","type":"text"},{"text":" ","type":"text"},{"text":"and suspends execution while it waits for that function to return.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"While this code’s execution is suspended,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"some other concurrent code in the same program runs."},{"type":"text","text":" "},{"text":"For example, maybe a long-running background task","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"continues updating a list of new photo galleries."},{"text":" ","type":"text"},{"type":"text","text":"That code also runs until the next suspension point, marked by "},{"type":"codeVoice","code":"await"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"or until it completes.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"After ","type":"text"},{"code":"listPhotos(inGallery:)","type":"codeVoice"},{"type":"text","text":" returns,"},{"type":"text","text":" "},{"text":"this code continues execution starting at that point.","type":"text"},{"type":"text","text":" "},{"text":"It assigns the value that was returned to ","type":"text"},{"type":"codeVoice","code":"photoNames"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The lines that define ","type":"text"},{"type":"codeVoice","code":"sortedNames"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"name"},{"type":"text","text":" "},{"type":"text","text":"are regular, synchronous code."},{"text":" ","type":"text"},{"type":"text","text":"Because nothing is marked "},{"code":"await","type":"codeVoice"},{"type":"text","text":" on these lines,"},{"type":"text","text":" "},{"type":"text","text":"there aren’t any possible suspension points."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The next "},{"type":"codeVoice","code":"await"},{"text":" marks the call to the ","type":"text"},{"code":"downloadPhoto(named:)","type":"codeVoice"},{"type":"text","text":" function."},{"type":"text","text":" "},{"type":"text","text":"This code pauses execution again until that function returns,"},{"type":"text","text":" "},{"text":"giving other concurrent code an opportunity to run.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"After ","type":"text"},{"code":"downloadPhoto(named:)","type":"codeVoice"},{"text":" returns,","type":"text"},{"text":" ","type":"text"},{"text":"its return value is assigned to ","type":"text"},{"type":"codeVoice","code":"photo"},{"type":"text","text":" "},{"text":"and then passed as an argument when calling ","type":"text"},{"code":"show(_:)","type":"codeVoice"},{"type":"text","text":"."}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The possible suspension points in your code marked with "},{"type":"codeVoice","code":"await"},{"type":"text","text":" "},{"type":"text","text":"indicate that the current piece of code might pause execution"},{"text":" ","type":"text"},{"text":"while waiting for the asynchronous function or method to return.","type":"text"},{"type":"text","text":" "},{"text":"This is also called ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"yielding the thread"}]},{"type":"text","text":" "},{"type":"text","text":"because, behind the scenes,"},{"type":"text","text":" "},{"text":"Swift suspends the execution of your code on the current thread","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and runs some other code on that thread instead."},{"type":"text","text":" "},{"type":"text","text":"Because code with "},{"code":"await","type":"codeVoice"},{"text":" needs to be able to suspend execution,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"only certain places in your program can call asynchronous functions or methods:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Code in the body of an asynchronous function, method, or property."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Code in the static "},{"type":"codeVoice","code":"main()"},{"text":" method of","type":"text"},{"text":" ","type":"text"},{"text":"a structure, class, or enumeration that’s marked with ","type":"text"},{"type":"codeVoice","code":"@main"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Code in an unstructured child task,"},{"type":"text","text":" "},{"type":"text","text":"as shown in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency#Unstructured-Concurrency","isActive":true,"type":"reference"},{"type":"text","text":" below."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Code in between possible suspension points runs sequentially,"},{"text":" ","type":"text"},{"text":"without the possibility of interruption from other concurrent code.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, the code below moves a picture from one gallery to another."}],"type":"paragraph"},{"type":"codeListing","code":["let firstPhoto = await listPhotos(inGallery: \"Summer Vacation\")[0]","add(firstPhoto, toGallery: \"Road Trip\")","\/\/ At this point, firstPhoto is temporarily in both galleries.","remove(firstPhoto, fromGallery: \"Summer Vacation\")"],"syntax":"swift"},{"inlineContent":[{"text":"There’s no way for other code to run in between","type":"text"},{"text":" ","type":"text"},{"text":"the call to ","type":"text"},{"type":"codeVoice","code":"add(_:toGallery:)"},{"type":"text","text":" and "},{"code":"remove(_:fromGallery:)","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"During that time, the first photo appears in both galleries,"},{"type":"text","text":" "},{"text":"temporarily breaking one of the app’s invariants.","type":"text"},{"text":" ","type":"text"},{"text":"To make it even clearer that this chunk of code","type":"text"},{"type":"text","text":" "},{"type":"text","text":"must not have "},{"code":"await","type":"codeVoice"},{"text":" added to it in the future,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you can refactor that code into a synchronous function:"}],"type":"paragraph"},{"code":["func move(_ photoName: String, from source: String, to destination: String) {","    add(photoName, toGallery: destination)","    remove(photoName, fromGallery: source)","}","\/\/ ...","let firstPhoto = await listPhotos(inGallery: \"Summer Vacation\")[0]","move(firstPhoto, from: \"Summer Vacation\", to: \"Road Trip\")"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"In the example above,"},{"text":" ","type":"text"},{"text":"because the ","type":"text"},{"code":"move(_:from:to:)","type":"codeVoice"},{"type":"text","text":" function is synchronous,"},{"type":"text","text":" "},{"text":"you guarantee that it can never contain possible suspension points.","type":"text"},{"type":"text","text":" "},{"text":"In the future,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if you try to add concurrent code to this function,"},{"text":" ","type":"text"},{"text":"introducing a possible suspension point,","type":"text"},{"type":"text","text":" "},{"text":"you’ll get compile-time error instead of introducing a bug.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/sleep(until:tolerance:clock:)","isActive":true},{"text":" method","type":"text"},{"type":"text","text":" "},{"text":"is useful when writing simple code","type":"text"},{"text":" ","type":"text"},{"text":"to learn how concurrency works.","type":"text"},{"type":"text","text":" "},{"text":"This method does nothing,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but waits at least the given number of nanoseconds before it returns."},{"text":" ","type":"text"},{"text":"Here’s a version of the ","type":"text"},{"code":"listPhotos(inGallery:)","type":"codeVoice"},{"type":"text","text":" function"},{"type":"text","text":" "},{"text":"that uses ","type":"text"},{"code":"sleep(until:tolerance:clock:)","type":"codeVoice"},{"text":" to simulate waiting for a network operation:","type":"text"}]},{"code":["func listPhotos(inGallery name: String) async throws -> [String] {","    try await Task.sleep(until: .now + .seconds(2), clock: .continuous)","    return [\"IMG001\", \"IMG99\", \"IMG0404\"]","}"],"type":"codeListing","syntax":"swift"}],"name":"Note","style":"note","type":"aside"},{"type":"heading","level":2,"text":"Asynchronous Sequences","anchor":"Asynchronous-Sequences"},{"inlineContent":[{"type":"text","text":"The "},{"code":"listPhotos(inGallery:)","type":"codeVoice"},{"text":" function in the previous section","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"asynchronously returns the whole array at once,"},{"type":"text","text":" "},{"text":"after all of the array’s elements are ready.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Another approach"},{"type":"text","text":" "},{"type":"text","text":"is to wait for one element of the collection at a time"},{"type":"text","text":" "},{"type":"text","text":"using an "},{"type":"emphasis","inlineContent":[{"text":"asynchronous sequence","type":"text"}]},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Here’s what iterating over an asynchronous sequence looks like:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["import Foundation","","let handle = FileHandle.standardInput","for try await line in handle.bytes.lines {","    print(line)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of using an ordinary "},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop,"},{"type":"text","text":" "},{"type":"text","text":"the example above writes "},{"code":"for","type":"codeVoice"},{"text":" with ","type":"text"},{"code":"await","type":"codeVoice"},{"text":" after it.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Like when you call an asynchronous function or method,"},{"text":" ","type":"text"},{"text":"writing ","type":"text"},{"type":"codeVoice","code":"await"},{"type":"text","text":" indicates a possible suspension point."},{"type":"text","text":" "},{"type":"text","text":"A "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"code":"await","type":"codeVoice"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop potentially suspends execution"},{"text":" ","type":"text"},{"type":"text","text":"at the beginning of each iteration,"},{"text":" ","type":"text"},{"type":"text","text":"when it’s waiting for the next element to be available."}]},{"type":"paragraph","inlineContent":[{"text":"In the same way that you can use your own types in a ","type":"text"},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop"},{"type":"text","text":" "},{"text":"by adding conformance to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence"},{"text":" protocol,","type":"text"},{"type":"text","text":" "},{"text":"you can use your own types in a ","type":"text"},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"await"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"text":" loop","type":"text"},{"type":"text","text":" "},{"text":"by adding conformance to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/asyncsequence","isActive":true},{"type":"text","text":" protocol."}]},{"type":"heading","text":"Calling Asynchronous Functions in Parallel","level":2,"anchor":"Calling-Asynchronous-Functions-in-Parallel"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Calling an asynchronous function with "},{"code":"await","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"runs only one piece of code at a time."},{"type":"text","text":" "},{"type":"text","text":"While the asynchronous code is running,"},{"type":"text","text":" "},{"type":"text","text":"the caller waits for that code to finish"},{"type":"text","text":" "},{"text":"before moving on to run the next line of code.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"to fetch the first three photos from a gallery,"},{"text":" ","type":"text"},{"type":"text","text":"you could await three calls to the "},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"type":"text","text":" function"},{"type":"text","text":" "},{"text":"as follows:","type":"text"}]},{"code":["let firstPhoto = await downloadPhoto(named: photoNames[0])","let secondPhoto = await downloadPhoto(named: photoNames[1])","let thirdPhoto = await downloadPhoto(named: photoNames[2])","","let photos = [firstPhoto, secondPhoto, thirdPhoto]","show(photos)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This approach has an important drawback:"},{"type":"text","text":" "},{"type":"text","text":"Although the download is asynchronous"},{"type":"text","text":" "},{"text":"and lets other work happen while it progresses,","type":"text"},{"type":"text","text":" "},{"text":"only one call to ","type":"text"},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"text":" runs at a time.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Each photo downloads completely before the next one starts downloading."},{"type":"text","text":" "},{"text":"However, there’s no need for these operations to wait —","type":"text"},{"type":"text","text":" "},{"text":"each photo can download independently, or even at the same time.","type":"text"}]},{"inlineContent":[{"text":"To call an asynchronous function","type":"text"},{"text":" ","type":"text"},{"text":"and let it run in parallel with code around it,","type":"text"},{"type":"text","text":" "},{"text":"write ","type":"text"},{"code":"async","type":"codeVoice"},{"type":"text","text":" in front of "},{"type":"codeVoice","code":"let"},{"type":"text","text":" when you define a constant,"},{"type":"text","text":" "},{"type":"text","text":"and then write "},{"type":"codeVoice","code":"await"},{"text":" each time you use the constant.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["async let firstPhoto = downloadPhoto(named: photoNames[0])","async let secondPhoto = downloadPhoto(named: photoNames[1])","async let thirdPhoto = downloadPhoto(named: photoNames[2])","","let photos = await [firstPhoto, secondPhoto, thirdPhoto]","show(photos)"]},{"inlineContent":[{"type":"text","text":"In this example,"},{"text":" ","type":"text"},{"type":"text","text":"all three calls to "},{"type":"codeVoice","code":"downloadPhoto(named:)"},{"type":"text","text":" start"},{"type":"text","text":" "},{"type":"text","text":"without waiting for the previous one to complete."},{"type":"text","text":" "},{"text":"If there are enough system resources available, they can run at the same time.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"None of these function calls are marked with "},{"code":"await","type":"codeVoice"},{"type":"text","text":" "},{"text":"because the code doesn’t suspend to wait for the function’s result.","type":"text"},{"type":"text","text":" "},{"text":"Instead, execution continues","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"until the line where "},{"code":"photos","type":"codeVoice"},{"text":" is defined —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"at that point, the program needs the results from these asynchronous calls,"},{"text":" ","type":"text"},{"text":"so you write ","type":"text"},{"type":"codeVoice","code":"await"},{"type":"text","text":" to pause execution"},{"text":" ","type":"text"},{"text":"until all three photos finish downloading.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how you can think about the differences between these two approaches:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call asynchronous functions with "},{"code":"await","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"when the code on the following lines depends on that function’s result."},{"type":"text","text":" "},{"type":"text","text":"This creates work that is carried out sequentially."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Call asynchronous functions with "},{"type":"codeVoice","code":"async"},{"type":"text","text":"-"},{"type":"codeVoice","code":"let"},{"type":"text","text":" "},{"type":"text","text":"when you don’t need the result until later in your code."},{"text":" ","type":"text"},{"text":"This creates work that can be carried out in parallel.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Both ","type":"text"},{"code":"await","type":"codeVoice"},{"type":"text","text":" and "},{"code":"async","type":"codeVoice"},{"text":"-","type":"text"},{"code":"let","type":"codeVoice"},{"text":" ","type":"text"},{"text":"allow other code to run while they’re suspended.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"In both cases, you mark the possible suspension point with ","type":"text"},{"code":"await","type":"codeVoice"},{"text":" ","type":"text"},{"text":"to indicate that execution will pause, if needed,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"until an asynchronous function has returned."}]}]}]},{"type":"paragraph","inlineContent":[{"text":"You can also mix both of these approaches in the same code.","type":"text"}]},{"anchor":"Tasks-and-Task-Groups","level":2,"type":"heading","text":"Tasks and Task Groups"},{"inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"task"}],"type":"emphasis"},{"text":" is a unit of work","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that can be run asynchronously as part of your program."},{"type":"text","text":" "},{"type":"text","text":"All asynchronous code runs as part of some task."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"async","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"let"},{"text":" syntax described in the previous section","type":"text"},{"type":"text","text":" "},{"text":"creates a child task for you.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can also create a task group"},{"text":" ","type":"text"},{"text":"and add child tasks to that group,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which gives you more control over priority and cancellation,"},{"type":"text","text":" "},{"text":"and lets you create a dynamic number of tasks.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tasks are arranged in a hierarchy."},{"type":"text","text":" "},{"text":"Each task in a task group has the same parent task,","type":"text"},{"type":"text","text":" "},{"text":"and each task can have child tasks.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because of the explicit relationship between tasks and task groups,"},{"type":"text","text":" "},{"text":"this approach is called ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"structured concurrency","type":"text"}]},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Although you take on some of the responsibility for correctness,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the explicit parent-child relationships between tasks"},{"type":"text","text":" "},{"type":"text","text":"let Swift handle some behaviors like propagating cancellation for you,"},{"text":" ","type":"text"},{"text":"and lets Swift detect some errors at compile time.","type":"text"}]},{"type":"codeListing","code":["await withTaskGroup(of: Data.self) { taskGroup in","    let photoNames = await listPhotos(inGallery: \"Summer Vacation\")","    for name in photoNames {","        taskGroup.addTask { await downloadPhoto(named: name) }","    }","}"],"syntax":"swift"},{"inlineContent":[{"text":"For more information about task groups,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/taskgroup","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","level":3,"text":"Unstructured Concurrency","anchor":"Unstructured-Concurrency"},{"inlineContent":[{"type":"text","text":"In addition to the structured approaches to concurrency"},{"type":"text","text":" "},{"type":"text","text":"described in the previous sections,"},{"text":" ","type":"text"},{"text":"Swift also supports unstructured concurrency.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Unlike tasks that are part of a task group,"},{"text":" ","type":"text"},{"text":"an ","type":"text"},{"inlineContent":[{"text":"unstructured task","type":"text"}],"type":"emphasis"},{"type":"text","text":" doesn’t have a parent task."},{"text":" ","type":"text"},{"text":"You have complete flexibility to manage unstructured tasks","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in whatever way your program needs,"},{"type":"text","text":" "},{"text":"but you’re also completely responsible for their correctness.","type":"text"},{"type":"text","text":" "},{"text":"To create an unstructured task that runs on the current actor,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"call the "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856790-init","type":"reference"},{"type":"text","text":" initializer."},{"type":"text","text":" "},{"text":"To create an unstructured task that’s not part of the current actor,","type":"text"},{"type":"text","text":" "},{"text":"known more specifically as a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"detached task"}]},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"call the "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856786-detached","isActive":true,"type":"reference"},{"text":" class method.","type":"text"},{"text":" ","type":"text"},{"text":"Both of these operations return a task that you can interact with —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for example, to wait for its result or to cancel it."}],"type":"paragraph"},{"type":"codeListing","code":["let newPhoto = \/\/ ... some photo data ...","let handle = Task {","    return await add(newPhoto, toGalleryNamed: \"Spring Adventures\")","}","let result = await handle.value"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"For more information about managing detached tasks,"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Task-Cancellation","text":"Task Cancellation","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift concurrency uses a cooperative cancellation model."},{"type":"text","text":" "},{"type":"text","text":"Each task checks whether it has been canceled"},{"text":" ","type":"text"},{"type":"text","text":"at the appropriate points in its execution,"},{"text":" ","type":"text"},{"text":"and responds to cancellation in whatever way is appropriate.","type":"text"},{"type":"text","text":" "},{"text":"Depending on the work you’re doing,","type":"text"},{"text":" ","type":"text"},{"text":"that usually means one of the following:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Throwing an error like "},{"type":"codeVoice","code":"CancellationError"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Returning "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" or an empty collection"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Returning the partially completed work","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"To check for cancellation,"},{"type":"text","text":" "},{"type":"text","text":"either call "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814826-checkcancellation","isActive":true,"type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"which throws ","type":"text"},{"code":"CancellationError","type":"codeVoice"},{"text":" if the task has been canceled,","type":"text"},{"type":"text","text":" "},{"text":"or check the value of ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814832-iscancelled","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"and handle the cancellation in your own code."},{"text":" ","type":"text"},{"text":"For example,","type":"text"},{"text":" ","type":"text"},{"text":"a task that’s downloading photos from a gallery","type":"text"},{"type":"text","text":" "},{"type":"text","text":"might need to delete partial downloads and close network connections."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To propagate cancellation manually,"},{"type":"text","text":" "},{"type":"text","text":"call "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3851218-cancel"},{"type":"text","text":"."}],"type":"paragraph"},{"anchor":"Actors","text":"Actors","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use tasks to break up your program into isolated, concurrent pieces."},{"type":"text","text":" "},{"type":"text","text":"Tasks are isolated from each other,"},{"type":"text","text":" "},{"type":"text","text":"which is what makes it safe for them to run at the same time,"},{"text":" ","type":"text"},{"text":"but sometimes you need to share some information between tasks.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Actors let you safely share information between concurrent code."}]},{"inlineContent":[{"type":"text","text":"Like classes, actors are reference types,"},{"type":"text","text":" "},{"type":"text","text":"so the comparison of value types and reference types"},{"text":" ","type":"text"},{"type":"text","text":"in "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Classes-Are-Reference-Types","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"applies to actors as well as classes."},{"type":"text","text":" "},{"type":"text","text":"Unlike classes,"},{"text":" ","type":"text"},{"type":"text","text":"actors allow only one task to access their mutable state at a time,"},{"text":" ","type":"text"},{"text":"which makes it safe for code in multiple tasks","type":"text"},{"text":" ","type":"text"},{"text":"to interact with the same instance of an actor.","type":"text"},{"text":" ","type":"text"},{"text":"For example, here’s an actor that records temperatures:","type":"text"}],"type":"paragraph"},{"code":["actor TemperatureLogger {","    let label: String","    var measurements: [Int]","    private(set) var max: Int","","    init(label: String, measurement: Int) {","        self.label = label","        self.measurements = [measurement]","        self.max = measurement","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You introduce an actor with the ","type":"text"},{"type":"codeVoice","code":"actor"},{"type":"text","text":" keyword,"},{"text":" ","type":"text"},{"type":"text","text":"followed by its definition in a pair of braces."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"type":"codeVoice","code":"TemperatureLogger"},{"text":" actor has properties","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that other code outside the actor can access,"},{"type":"text","text":" "},{"type":"text","text":"and restricts the "},{"type":"codeVoice","code":"max"},{"text":" property so only code inside the actor","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can update the maximum value."}]},{"inlineContent":[{"type":"text","text":"You create an instance of an actor"},{"text":" ","type":"text"},{"type":"text","text":"using the same initializer syntax as structures and classes."},{"text":" ","type":"text"},{"text":"When you access a property or method of an actor,","type":"text"},{"type":"text","text":" "},{"text":"you use ","type":"text"},{"type":"codeVoice","code":"await"},{"text":" to mark the potential suspension point.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let logger = TemperatureLogger(label: \"Outdoors\", measurement: 25)","print(await logger.max)","\/\/ Prints \"25\""]},{"type":"paragraph","inlineContent":[{"text":"In this example,","type":"text"},{"text":" ","type":"text"},{"text":"accessing ","type":"text"},{"code":"logger.max","type":"codeVoice"},{"type":"text","text":" is a possible suspension point."},{"type":"text","text":" "},{"text":"Because the actor allows only one task at a time to access its mutable state,","type":"text"},{"text":" ","type":"text"},{"text":"if code from another task is already interacting with the logger,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"this code suspends while it waits to access the property."}]},{"inlineContent":[{"type":"text","text":"In contrast,"},{"text":" ","type":"text"},{"text":"code that’s part of the actor doesn’t write ","type":"text"},{"type":"codeVoice","code":"await"},{"type":"text","text":" "},{"text":"when accessing the actor’s properties.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"text":"here’s a method that updates a ","type":"text"},{"code":"TemperatureLogger","type":"codeVoice"},{"type":"text","text":" with a new temperature:"}],"type":"paragraph"},{"code":["extension TemperatureLogger {","    func update(with measurement: Int) {","        measurements.append(measurement)","        if measurement > max {","            max = measurement","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"update(with:)"},{"type":"text","text":" method is already running on the actor,"},{"type":"text","text":" "},{"type":"text","text":"so it doesn’t mark its access to properties like "},{"code":"max","type":"codeVoice"},{"type":"text","text":" with "},{"code":"await","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This method also shows one of the reasons"},{"text":" ","type":"text"},{"type":"text","text":"why actors allow only one task at a time to interact with their mutable state:"},{"type":"text","text":" "},{"type":"text","text":"Some updates to an actor’s state temporarily break invariants."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"TemperatureLogger","type":"codeVoice"},{"text":" actor keeps track of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a list of temperatures and a maximum temperature,"},{"type":"text","text":" "},{"type":"text","text":"and it updates the maximum temperature when you record a new measurement."},{"type":"text","text":" "},{"type":"text","text":"In the middle of an update,"},{"text":" ","type":"text"},{"text":"after appending the new measurement but before updating ","type":"text"},{"code":"max","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"the temperature logger is in a temporary inconsistent state."},{"type":"text","text":" "},{"type":"text","text":"Preventing multiple tasks from interacting with the same instance simultaneously"},{"type":"text","text":" "},{"text":"prevents problems like the following sequence of events:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Your code calls the "},{"type":"codeVoice","code":"update(with:)"},{"text":" method.","type":"text"},{"type":"text","text":" "},{"text":"It updates the ","type":"text"},{"type":"codeVoice","code":"measurements"},{"type":"text","text":" array first."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before your code can update "},{"type":"codeVoice","code":"max"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"code elsewhere reads the maximum value and the array of temperatures.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Your code finishes its update by changing "},{"code":"max","type":"codeVoice"},{"type":"text","text":"."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this case,"},{"text":" ","type":"text"},{"type":"text","text":"the code running elsewhere would read incorrect information"},{"text":" ","type":"text"},{"type":"text","text":"because its access to the actor was interleaved"},{"type":"text","text":" "},{"type":"text","text":"in the middle of the call to "},{"type":"codeVoice","code":"update(with:)"},{"text":" ","type":"text"},{"text":"while the data was temporarily invalid.","type":"text"},{"text":" ","type":"text"},{"text":"You can prevent this problem when using Swift actors","type":"text"},{"type":"text","text":" "},{"type":"text","text":"because they only allow one operation on their state at a time,"},{"text":" ","type":"text"},{"type":"text","text":"and because that code can be interrupted"},{"text":" ","type":"text"},{"type":"text","text":"only in places where "},{"code":"await","type":"codeVoice"},{"type":"text","text":" marks a suspension point."},{"text":" ","type":"text"},{"type":"text","text":"Because "},{"type":"codeVoice","code":"update(with:)"},{"text":" doesn’t contain any suspension points,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"no other code can access the data in the middle of an update."}]},{"type":"paragraph","inlineContent":[{"text":"If you try to access those properties from outside the actor,","type":"text"},{"text":" ","type":"text"},{"text":"like you would with an instance of a class,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you’ll get a compile-time error."},{"text":" ","type":"text"},{"type":"text","text":"For example:"}]},{"syntax":"swift","type":"codeListing","code":["print(logger.max)  \/\/ Error"]},{"inlineContent":[{"type":"text","text":"Accessing "},{"type":"codeVoice","code":"logger.max"},{"type":"text","text":" without writing "},{"type":"codeVoice","code":"await"},{"type":"text","text":" fails because"},{"text":" ","type":"text"},{"type":"text","text":"the properties of an actor are part of that actor’s isolated local state."},{"type":"text","text":" "},{"type":"text","text":"Swift guarantees that"},{"text":" ","type":"text"},{"text":"only code inside an actor can access the actor’s local state.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This guarantee is known as "},{"inlineContent":[{"type":"text","text":"actor isolation"}],"type":"emphasis"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Sendable Types","level":2,"type":"heading","anchor":"Sendable-Types"},{"inlineContent":[{"type":"text","text":"Tasks and actors let you divide a program"},{"text":" ","type":"text"},{"type":"text","text":"into pieces that can safely run concurrently."},{"text":" ","type":"text"},{"text":"Inside of a task or an instance of an actor,","type":"text"},{"type":"text","text":" "},{"text":"the part of a program that contains mutable state,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"like variables and properties,"},{"type":"text","text":" "},{"type":"text","text":"is called a "},{"inlineContent":[{"type":"text","text":"concurrency domain"}],"type":"emphasis"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Some kinds of data can’t be shared between concurrency domains,"},{"text":" ","type":"text"},{"type":"text","text":"because that data contains mutable state,"},{"type":"text","text":" "},{"type":"text","text":"but it doesn’t protect against overlapping access."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A type that can be shared from one concurrency domain to another"},{"type":"text","text":" "},{"text":"is known as a ","type":"text"},{"inlineContent":[{"text":"sendable","type":"text"}],"type":"emphasis"},{"text":" type.","type":"text"},{"text":" ","type":"text"},{"text":"For example, it can be passed as an argument when calling an actor method","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or be returned as the result of a task."},{"text":" ","type":"text"},{"text":"The examples earlier in this chapter didn’t discuss sendability","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because those examples use simple value types"},{"text":" ","type":"text"},{"type":"text","text":"that are always safe to share"},{"type":"text","text":" "},{"type":"text","text":"for the data being passed between concurrency domains."},{"type":"text","text":" "},{"text":"In contrast,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"some types aren’t safe to pass across concurrency domains."},{"text":" ","type":"text"},{"type":"text","text":"For example, a class that contains mutable properties"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t serialize access to those properties"},{"text":" ","type":"text"},{"text":"can produce unpredictable and incorrect results","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when you pass instances of that class between different tasks."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You mark a type as being sendable"},{"text":" ","type":"text"},{"type":"text","text":"by declaring conformance to the "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" protocol."},{"text":" ","type":"text"},{"type":"text","text":"That protocol doesn’t have any code requirements,"},{"type":"text","text":" "},{"type":"text","text":"but it does have semantic requirements that Swift enforces."},{"text":" ","type":"text"},{"text":"In general, there are three ways for a type to be sendable:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"The type is a value type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and its mutable state is made up of other sendable data —"},{"type":"text","text":" "},{"text":"for example, a structure with stored properties that are sendable","type":"text"},{"type":"text","text":" "},{"text":"or an enumeration with associated values that are sendable.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The type doesn’t have any mutable state,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and its immutable state is made up of other sendable data —"},{"text":" ","type":"text"},{"text":"for example, a structure or class that has only read-only properties.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The type has code that ensures the safety of its mutable state,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"like a class that’s marked "},{"code":"@MainActor","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"or a class that serializes access to its properties"},{"type":"text","text":" "},{"type":"text","text":"on a particular thread or queue."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For a detailed list of the semantic requirements,"},{"text":" ","type":"text"},{"text":"see the ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","isActive":true,"type":"reference"},{"text":" protocol reference.","type":"text"}]},{"inlineContent":[{"text":"Some types are always sendable,","type":"text"},{"text":" ","type":"text"},{"text":"like structures that have only sendable properties","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and enumerations that have only sendable associated values."},{"text":" ","type":"text"},{"text":"For example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct TemperatureReading: Sendable {","    var measurement: Int","}","","extension TemperatureLogger {","    func addReading(from reading: TemperatureReading) {","        measurements.append(reading.measurement)","    }","}","","let logger = TemperatureLogger(label: \"Tea kettle\", measurement: 85)","let reading = TemperatureReading(measurement: 45)","await logger.addReading(from: reading)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"TemperatureReading"},{"text":" is a structure that has only sendable properties,","type":"text"},{"type":"text","text":" "},{"text":"and the structure isn’t marked ","type":"text"},{"type":"codeVoice","code":"public"},{"text":" or ","type":"text"},{"code":"@usableFromInline","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it’s implicitly sendable."},{"type":"text","text":" "},{"text":"Here’s a version of the structure","type":"text"},{"type":"text","text":" "},{"type":"text","text":"where conformance to the "},{"type":"codeVoice","code":"Sendable"},{"text":" protocol is implied:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct TemperatureReading {","    var measurement: Int","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To explicitly mark a type as not being sendable,"},{"text":" ","type":"text"},{"type":"text","text":"overriding an implicit conformance to the "},{"type":"codeVoice","code":"Sendable"},{"text":" protocol,","type":"text"},{"type":"text","text":" "},{"text":"use an extension:","type":"text"}]},{"code":["struct FileDescriptor {","    let rawValue: CInt","}","","@available(*, unavailable)","extension FileDescriptor: Sendable { }"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The code above shows part of a wrapper around POSIX file descriptors.","type":"text"},{"type":"text","text":" "},{"text":"Even though interface for file descriptors uses integers","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to identify and interact with open files,"},{"type":"text","text":" "},{"text":"and integer values are sendable,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a file descriptor isn’t safe to send across concurrency domains."}],"type":"paragraph"},{"inlineContent":[{"text":"In the code above,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"NonsendableTemperatureReading"},{"type":"text","text":" is a structure"},{"type":"text","text":" "},{"text":"that meets the criteria to be implicitly sendable.","type":"text"},{"type":"text","text":" "},{"text":"However, the extension makes its conformance to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" unavailable,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"preventing the type from being sendable."}],"type":"paragraph"}],"kind":"content"}],"references":{"https://developer.apple.com/documentation/swift/taskgroup":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/taskgroup","titleInlineContent":[{"code":"TaskGroup","type":"codeVoice"}],"title":"TaskGroup","url":"https:\/\/developer.apple.com\/documentation\/swift\/taskgroup"},"https://developer.apple.com/documentation/swift/task/3856790-init":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856790-init","titleInlineContent":[{"code":"Task.init(priority:operation:)","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856790-init","title":"Task.init(priority:operation:)"},"https://developer.apple.com/documentation/swift/task":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task","titleInlineContent":[{"code":"Task","type":"codeVoice"}],"title":"Task","url":"https:\/\/developer.apple.com\/documentation\/swift\/task"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"title":"The Swift Programming Language (5.9)","kind":"article","role":"collection","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","url":"\/documentation\/the-swift-programming-language","abstract":[],"type":"topic"},"https://developer.apple.com/documentation/swift/sequence":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence","titleInlineContent":[{"code":"Sequence","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/sequence","title":"Sequence"},"https://developer.apple.com/documentation/swift/task/sleep(until:tolerance:clock:)":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/sleep(until:tolerance:clock:)","titleInlineContent":[{"code":"Task.sleep(until:tolerance:clock:)","type":"codeVoice"}],"title":"Task.sleep(until:tolerance:clock:)","url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/sleep(until:tolerance:clock:)"},"https://developer.apple.com/documentation/swift/sendable":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","titleInlineContent":[{"code":"Sendable","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","title":"Sendable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Concurrency#Unstructured-Concurrency":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Concurrency#Unstructured-Concurrency","kind":"section","abstract":[],"title":"Unstructured Concurrency","url":"\/documentation\/the-swift-programming-language\/concurrency#Unstructured-Concurrency"},"https://developer.apple.com/documentation/swift/task/3814832-iscancelled":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814832-iscancelled","titleInlineContent":[{"code":"Task.isCancelled","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814832-iscancelled","title":"Task.isCancelled"},"https://developer.apple.com/documentation/swift/task/3814826-checkcancellation":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814826-checkcancellation","titleInlineContent":[{"code":"Task.checkCancellation()","type":"codeVoice"}],"title":"Task.checkCancellation()","url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3814826-checkcancellation"},"https://developer.apple.com/documentation/swift/asyncsequence":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/asyncsequence","titleInlineContent":[{"code":"AsyncSequence","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/asyncsequence","title":"AsyncSequence"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/ClassesAndStructures#Classes-Are-Reference-Types":{"type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/ClassesAndStructures#Classes-Are-Reference-Types","kind":"section","abstract":[],"title":"Classes Are Reference Types","url":"\/documentation\/the-swift-programming-language\/classesandstructures#Classes-Are-Reference-Types"},"https://developer.apple.com/documentation/swift/task/3856786-detached":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856786-detached","titleInlineContent":[{"code":"Task.detached(priority:operation:)","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3856786-detached","title":"Task.detached(priority:operation:)"},"https://developer.apple.com/documentation/swift/task/3851218-cancel":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3851218-cancel","titleInlineContent":[{"code":"Task.cancel()","type":"codeVoice"}],"title":"Task.cancel()","url":"https:\/\/developer.apple.com\/documentation\/swift\/task\/3851218-cancel"}}}