{"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"abstract":[{"text":"Add functionality to an existing type.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Extensions","interfaceLanguage":"swift"},"metadata":{"title":"Extensions"},"kind":"article","primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Extensions","type":"text"}]},{"type":"text","text":" add new functionality to an existing"},{"type":"text","text":" "},{"type":"text","text":"class, structure, enumeration, or protocol type."},{"type":"text","text":" "},{"type":"text","text":"This includes the ability to extend types"},{"text":" ","type":"text"},{"type":"text","text":"for which you don’t have access to the original source code"},{"text":" ","type":"text"},{"text":"(known as ","type":"text"},{"inlineContent":[{"text":"retroactive modeling","type":"text"}],"type":"emphasis"},{"text":").","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Extensions are similar to categories in Objective-C."},{"type":"text","text":" "},{"type":"text","text":"(Unlike Objective-C categories, Swift extensions don’t have names.)"}]},{"inlineContent":[{"text":"Extensions in Swift can:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Add computed instance properties and computed type properties"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Define instance methods and type methods","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide new initializers"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Define subscripts","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Define and use new nested types","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Make an existing type conform to a protocol"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift,"},{"text":" ","type":"text"},{"text":"you can even extend a protocol to provide implementations of its requirements","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or add additional functionality that conforming types can take advantage of."},{"text":" ","type":"text"},{"text":"For more details, see ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions"},{"text":".","type":"text"}]},{"name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions can add new functionality to a type,"},{"type":"text","text":" "},{"type":"text","text":"but they can’t override existing functionality."}]}],"type":"aside"},{"type":"heading","anchor":"Extension-Syntax","text":"Extension Syntax","level":2},{"type":"paragraph","inlineContent":[{"text":"Declare extensions with the ","type":"text"},{"code":"extension","type":"codeVoice"},{"type":"text","text":" keyword:"}]},{"syntax":"swift","code":["extension SomeType {","    \/\/ new functionality to add to SomeType goes here","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An extension can extend an existing type to make it adopt one or more protocols."},{"type":"text","text":" "},{"type":"text","text":"To add protocol conformance,"},{"text":" ","type":"text"},{"type":"text","text":"you write the protocol names"},{"text":" ","type":"text"},{"text":"the same way as you write them for a class or structure:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["extension SomeType: SomeProtocol, AnotherProtocol {","    \/\/ implementation of protocol requirements goes here","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Adding protocol conformance in this way is described in"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Adding-Protocol-Conformance-with-an-Extension"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"An extension can be used to extend an existing generic type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type","isActive":true,"type":"reference"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"You can also extend a generic type to conditionally add functionality,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as described in "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","type":"reference"},{"type":"text","text":"."}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you define an extension to add new functionality to an existing type,"},{"type":"text","text":" "},{"text":"the new functionality will be available on all existing instances of that type,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even if they were created before the extension was defined."}]}],"name":"Note"},{"text":"Computed Properties","anchor":"Computed-Properties","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Extensions can add computed instance properties and computed type properties to existing types."},{"type":"text","text":" "},{"type":"text","text":"This example adds five computed instance properties to Swift’s built-in "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" type,"},{"type":"text","text":" "},{"text":"to provide basic support for working with distance units:","type":"text"}],"type":"paragraph"},{"code":["extension Double {","    var km: Double { return self * 1_000.0 }","    var m: Double { return self }","    var cm: Double { return self \/ 100.0 }","    var mm: Double { return self \/ 1_000.0 }","    var ft: Double { return self \/ 3.28084 }","}","let oneInch = 25.4.mm","print(\"One inch is \\(oneInch) meters\")","\/\/ Prints \"One inch is 0.0254 meters\"","let threeFeet = 3.ft","print(\"Three feet is \\(threeFeet) meters\")","\/\/ Prints \"Three feet is 0.914399970739201 meters\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"These computed properties express that a "},{"code":"Double","type":"codeVoice"},{"text":" value","type":"text"},{"text":" ","type":"text"},{"text":"should be considered as a certain unit of length.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Although they’re implemented as computed properties,"},{"type":"text","text":" "},{"type":"text","text":"the names of these properties can be appended to"},{"type":"text","text":" "},{"type":"text","text":"a floating-point literal value with dot syntax,"},{"text":" ","type":"text"},{"text":"as a way to use that literal value to perform distance conversions.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, a "},{"code":"Double","type":"codeVoice"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"1.0"},{"text":" is considered to represent “one meter”.","type":"text"},{"type":"text","text":" "},{"text":"This is why the ","type":"text"},{"code":"m","type":"codeVoice"},{"text":" computed property returns ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" —"},{"type":"text","text":" "},{"type":"text","text":"the expression "},{"type":"codeVoice","code":"1.m"},{"type":"text","text":" is considered to calculate a "},{"type":"codeVoice","code":"Double"},{"text":" value of ","type":"text"},{"type":"codeVoice","code":"1.0"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Other units require some conversion to be expressed as a value measured in meters.","type":"text"},{"type":"text","text":" "},{"text":"One kilometer is the same as 1,000 meters,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"so the "},{"code":"km","type":"codeVoice"},{"text":" computed property multiplies the value by ","type":"text"},{"type":"codeVoice","code":"1_000.00"},{"text":" ","type":"text"},{"type":"text","text":"to convert into a number expressed in meters."},{"type":"text","text":" "},{"type":"text","text":"Similarly, there are 3.28084 feet in a meter,"},{"text":" ","type":"text"},{"type":"text","text":"and so the "},{"code":"ft","type":"codeVoice"},{"type":"text","text":" computed property divides the underlying "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" value"},{"type":"text","text":" "},{"type":"text","text":"by "},{"code":"3.28084","type":"codeVoice"},{"type":"text","text":", to convert it from feet to meters."}]},{"inlineContent":[{"type":"text","text":"These properties are read-only computed properties,"},{"text":" ","type":"text"},{"type":"text","text":"and so they’re expressed without the "},{"code":"get","type":"codeVoice"},{"text":" keyword, for brevity.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Their return value is of type "},{"type":"codeVoice","code":"Double"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"and can be used within mathematical calculations wherever a ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":" is accepted:"}],"type":"paragraph"},{"type":"codeListing","code":["let aMarathon = 42.km + 195.m","print(\"A marathon is \\(aMarathon) meters long\")","\/\/ Prints \"A marathon is 42195.0 meters long\""],"syntax":"swift"},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"Extensions can add new computed properties, but they can’t add stored properties,"},{"text":" ","type":"text"},{"text":"or add property observers to existing properties.","type":"text"}],"type":"paragraph"}],"name":"Note","type":"aside"},{"anchor":"Initializers","type":"heading","level":2,"text":"Initializers"},{"inlineContent":[{"type":"text","text":"Extensions can add new initializers to existing types."},{"text":" ","type":"text"},{"type":"text","text":"This enables you to extend other types to accept"},{"type":"text","text":" "},{"type":"text","text":"your own custom types as initializer parameters,"},{"text":" ","type":"text"},{"text":"or to provide additional initialization options","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that were not included as part of the type’s original implementation."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Extensions can add new convenience initializers to a class,"},{"type":"text","text":" "},{"type":"text","text":"but they can’t add new designated initializers or deinitializers to a class."},{"type":"text","text":" "},{"type":"text","text":"Designated initializers and deinitializers"},{"type":"text","text":" "},{"type":"text","text":"must always be provided by the original class implementation."}]},{"inlineContent":[{"text":"If you use an extension to add an initializer to a value type that provides","type":"text"},{"type":"text","text":" "},{"text":"default values for all of its stored properties","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and doesn’t define any custom initializers,"},{"type":"text","text":" "},{"text":"you can call the default initializer and memberwise initializer for that value type","type":"text"},{"type":"text","text":" "},{"text":"from within your extension’s initializer.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This wouldn’t be the case if you had written the initializer"},{"type":"text","text":" "},{"text":"as part of the value type’s original implementation,","type":"text"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Value-Types","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you use an extension to add an initializer to a structure"},{"text":" ","type":"text"},{"type":"text","text":"that was declared in another module,"},{"type":"text","text":" "},{"text":"the new initializer can’t access ","type":"text"},{"code":"self","type":"codeVoice"},{"text":" until it calls","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an initializer from the defining module."}]},{"inlineContent":[{"type":"text","text":"The example below defines a custom "},{"type":"codeVoice","code":"Rect"},{"text":" structure to represent a geometric rectangle.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The example also defines two supporting structures called "},{"type":"codeVoice","code":"Size"},{"text":" and ","type":"text"},{"code":"Point","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"both of which provide default values of ","type":"text"},{"code":"0.0","type":"codeVoice"},{"text":" for all of their properties:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct Size {","    var width = 0.0, height = 0.0","}","struct Point {","    var x = 0.0, y = 0.0","}","struct Rect {","    var origin = Point()","    var size = Size()","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Because the "},{"code":"Rect","type":"codeVoice"},{"type":"text","text":" structure provides default values for all of its properties,"},{"type":"text","text":" "},{"type":"text","text":"it receives a default initializer and a memberwise initializer automatically,"},{"text":" ","type":"text"},{"text":"as described in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Default-Initializers"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"These initializers can be used to create new ","type":"text"},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" instances:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let defaultRect = Rect()","let memberwiseRect = Rect(origin: Point(x: 2.0, y: 2.0),","    size: Size(width: 5.0, height: 5.0))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can extend the "},{"code":"Rect","type":"codeVoice"},{"type":"text","text":" structure to provide an additional initializer"},{"type":"text","text":" "},{"type":"text","text":"that takes a specific center point and size:"}]},{"type":"codeListing","syntax":"swift","code":["extension Rect {","    init(center: Point, size: Size) {","        let originX = center.x - (size.width \/ 2)","        let originY = center.y - (size.height \/ 2)","        self.init(origin: Point(x: originX, y: originY), size: size)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This new initializer starts by calculating an appropriate origin point based on"},{"type":"text","text":" "},{"text":"the provided ","type":"text"},{"type":"codeVoice","code":"center"},{"text":" point and ","type":"text"},{"code":"size","type":"codeVoice"},{"type":"text","text":" value."},{"type":"text","text":" "},{"type":"text","text":"The initializer then calls the structure’s automatic memberwise initializer"},{"type":"text","text":" "},{"type":"codeVoice","code":"init(origin:size:)"},{"text":", which stores the new origin and size values","type":"text"},{"text":" ","type":"text"},{"text":"in the appropriate properties:","type":"text"}]},{"type":"codeListing","code":["let centerRect = Rect(center: Point(x: 4.0, y: 4.0),","    size: Size(width: 3.0, height: 3.0))","\/\/ centerRect's origin is (2.5, 2.5) and its size is (3.0, 3.0)"],"syntax":"swift"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"If you provide a new initializer with an extension,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you are still responsible for making sure that each instance is fully initialized"},{"text":" ","type":"text"},{"text":"once the initializer completes.","type":"text"}]}],"type":"aside","style":"note"},{"level":2,"type":"heading","text":"Methods","anchor":"Methods"},{"inlineContent":[{"type":"text","text":"Extensions can add new instance methods and type methods to existing types."},{"type":"text","text":" "},{"type":"text","text":"The following example adds a new instance method called "},{"type":"codeVoice","code":"repetitions"},{"text":" to the ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" type:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Int {","    func repetitions(task: () -> Void) {","        for _ in 0..<self {","            task()","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"repetitions(task:)","type":"codeVoice"},{"text":" method takes a single argument of type ","type":"text"},{"code":"() -> Void","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which indicates a function that has no parameters and doesn’t return a value."}]},{"inlineContent":[{"text":"After defining this extension,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can call the "},{"code":"repetitions(task:)","type":"codeVoice"},{"type":"text","text":" method on any integer"},{"type":"text","text":" "},{"text":"to perform a task that many number of times:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["3.repetitions {","    print(\"Hello!\")","}","\/\/ Hello!","\/\/ Hello!","\/\/ Hello!"]},{"level":3,"type":"heading","text":"Mutating Instance Methods","anchor":"Mutating-Instance-Methods"},{"inlineContent":[{"text":"Instance methods added with an extension can also modify (or ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"mutate","type":"text"}]},{"text":") the instance itself.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Structure and enumeration methods that modify "},{"code":"self","type":"codeVoice"},{"type":"text","text":" or its properties"},{"text":" ","type":"text"},{"type":"text","text":"must mark the instance method as "},{"type":"codeVoice","code":"mutating"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"just like mutating methods from an original implementation.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The example below adds a new mutating method called ","type":"text"},{"type":"codeVoice","code":"square"},{"type":"text","text":" to Swift’s "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" type,"},{"text":" ","type":"text"},{"type":"text","text":"which squares the original value:"}]},{"type":"codeListing","code":["extension Int {","    mutating func square() {","        self = self * self","    }","}","var someInt = 3","someInt.square()","\/\/ someInt is now 9"],"syntax":"swift"},{"anchor":"Subscripts","level":2,"type":"heading","text":"Subscripts"},{"inlineContent":[{"type":"text","text":"Extensions can add new subscripts to an existing type."},{"type":"text","text":" "},{"text":"This example adds an integer subscript to Swift’s built-in ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":" type."},{"type":"text","text":" "},{"type":"text","text":"This subscript "},{"code":"[n]","type":"codeVoice"},{"text":" returns the decimal digit ","type":"text"},{"code":"n","type":"codeVoice"},{"text":" places in","type":"text"},{"text":" ","type":"text"},{"text":"from the right of the number:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"123456789[0]","type":"codeVoice"},{"type":"text","text":" returns "},{"type":"codeVoice","code":"9"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"123456789[1]","type":"codeVoice"},{"type":"text","text":" returns "},{"code":"8","type":"codeVoice"}]}]}]},{"inlineContent":[{"type":"text","text":"…and so on:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Int {","    subscript(digitIndex: Int) -> Int {","        var decimalBase = 1","        for _ in 0..<digitIndex {","            decimalBase *= 10","        }","        return (self \/ decimalBase) % 10","    }","}","746381295[0]","\/\/ returns 5","746381295[1]","\/\/ returns 9","746381295[2]","\/\/ returns 2","746381295[8]","\/\/ returns 7"]},{"inlineContent":[{"type":"text","text":"If the "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value doesn’t have enough digits for the requested index,"},{"text":" ","type":"text"},{"text":"the subscript implementation returns ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"as if the number had been padded with zeros to the left:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["746381295[9]","\/\/ returns 0, as if you had requested:","0746381295[9]"]},{"anchor":"Nested-Types","text":"Nested Types","type":"heading","level":2},{"inlineContent":[{"text":"Extensions can add new nested types to existing classes, structures, and enumerations:","type":"text"}],"type":"paragraph"},{"code":["extension Int {","    enum Kind {","        case negative, zero, positive","    }","    var kind: Kind {","        switch self {","        case 0:","            return .zero","        case let x where x > 0:","            return .positive","        default:","            return .negative","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This example adds a new nested enumeration to "},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"This enumeration, called ","type":"text"},{"type":"codeVoice","code":"Kind"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"expresses the kind of number that a particular integer represents."},{"type":"text","text":" "},{"type":"text","text":"Specifically, it expresses whether the number is"},{"text":" ","type":"text"},{"text":"negative, zero, or positive.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example also adds a new computed instance property to "},{"type":"codeVoice","code":"Int"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"called ","type":"text"},{"code":"kind","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which returns the appropriate ","type":"text"},{"code":"Kind","type":"codeVoice"},{"text":" enumeration case for that integer.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The nested enumeration can now be used with any "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" value:"}]},{"code":["func printIntegerKinds(_ numbers: [Int]) {","    for number in numbers {","        switch number.kind {","        case .negative:","            print(\"- \", terminator: \"\")","        case .zero:","            print(\"0 \", terminator: \"\")","        case .positive:","            print(\"+ \", terminator: \"\")","        }","    }","    print(\"\")","}","printIntegerKinds([3, 19, -27, 0, -6, 0, 7])","\/\/ Prints \"+ + - 0 - 0 + \""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This function, "},{"type":"codeVoice","code":"printIntegerKinds(_:)"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"takes an input array of "},{"type":"codeVoice","code":"Int"},{"text":" values and iterates over those values in turn.","type":"text"},{"type":"text","text":" "},{"text":"For each integer in the array,","type":"text"},{"text":" ","type":"text"},{"text":"the function considers the ","type":"text"},{"type":"codeVoice","code":"kind"},{"text":" computed property for that integer,","type":"text"},{"text":" ","type":"text"},{"text":"and prints an appropriate description.","type":"text"}],"type":"paragraph"},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"code":"number.kind","type":"codeVoice"},{"type":"text","text":" is already known to be of type "},{"type":"codeVoice","code":"Int.Kind"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Because of this, all of the "},{"type":"codeVoice","code":"Int.Kind"},{"text":" case values","type":"text"},{"type":"text","text":" "},{"text":"can be written in shorthand form inside the ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statement,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"such as "},{"type":"codeVoice","code":".negative"},{"text":" rather than ","type":"text"},{"type":"codeVoice","code":"Int.Kind.negative"},{"text":".","type":"text"}]}]}],"kind":"content"}],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Protocol-Extensions":{"title":"Protocol Extensions","url":"\/documentation\/the-swift-programming-language\/protocols#Protocol-Extensions","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Protocol-Extensions","abstract":[],"type":"topic","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Default-Initializers":{"type":"topic","abstract":[],"kind":"section","url":"\/documentation\/the-swift-programming-language\/initialization#Default-Initializers","title":"Default Initializers","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Default-Initializers"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Protocols#Adding-Protocol-Conformance-with-an-Extension":{"url":"\/documentation\/the-swift-programming-language\/protocols#Adding-Protocol-Conformance-with-an-Extension","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Protocols#Adding-Protocol-Conformance-with-an-Extension","abstract":[],"title":"Adding Protocol Conformance with an Extension"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","type":"topic","role":"collection","title":"The Swift Programming Language (5.9)","abstract":[]},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Initializer-Delegation-for-Value-Types":{"url":"\/documentation\/the-swift-programming-language\/initialization#Initializer-Delegation-for-Value-Types","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Initializer-Delegation-for-Value-Types","abstract":[],"title":"Initializer Delegation for Value Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extending-a-Generic-Type":{"title":"Extending a Generic Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extending-a-Generic-Type","url":"\/documentation\/the-swift-programming-language\/generics#Extending-a-Generic-Type","abstract":[],"type":"topic","kind":"section"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Extensions-with-a-Generic-Where-Clause":{"url":"\/documentation\/the-swift-programming-language\/generics#Extensions-with-a-Generic-Where-Clause","kind":"section","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Extensions-with-a-Generic-Where-Clause","abstract":[],"title":"Extensions with a Generic Where Clause"}}}