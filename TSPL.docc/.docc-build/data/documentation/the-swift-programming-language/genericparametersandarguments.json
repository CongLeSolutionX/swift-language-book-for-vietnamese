{"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"sections":[],"abstract":[{"type":"text","text":"Generalize declarations to abstract away concrete types."}],"kind":"article","schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"content":[{"inlineContent":[{"text":"This chapter describes parameters and arguments for generic types, functions, and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"initializers. When you declare a generic type, function, subscript, or initializer,"},{"type":"text","text":" "},{"text":"you specify the type parameters that the generic type, function, or initializer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can work with. These type parameters act as placeholders that"},{"type":"text","text":" "},{"text":"are replaced by actual concrete type arguments when an instance of a generic type is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"created or a generic function or initializer is called."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For an overview of generics in Swift, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics"},{"type":"text","text":"."}]},{"anchor":"Generic-Parameter-Clause","text":"Generic Parameter Clause","type":"heading","level":2},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"generic parameter clause"}],"type":"emphasis"},{"text":" specifies the type parameters of a generic","type":"text"},{"text":" ","type":"text"},{"text":"type or function, along with any associated constraints and requirements on those parameters.","type":"text"},{"text":" ","type":"text"},{"text":"A generic parameter clause is enclosed in angle brackets (<>)","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and has the following form:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["<<#generic parameter list#>>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"type":"text","text":"generic parameter list"}],"type":"emphasis"},{"type":"text","text":" is a comma-separated list of generic parameters,"},{"text":" ","type":"text"},{"type":"text","text":"each of which has the following form:"}]},{"type":"codeListing","syntax":"swift","code":["<#type parameter#>: <#constraint#>"]},{"inlineContent":[{"type":"text","text":"A generic parameter consists of a "},{"type":"emphasis","inlineContent":[{"text":"type parameter","type":"text"}]},{"type":"text","text":" followed by"},{"type":"text","text":" "},{"text":"an optional ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"constraint","type":"text"}]},{"text":". A ","type":"text"},{"inlineContent":[{"type":"text","text":"type parameter"}],"type":"emphasis"},{"text":" is simply the name","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of a placeholder type"},{"text":" ","type":"text"},{"type":"text","text":"(for example, "},{"code":"T","type":"codeVoice"},{"type":"text","text":", "},{"code":"U","type":"codeVoice"},{"text":", ","type":"text"},{"code":"V","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Key"},{"type":"text","text":", "},{"type":"codeVoice","code":"Value"},{"type":"text","text":", and so on)."},{"text":" ","type":"text"},{"text":"You have access to the type parameters (and any of their associated types) in the rest of the","type":"text"},{"text":" ","type":"text"},{"text":"type, function, or initializer declaration, including in the signature of the function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or initializer."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"text":"constraint","type":"text"}],"type":"emphasis"},{"text":" specifies that a type parameter inherits","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from a specific class or conforms to a protocol or protocol composition."},{"text":" ","type":"text"},{"text":"For example, in the generic function below, the generic parameter ","type":"text"},{"type":"codeVoice","code":"T: Comparable"},{"type":"text","text":" "},{"type":"text","text":"indicates that any type argument substituted"},{"text":" ","type":"text"},{"text":"for the type parameter ","type":"text"},{"code":"T","type":"codeVoice"},{"type":"text","text":" must conform to the "},{"type":"codeVoice","code":"Comparable"},{"text":" protocol.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func simpleMax<T: Comparable>(_ x: T, _ y: T) -> T {","    if x < y {","        return y","    }","    return x","}"]},{"inlineContent":[{"type":"text","text":"Because "},{"code":"Int","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":", for example, both conform to the "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" protocol,"},{"text":" ","type":"text"},{"type":"text","text":"this function accepts arguments of either type. In contrast with generic types, you don’t"},{"type":"text","text":" "},{"type":"text","text":"specify a generic argument clause when you use a generic function or initializer."},{"type":"text","text":" "},{"type":"text","text":"The type arguments are instead inferred from the type of the arguments passed"},{"text":" ","type":"text"},{"type":"text","text":"to the function or initializer."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["simpleMax(17, 42) \/\/ T is inferred to be Int","simpleMax(3.14159, 2.71828) \/\/ T is inferred to be Double"]},{"anchor":"Generic-Where-Clauses","level":3,"type":"heading","text":"Generic Where Clauses"},{"type":"paragraph","inlineContent":[{"text":"You can specify additional requirements on type parameters and their associated types","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by including a generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause right before the opening curly brace"},{"type":"text","text":" "},{"type":"text","text":"of a type or function’s body."},{"text":" ","type":"text"},{"text":"A generic ","type":"text"},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause consists of the "},{"code":"where","type":"codeVoice"},{"text":" keyword,","type":"text"},{"type":"text","text":" "},{"text":"followed by a comma-separated list of one or more ","type":"text"},{"inlineContent":[{"type":"text","text":"requirements"}],"type":"emphasis"},{"type":"text","text":"."}]},{"code":["where <#requirements#>"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirements"}]},{"type":"text","text":" in a generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause specify that a type parameter inherits from"},{"text":" ","type":"text"},{"type":"text","text":"a class or conforms to a protocol or protocol composition."},{"type":"text","text":" "},{"text":"Although the generic ","type":"text"},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause provides syntactic"},{"type":"text","text":" "},{"type":"text","text":"sugar for expressing simple constraints on type parameters"},{"text":" ","type":"text"},{"text":"(for example, ","type":"text"},{"code":"<T: Comparable>","type":"codeVoice"},{"type":"text","text":" is equivalent to "},{"type":"codeVoice","code":"<T> where T: Comparable"},{"text":" and so on),","type":"text"},{"type":"text","text":" "},{"text":"you can use it to provide more complex constraints on type parameters","type":"text"},{"text":" ","type":"text"},{"text":"and their associated types. For example,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can constrain the associated types of type parameters to conform to protocols."},{"text":" ","type":"text"},{"text":"For example, ","type":"text"},{"code":"<S: Sequence> where S.Iterator.Element: Equatable","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"specifies that "},{"type":"codeVoice","code":"S"},{"type":"text","text":" conforms to the "},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":" protocol"},{"text":" ","type":"text"},{"type":"text","text":"and that the associated type "},{"type":"codeVoice","code":"S.Iterator.Element"},{"type":"text","text":" "},{"type":"text","text":"conforms to the "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol."},{"text":" ","type":"text"},{"type":"text","text":"This constraint ensures that each element of the sequence is equatable."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also specify the requirement that two types be identical,"},{"text":" ","type":"text"},{"text":"using the ","type":"text"},{"type":"codeVoice","code":"=="},{"type":"text","text":" operator. For example,"},{"type":"text","text":" "},{"type":"codeVoice","code":"<S1: Sequence, S2: Sequence> where S1.Iterator.Element == S2.Iterator.Element"},{"text":" ","type":"text"},{"type":"text","text":"expresses the constraints that "},{"code":"S1","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"S2"},{"text":" conform to the ","type":"text"},{"type":"codeVoice","code":"Sequence"},{"text":" protocol","type":"text"},{"text":" ","type":"text"},{"text":"and that the elements of both sequences must be of the same type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Any type argument substituted for a type parameter must","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"meet all the constraints and requirements placed on the type parameter."}]},{"inlineContent":[{"text":"A generic ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clause can appear","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as part of a declaration that includes type parameters,"},{"text":" ","type":"text"},{"text":"or as part of a declaration","type":"text"},{"type":"text","text":" "},{"text":"that’s nested inside of a declaration that includes type parameters.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The generic "},{"code":"where","type":"codeVoice"},{"text":" clause for a nested declaration","type":"text"},{"type":"text","text":" "},{"text":"can still refer to the type parameters of the enclosing declaration;","type":"text"},{"text":" ","type":"text"},{"text":"however,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the requirements from that "},{"type":"codeVoice","code":"where"},{"text":" clause","type":"text"},{"text":" ","type":"text"},{"text":"apply only to the declaration where it’s written.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If the enclosing declaration also has a ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" clause,","type":"text"},{"type":"text","text":" "},{"text":"the requirements from both clauses are combined.","type":"text"},{"type":"text","text":" "},{"text":"In the example below, ","type":"text"},{"type":"codeVoice","code":"startsWithZero()"},{"text":" is available","type":"text"},{"type":"text","text":" "},{"type":"text","text":"only if "},{"type":"codeVoice","code":"Element"},{"text":" conforms to both ","type":"text"},{"code":"SomeProtocol","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Numeric","type":"codeVoice"},{"type":"text","text":"."}]},{"code":["extension Collection where Element: SomeProtocol {","    func startsWithZero() -> Bool where Element: Numeric {","        return first == .zero","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can overload a generic function or initializer by providing different"},{"text":" ","type":"text"},{"type":"text","text":"constraints, requirements, or both on the type parameters."},{"text":" ","type":"text"},{"type":"text","text":"When you call an overloaded generic function or initializer,"},{"text":" ","type":"text"},{"type":"text","text":"the compiler uses these constraints to resolve which overloaded function"},{"type":"text","text":" "},{"text":"or initializer to invoke.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information about generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clauses and to see an example"},{"type":"text","text":" "},{"text":"of one in a generic function declaration,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses","type":"reference","isActive":true},{"text":".","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"inlineContent":[{"inlineContent":[{"type":"text","text":"generic-parameter-clause"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"codeVoice","code":"<"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"text":"generic-parameter-list","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":">"}],"type":"strong"},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-parameter-list"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-parameter"}]},{"text":" | ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-parameter"}]},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":",","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"generic-parameter-list","type":"text"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"generic-parameter","type":"text"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-name"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"inlineContent":[{"type":"text","text":"generic-parameter"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type-name","type":"text"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":":"}],"type":"strong"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-identifier"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"generic-parameter","type":"text"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"type-name"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":":","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"protocol-composition-type","type":"text"}]}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"generic-where-clause"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"code":"where","type":"codeVoice"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"requirement-list"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirement-list"}]},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirement"}]},{"text":" | ","type":"text"},{"inlineContent":[{"type":"text","text":"requirement"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":","}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"requirement-list","type":"text"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirement"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"conformance-requirement"}]},{"text":" | ","type":"text"},{"inlineContent":[{"type":"text","text":"same-type-requirement"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"conformance-requirement","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"text":"type-identifier","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":":"}]},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"type-identifier","type":"text"}]},{"type":"text","text":" "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"conformance-requirement"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type-identifier","type":"text"}]},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":":"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"protocol-composition-type","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"same-type-requirement"}]},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type-identifier"}]},{"type":"text","text":" "},{"inlineContent":[{"type":"codeVoice","code":"=="}],"type":"strong"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"}]}],"type":"aside","style":"note","name":"Grammar of a generic parameter clause"},{"level":2,"type":"heading","text":"Generic Argument Clause","anchor":"Generic-Argument-Clause"},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"generic argument clause","type":"text"}],"type":"emphasis"},{"type":"text","text":" specifies the type arguments of a generic"},{"type":"text","text":" "},{"text":"type.","type":"text"},{"text":" ","type":"text"},{"text":"A generic argument clause is enclosed in angle brackets (<>)","type":"text"},{"text":" ","type":"text"},{"text":"and has the following form:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["<<#generic argument list#>>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic argument list"}]},{"text":" is a comma-separated list of type arguments.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"type argument","type":"text"}]},{"text":" is the name of an actual concrete type that replaces","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a corresponding type parameter in the generic parameter clause of a generic type."},{"type":"text","text":" "},{"type":"text","text":"The result is a specialized version of that generic type."},{"text":" ","type":"text"},{"type":"text","text":"The example below shows a simplified version of the Swift standard library’s"},{"text":" ","type":"text"},{"type":"text","text":"generic dictionary type."}]},{"syntax":"swift","type":"codeListing","code":["struct Dictionary<Key: Hashable, Value>: Collection, ExpressibleByDictionaryLiteral {","    \/* ... *\/","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The specialized version of the generic "},{"type":"codeVoice","code":"Dictionary"},{"text":" type, ","type":"text"},{"type":"codeVoice","code":"Dictionary<String, Int>"},{"type":"text","text":" "},{"text":"is formed by replacing the generic parameters ","type":"text"},{"code":"Key: Hashable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Value","type":"codeVoice"},{"type":"text","text":" "},{"text":"with the concrete type arguments ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" and ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":". Each type argument must satisfy","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"all the constraints of the generic parameter it replaces, including any additional"},{"type":"text","text":" "},{"text":"requirements specified in a generic ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" clause. In the example above,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"Key","type":"codeVoice"},{"text":" type parameter is constrained to conform to the ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":" protocol","type":"text"},{"type":"text","text":" "},{"text":"and therefore ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" must also conform to the ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":" protocol."}]},{"inlineContent":[{"type":"text","text":"You can also replace a type parameter with a type argument that’s itself"},{"text":" ","type":"text"},{"type":"text","text":"a specialized version of a generic type (provided it satisfies the appropriate"},{"type":"text","text":" "},{"text":"constraints and requirements). For example, you can replace the type parameter","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Element"},{"text":" in ","type":"text"},{"type":"codeVoice","code":"Array<Element>"},{"type":"text","text":" with a specialized version of an array, "},{"type":"codeVoice","code":"Array<Int>"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"to form an array whose elements are themselves arrays of integers.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let arrayOfArrays: Array<Array<Int>> = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"As mentioned in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments#Generic-Parameter-Clause"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you don’t use a generic argument clause to specify the type arguments"},{"type":"text","text":" "},{"text":"of a generic function or initializer.","type":"text"}]},{"style":"note","name":"Grammar of a generic argument clause","type":"aside","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"inlineContent":[{"inlineContent":[{"text":"generic-argument-clause","type":"text"}],"type":"emphasis"},{"type":"text","text":" → "},{"inlineContent":[{"type":"codeVoice","code":"<"}],"type":"strong"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"generic-argument-list"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":">","type":"codeVoice"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"inlineContent":[{"text":"generic-argument-list","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-argument"}]},{"type":"text","text":" | "},{"inlineContent":[{"type":"text","text":"generic-argument"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"code":",","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic-argument-list"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"generic-argument"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]}],"type":"paragraph"}]}],"kind":"content"}],"metadata":{"title":"Generic Parameters and Arguments"},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics":{"kind":"article","abstract":[{"type":"text","text":"Write code that works for multiple types and specify requirements for those types."}],"url":"\/documentation\/the-swift-programming-language\/generics","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics","title":"Generics","type":"topic","role":"article"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Generics#Generic-Where-Clauses":{"kind":"section","title":"Generic Where Clauses","url":"\/documentation\/the-swift-programming-language\/generics#Generic-Where-Clauses","type":"topic","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Generics#Generic-Where-Clauses"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/GenericParametersAndArguments#Generic-Parameter-Clause":{"url":"\/documentation\/the-swift-programming-language\/genericparametersandarguments#Generic-Parameter-Clause","title":"Generic Parameter Clause","kind":"section","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/GenericParametersAndArguments#Generic-Parameter-Clause","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","url":"\/documentation\/the-swift-programming-language","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","type":"topic","role":"collection","title":"The Swift Programming Language (5.9)","abstract":[]}}}