{"metadata":{"title":"Nested Types"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/NestedTypes"},"kind":"article","schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"content":[{"inlineContent":[{"type":"text","text":"Enumerations are often created to support a specific class or structure’s functionality."},{"text":" ","type":"text"},{"type":"text","text":"Similarly, it can be convenient to define utility classes and structures"},{"text":" ","type":"text"},{"type":"text","text":"purely for use within the context of a more complex type."},{"text":" ","type":"text"},{"type":"text","text":"To accomplish this, Swift enables you to define "},{"inlineContent":[{"text":"nested types","type":"text"}],"type":"emphasis"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"whereby you nest supporting enumerations, classes, and structures","type":"text"},{"text":" ","type":"text"},{"text":"within the definition of the type they support.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To nest a type within another type,"},{"type":"text","text":" "},{"text":"write its definition within the outer braces of the type it supports.","type":"text"},{"type":"text","text":" "},{"text":"Types can be nested to as many levels as are required.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Nested-Types-in-Action","level":2,"text":"Nested Types in Action"},{"type":"paragraph","inlineContent":[{"text":"The example below defines a structure called ","type":"text"},{"code":"BlackjackCard","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which models a playing card as used in the game of Blackjack.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The "},{"code":"BlackjackCard","type":"codeVoice"},{"text":" structure contains two nested enumeration types","type":"text"},{"type":"text","text":" "},{"text":"called ","type":"text"},{"type":"codeVoice","code":"Suit"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Rank"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In Blackjack, the Ace cards have a value of either one or eleven."},{"type":"text","text":" "},{"text":"This feature is represented by a structure called ","type":"text"},{"type":"codeVoice","code":"Values"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is nested within the "},{"type":"codeVoice","code":"Rank"},{"type":"text","text":" enumeration:"}]},{"type":"codeListing","syntax":"swift","code":["struct BlackjackCard {","","    \/\/ nested Suit enumeration","    enum Suit: Character {","        case spades = \"♠\", hearts = \"♡\", diamonds = \"♢\", clubs = \"♣\"","    }","","    \/\/ nested Rank enumeration","    enum Rank: Int {","        case two = 2, three, four, five, six, seven, eight, nine, ten","        case jack, queen, king, ace","        struct Values {","            let first: Int, second: Int?","        }","        var values: Values {","            switch self {","            case .ace:","                return Values(first: 1, second: 11)","            case .jack, .queen, .king:","                return Values(first: 10, second: nil)","            default:","                return Values(first: self.rawValue, second: nil)","            }","        }","    }","","    \/\/ BlackjackCard properties and methods","    let rank: Rank, suit: Suit","    var description: String {","        var output = \"suit is \\(suit.rawValue),\"","        output += \" value is \\(rank.values.first)\"","        if let second = rank.values.second {","            output += \" or \\(second)\"","        }","        return output","    }","}"]},{"inlineContent":[{"text":"The ","type":"text"},{"code":"Suit","type":"codeVoice"},{"type":"text","text":" enumeration describes the four common playing card suits,"},{"type":"text","text":" "},{"type":"text","text":"together with a raw "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" value to represent their symbol."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Rank"},{"type":"text","text":" enumeration describes the thirteen possible playing card ranks,"},{"text":" ","type":"text"},{"text":"together with a raw ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" value to represent their face value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(This raw "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value isn’t used for the Jack, Queen, King, and Ace cards.)"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As mentioned above, the "},{"type":"codeVoice","code":"Rank"},{"text":" enumeration defines","type":"text"},{"text":" ","type":"text"},{"text":"a further nested structure of its own, called ","type":"text"},{"type":"codeVoice","code":"Values"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"This structure encapsulates the fact that most cards have one value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but the Ace card has two values."},{"text":" ","type":"text"},{"text":"The ","type":"text"},{"type":"codeVoice","code":"Values"},{"type":"text","text":" structure defines two properties to represent this:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"first"},{"text":", of type ","type":"text"},{"type":"codeVoice","code":"Int"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"second"},{"text":", of type ","type":"text"},{"type":"codeVoice","code":"Int?"},{"type":"text","text":", or “optional "},{"code":"Int","type":"codeVoice"},{"text":"”","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"code":"Rank","type":"codeVoice"},{"type":"text","text":" also defines a computed property, "},{"code":"values","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which returns an instance of the "},{"code":"Values","type":"codeVoice"},{"text":" structure.","type":"text"},{"type":"text","text":" "},{"text":"This computed property considers the rank of the card","type":"text"},{"text":" ","type":"text"},{"text":"and initializes a new ","type":"text"},{"type":"codeVoice","code":"Values"},{"text":" instance with appropriate values based on its rank.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It uses special values for "},{"type":"codeVoice","code":"jack"},{"text":", ","type":"text"},{"code":"queen","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"king"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"ace"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For the numeric cards, it uses the rank’s raw "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" value."}]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"BlackjackCard"},{"type":"text","text":" structure itself has two properties — "},{"code":"rank","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"suit","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"It also defines a computed property called ","type":"text"},{"code":"description","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which uses the values stored in "},{"code":"rank","type":"codeVoice"},{"type":"text","text":" and "},{"code":"suit","type":"codeVoice"},{"text":" to build","type":"text"},{"type":"text","text":" "},{"text":"a description of the name and value of the card.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"description"},{"text":" property uses optional binding to check whether there’s","type":"text"},{"type":"text","text":" "},{"text":"a second value to display, and if so,","type":"text"},{"type":"text","text":" "},{"text":"inserts additional description detail for that second value.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"BlackjackCard"},{"type":"text","text":" is a structure with no custom initializers,"},{"type":"text","text":" "},{"type":"text","text":"it has an implicit memberwise initializer,"},{"type":"text","text":" "},{"type":"text","text":"as described in "},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Memberwise-Initializers-for-Structure-Types","isActive":true},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"You can use this initializer to initialize a new constant called "},{"type":"codeVoice","code":"theAceOfSpades"},{"text":":","type":"text"}]},{"code":["let theAceOfSpades = BlackjackCard(rank: .ace, suit: .spades)","print(\"theAceOfSpades: \\(theAceOfSpades.description)\")","\/\/ Prints \"theAceOfSpades: suit is ♠, value is 1 or 11\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Even though "},{"code":"Rank","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Suit"},{"type":"text","text":" are nested within "},{"type":"codeVoice","code":"BlackjackCard"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"their type can be inferred from context,","type":"text"},{"text":" ","type":"text"},{"text":"and so the initialization of this instance is able to refer to the enumeration cases","type":"text"},{"text":" ","type":"text"},{"text":"by their case names (","type":"text"},{"code":".ace","type":"codeVoice"},{"text":" and ","type":"text"},{"code":".spades","type":"codeVoice"},{"type":"text","text":") alone."},{"type":"text","text":" "},{"text":"In the example above, the ","type":"text"},{"type":"codeVoice","code":"description"},{"type":"text","text":" property correctly reports that"},{"text":" ","type":"text"},{"text":"the Ace of Spades has a value of ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"11"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","text":"Referring to Nested Types","level":2,"anchor":"Referring-to-Nested-Types"},{"type":"paragraph","inlineContent":[{"text":"To use a nested type outside of its definition context,","type":"text"},{"type":"text","text":" "},{"text":"prefix its name with the name of the type it’s nested within:","type":"text"}]},{"syntax":"swift","code":["let heartsSymbol = BlackjackCard.Suit.hearts.rawValue","\/\/ heartsSymbol is \"♡\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"For the example above,","type":"text"},{"text":" ","type":"text"},{"text":"this enables the names of ","type":"text"},{"type":"codeVoice","code":"Suit"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Rank"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Values"},{"text":" to be kept deliberately short,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because their names are naturally qualified by the context in which they’re defined."}]}],"kind":"content"}],"abstract":[{"type":"text","text":"Define types inside the scope of another type."}],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"sections":[],"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Initialization#Memberwise-Initializers-for-Structure-Types":{"kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Initialization#Memberwise-Initializers-for-Structure-Types","type":"topic","url":"\/documentation\/the-swift-programming-language\/initialization#Memberwise-Initializers-for-Structure-Types","abstract":[],"title":"Memberwise Initializers for Structure Types"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"kind":"article","title":"The Swift Programming Language (5.9)","type":"topic","role":"collection","url":"\/documentation\/the-swift-programming-language","abstract":[],"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"}}}