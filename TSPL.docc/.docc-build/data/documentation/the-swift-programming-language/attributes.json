{"identifier":{"url":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two kinds of attributes in Swift —"},{"type":"text","text":" "},{"text":"those that apply to declarations and those that apply to types.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"An attribute provides additional information about the declaration or type."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"discardableResult"},{"type":"text","text":" attribute on a function declaration indicates that,"},{"text":" ","type":"text"},{"text":"although the function returns a value,","type":"text"},{"type":"text","text":" "},{"text":"the compiler shouldn’t generate a warning if the return value is unused.","type":"text"}]},{"inlineContent":[{"type":"text","text":"You specify an attribute by writing the "},{"code":"@","type":"codeVoice"},{"type":"text","text":" symbol followed by the attribute’s name"},{"text":" ","type":"text"},{"type":"text","text":"and any arguments that the attribute accepts:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@<#attribute name#>","@<#attribute name#>(<#attribute arguments#>)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some declaration attributes accept arguments"},{"text":" ","type":"text"},{"type":"text","text":"that specify more information about the attribute"},{"text":" ","type":"text"},{"text":"and how it applies to a particular declaration.","type":"text"},{"type":"text","text":" "},{"text":"These ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"attribute arguments","type":"text"}]},{"type":"text","text":" are enclosed in parentheses,"},{"type":"text","text":" "},{"type":"text","text":"and their format is defined by the attribute they belong to."}]},{"type":"paragraph","inlineContent":[{"text":"Attached macros and property wrappers also use attribute syntax.","type":"text"},{"text":" ","type":"text"},{"text":"For information about how macros expand,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Macro-Expansion-Expression","type":"reference","isActive":true},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"For information about property wrappers,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#propertyWrapper"},{"text":".","type":"text"}]},{"text":"Declaration Attributes","type":"heading","level":2,"anchor":"Declaration-Attributes"},{"inlineContent":[{"text":"You can apply a declaration attribute to declarations only.","type":"text"}],"type":"paragraph"},{"text":"attached","type":"heading","anchor":"attached","level":3},{"inlineContent":[{"text":"Apply the ","type":"text"},{"code":"attached","type":"codeVoice"},{"type":"text","text":" attribute to a macro declaration."},{"type":"text","text":" "},{"text":"The arguments to this attribute indicate the macro’s role.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For a macro that has multiple roles,"},{"type":"text","text":" "},{"type":"text","text":"apply the "},{"code":"attached","type":"codeVoice"},{"text":" macro multiple times, once for each role.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The first argument to this attribute","type":"text"},{"text":" ","type":"text"},{"text":"indicates the macros role:","type":"text"}]},{"type":"termList","items":[{"term":{"inlineContent":[{"type":"text","text":"Peer macros"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Write "},{"type":"codeVoice","code":"peer"},{"text":" as the first argument to this attribute. The type that implements the macro conforms to the ","type":"text"},{"code":"PeerMacro","type":"codeVoice"},{"text":" protocol. These macros produce new declarations in the same scope as the declaration that the macro is attached to. For example, applying a peer macro to a method of a structure can define additional methods and properties on that structure.","type":"text"}]}]}},{"term":{"inlineContent":[{"type":"text","text":"Member macros"}]},"definition":{"content":[{"inlineContent":[{"type":"text","text":"Write "},{"code":"member","type":"codeVoice"},{"type":"text","text":" as the first argument to this attribute. The type that implements the macro conforms to the "},{"type":"codeVoice","code":"MemberMacro"},{"text":" protocol. These macros produce new declarations that are members of the type or extension that the macro is attached to. For example, applying a member macro to a structure declaration can define additional methods and properties on that structure.","type":"text"}],"type":"paragraph"}]}},{"term":{"inlineContent":[{"type":"text","text":"Member attribute"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"Write ","type":"text"},{"code":"memberAttribute","type":"codeVoice"},{"text":" as the first argument to this attribute. The type that implements the macro conforms to the ","type":"text"},{"type":"codeVoice","code":"MemberAttributeMacro"},{"type":"text","text":" protocol. These macros add attributes to members of the type or extension that the macro is attached to."}]}]}},{"term":{"inlineContent":[{"text":"Accessor macros","type":"text"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"Write ","type":"text"},{"code":"accessor","type":"codeVoice"},{"type":"text","text":" as the first argument to this attribute. The type that implements the macro conforms to the "},{"type":"codeVoice","code":"AccessorMacro"},{"text":" protocol. These macros add accessors to the stored property they’re attached to, turning it into a computed property.","type":"text"}]}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"Write ","type":"text"},{"code":"conformance","type":"codeVoice"},{"text":" as the first argument to this attribute. The type that implements the macro conforms to the ","type":"text"},{"code":"ConformanceMacro","type":"codeVoice"},{"type":"text","text":" protocol. These macros add protocol conformance to the type they’re attached to."}]}]},"term":{"inlineContent":[{"type":"text","text":"Conformance macros"}]}}]},{"inlineContent":[{"type":"text","text":"The peer, member, and accessor macro roles require a "},{"code":"named:","type":"codeVoice"},{"type":"text","text":" argument,"},{"type":"text","text":" "},{"text":"listing the names of the symbols that the macro generates.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"When a macro declaration includes the "},{"code":"named:","type":"codeVoice"},{"type":"text","text":" argument,"},{"type":"text","text":" "},{"type":"text","text":"the macro implementation must generate"},{"text":" ","type":"text"},{"text":"only symbol with names that match that list.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"That said,"},{"type":"text","text":" "},{"type":"text","text":"a macro need not generate a symbol for every listed name."},{"text":" ","type":"text"},{"type":"text","text":"The value for that argument is a list of one or more of the following:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"named(<#name#>)"},{"text":" ","type":"text"},{"text":"where ","type":"text"},{"inlineContent":[{"text":"name","type":"text"}],"type":"emphasis"},{"text":" is that fixed symbol name,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for a name that’s known in advance."}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"overloaded"},{"type":"text","text":" "},{"text":"for a name that’s the same as an existing symbol.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"prefixed(<#prefix#>)"},{"text":" ","type":"text"},{"text":"where ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"prefix"}]},{"text":" is prepended to the symbol name,","type":"text"},{"text":" ","type":"text"},{"text":"for a name that starts with a fixed string.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"suffixed(<#suffix#>"},{"type":"text","text":" "},{"type":"text","text":"where "},{"inlineContent":[{"type":"text","text":"suffix"}],"type":"emphasis"},{"text":" is appended to the symbol name,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for a name that ends with a fixed string."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"arbitrary"},{"type":"text","text":" "},{"type":"text","text":"for a name that can’t be determined until macro expansion."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"As a special case,"},{"type":"text","text":" "},{"type":"text","text":"you can write "},{"type":"codeVoice","code":"prefixed($)"},{"text":" ","type":"text"},{"text":"for a macro that behaves similar to a property wrapper.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"anchor":"available","text":"available"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to indicate a declaration’s life cycle"},{"text":" ","type":"text"},{"type":"text","text":"relative to certain Swift language versions"},{"text":" ","type":"text"},{"type":"text","text":"or certain platforms and operating system versions."}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"available"},{"text":" attribute always appears","type":"text"},{"type":"text","text":" "},{"text":"with a list of two or more comma-separated attribute arguments.","type":"text"},{"text":" ","type":"text"},{"text":"These arguments begin with one of the following platform or language names:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"code":"iOS","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"iOSApplicationExtension","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"macOS"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"macOSApplicationExtension","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"code":"macCatalyst","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"macCatalystApplicationExtension"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"watchOS","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"watchOSApplicationExtension","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"tvOS"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"tvOSApplicationExtension"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"visionOS"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"swift","type":"codeVoice"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"You can also use an asterisk ("},{"type":"codeVoice","code":"*"},{"text":") to indicate the","type":"text"},{"text":" ","type":"text"},{"text":"availability of the declaration on all of the platform names listed above.","type":"text"},{"type":"text","text":" "},{"text":"An ","type":"text"},{"type":"codeVoice","code":"available"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"text":"that specifies availability using a Swift version number","type":"text"},{"text":" ","type":"text"},{"text":"can’t use the asterisk.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The remaining arguments can appear in any order"},{"text":" ","type":"text"},{"type":"text","text":"and specify additional information about the declaration’s life cycle,"},{"type":"text","text":" "},{"type":"text","text":"including important milestones."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"unavailable"},{"text":" argument indicates that the declaration","type":"text"},{"type":"text","text":" "},{"text":"isn’t available on the specified platform.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This argument can’t be used when specifying Swift version availability."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"introduced"},{"type":"text","text":" argument indicates the first version"},{"text":" ","type":"text"},{"text":"of the specified platform or language in which the declaration was introduced.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It has the following form:"}],"type":"paragraph"},{"type":"codeListing","code":["introduced: <#version number#>"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"type":"text","text":"version number"}],"type":"emphasis"},{"type":"text","text":" consists of one to three positive integers,"},{"text":" ","type":"text"},{"type":"text","text":"separated by periods."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"deprecated"},{"type":"text","text":" argument indicates the first version"},{"text":" ","type":"text"},{"type":"text","text":"of the specified platform or language in which the declaration was deprecated."},{"text":" ","type":"text"},{"text":"It has the following form:","type":"text"}]},{"syntax":"swift","code":["deprecated: <#version number#>"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The optional "},{"inlineContent":[{"text":"version number","type":"text"}],"type":"emphasis"},{"type":"text","text":" consists of one to three positive integers,"},{"type":"text","text":" "},{"type":"text","text":"separated by periods."},{"type":"text","text":" "},{"type":"text","text":"Omitting the version number indicates that the declaration is currently deprecated,"},{"type":"text","text":" "},{"text":"without giving any information about when the deprecation occurred.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If you omit the version number, omit the colon ("},{"type":"codeVoice","code":":"},{"text":") as well.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"obsoleted","type":"codeVoice"},{"type":"text","text":" argument indicates the first version"},{"type":"text","text":" "},{"type":"text","text":"of the specified platform or language in which the declaration was obsoleted."},{"type":"text","text":" "},{"text":"When a declaration is obsoleted,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it’s removed from the specified platform or language and can no longer be used."},{"text":" ","type":"text"},{"text":"It has the following form:","type":"text"}],"type":"paragraph"},{"code":["obsoleted: <#version number#>"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"version number","type":"text"}]},{"type":"text","text":" consists of one to three positive integers, separated by periods."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"message"},{"type":"text","text":" argument provides a textual message that the compiler displays"},{"type":"text","text":" "},{"type":"text","text":"when emitting a warning or error about the use of a deprecated or obsoleted declaration."},{"text":" ","type":"text"},{"type":"text","text":"It has the following form:"}]},{"type":"codeListing","code":["message: <#message#>"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"message"}]},{"type":"text","text":" consists of a string literal."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"renamed"},{"type":"text","text":" argument provides a textual message"},{"type":"text","text":" "},{"type":"text","text":"that indicates the new name for a declaration that’s been renamed."},{"text":" ","type":"text"},{"text":"The compiler displays the new name","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when emitting an error about the use of a renamed declaration."},{"text":" ","type":"text"},{"type":"text","text":"It has the following form:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["renamed: <#new name#>"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"new name"}]},{"text":" consists of a string literal.","type":"text"}]},{"inlineContent":[{"text":"You can apply the ","type":"text"},{"type":"codeVoice","code":"available"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with the "},{"code":"renamed","type":"codeVoice"},{"type":"text","text":" and "},{"code":"unavailable","type":"codeVoice"},{"type":"text","text":" arguments"},{"type":"text","text":" "},{"text":"to a type alias declaration, as shown below,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to indicate that the name of a declaration changed"},{"type":"text","text":" "},{"type":"text","text":"between releases of a framework or library."},{"type":"text","text":" "},{"text":"This combination results in a compile-time error","type":"text"},{"text":" ","type":"text"},{"text":"that the declaration has been renamed.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ First release","protocol MyProtocol {","    \/\/ protocol definition","}"]},{"type":"codeListing","code":["\/\/ Subsequent release renames MyProtocol","protocol MyRenamedProtocol {","    \/\/ protocol definition","}","","@available(*, unavailable, renamed: \"MyRenamedProtocol\")","typealias MyProtocol = MyRenamedProtocol"],"syntax":"swift"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can apply multiple "},{"type":"codeVoice","code":"available"},{"type":"text","text":" attributes on a single declaration"},{"text":" ","type":"text"},{"text":"to specify the declaration’s availability on different platforms","type":"text"},{"type":"text","text":" "},{"text":"and different versions of Swift.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The declaration that the "},{"code":"available","type":"codeVoice"},{"text":" attribute applies to","type":"text"},{"type":"text","text":" "},{"text":"is ignored if the attribute specifies","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a platform or language version that doesn’t match the current target."},{"type":"text","text":" "},{"type":"text","text":"If you use multiple "},{"type":"codeVoice","code":"available"},{"text":" attributes,","type":"text"},{"type":"text","text":" "},{"text":"the effective availability is the combination of","type":"text"},{"text":" ","type":"text"},{"text":"the platform and Swift availabilities.","type":"text"}]},{"inlineContent":[{"text":"If an ","type":"text"},{"code":"available","type":"codeVoice"},{"text":" attribute only specifies an ","type":"text"},{"type":"codeVoice","code":"introduced"},{"type":"text","text":" argument"},{"type":"text","text":" "},{"text":"in addition to a platform or language name argument,","type":"text"},{"text":" ","type":"text"},{"text":"you can use the following shorthand syntax instead:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@available(<#platform name#> <#version number#>, *)","@available(swift <#version number#>)"]},{"type":"paragraph","inlineContent":[{"text":"The shorthand syntax for ","type":"text"},{"code":"available","type":"codeVoice"},{"text":" attributes","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"concisely expresses availability for multiple platforms."},{"type":"text","text":" "},{"type":"text","text":"Although the two forms are functionally equivalent,"},{"text":" ","type":"text"},{"type":"text","text":"the shorthand form is preferred whenever possible."}]},{"code":["@available(iOS 10.0, macOS 10.12, *)","class MyClass {","    \/\/ class definition","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"code":"available","type":"codeVoice"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"text":"that specifies availability using a Swift version number","type":"text"},{"type":"text","text":" "},{"text":"can’t additionally specify a declaration’s platform availability.","type":"text"},{"text":" ","type":"text"},{"text":"Instead, use separate ","type":"text"},{"type":"codeVoice","code":"available"},{"type":"text","text":" attributes to specify a Swift"},{"type":"text","text":" "},{"text":"version availability and one or more platform availabilities.","type":"text"}]},{"code":["@available(swift 3.0.2)","@available(macOS 10.12, *)","struct MyStruct {","    \/\/ struct definition","}"],"syntax":"swift","type":"codeListing"},{"anchor":"backDeployed","level":3,"type":"heading","text":"backDeployed"},{"inlineContent":[{"type":"text","text":"Apply this attribute to a function, method, subscript, or computed property"},{"text":" ","type":"text"},{"type":"text","text":"to include a copy of the symbol’s implementation"},{"text":" ","type":"text"},{"type":"text","text":"in programs that call or access the symbol."},{"type":"text","text":" "},{"type":"text","text":"You use this attribute to annotate symbols that ship as part of a platform,"},{"type":"text","text":" "},{"type":"text","text":"like the APIs that are included with an operating system."},{"type":"text","text":" "},{"text":"This attribute marks symbols that can be made available retroactively","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by including a copy of their implementation in programs that access them."},{"type":"text","text":" "},{"text":"Copying the implementation is also known as ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"emitting into the client","type":"text"}]},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This attribute takes a ","type":"text"},{"type":"codeVoice","code":"before:"},{"type":"text","text":" argument,"},{"type":"text","text":" "},{"type":"text","text":"specifying the first version of platforms that provide this symbol."},{"text":" ","type":"text"},{"type":"text","text":"These platform versions have the same meaning"},{"type":"text","text":" "},{"type":"text","text":"as the platform version you specify for the "},{"code":"available","type":"codeVoice"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"text":"Unlike the ","type":"text"},{"type":"codeVoice","code":"available"},{"text":" attribute,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the list can’t contain an asterisk ("},{"type":"codeVoice","code":"*"},{"text":") to refer to all versions.","type":"text"},{"type":"text","text":" "},{"text":"For example, consider the following code:","type":"text"}]},{"type":"codeListing","code":["@available(iOS 16, *)","@backDeployed(before: iOS 17)","func someFunction() { \/* ... *\/ }"],"syntax":"swift"},{"inlineContent":[{"text":"In the example above,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the iOS SDK provides "},{"code":"someFunction()","type":"codeVoice"},{"type":"text","text":" starting in iOS 17."},{"type":"text","text":" "},{"text":"In addition,","type":"text"},{"text":" ","type":"text"},{"text":"the SDK makes ","type":"text"},{"type":"codeVoice","code":"someFunction()"},{"type":"text","text":" available on iOS 16 using back deployment."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When compiling code that calls this function,"},{"text":" ","type":"text"},{"type":"text","text":"Swift inserts a layer of indirection that finds the function’s implementation."},{"type":"text","text":" "},{"type":"text","text":"If the code is run using a version of the SDK that includes this function,"},{"text":" ","type":"text"},{"type":"text","text":"the SDK’s implementation is used."},{"type":"text","text":" "},{"text":"Otherwise, the copy included in the caller is used.","type":"text"},{"text":" ","type":"text"},{"text":"In the example above,","type":"text"},{"type":"text","text":" "},{"text":"calling ","type":"text"},{"code":"someFunction()","type":"codeVoice"},{"text":" uses the implementation from the SDK","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when running on iOS 17 or later,"},{"text":" ","type":"text"},{"type":"text","text":"and when running on iOS 16"},{"text":" ","type":"text"},{"type":"text","text":"it uses the copy of "},{"code":"someFunction()","type":"codeVoice"},{"text":" that’s included in the caller.","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When the caller’s minimum deployment target"},{"type":"text","text":" "},{"text":"is the same as or greater than","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the first version of the SDK that includes the symbol,"},{"text":" ","type":"text"},{"text":"the compiler can optimize away the runtime check","type":"text"},{"text":" ","type":"text"},{"text":"and call the SDK’s implementation directly.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In this case,"},{"type":"text","text":" "},{"type":"text","text":"if you access the back-deployed symbol directly,"},{"text":" ","type":"text"},{"type":"text","text":"the compiler can also omit"},{"type":"text","text":" "},{"type":"text","text":"the copy of the symbol’s implementation from the client."}]}],"type":"aside","name":"Note","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Functions, methods, subscripts, and computed properties"},{"text":" ","type":"text"},{"text":"that meet the following criteria can be back deployed:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The declaration is "},{"code":"public","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"@usableFromInline"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"For class instance methods and class type methods,"},{"text":" ","type":"text"},{"type":"text","text":"the method is marked "},{"code":"final","type":"codeVoice"},{"type":"text","text":" and isn’t marked "},{"code":"@objc","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The implementation satisfies the requirements for an inlinable function,","type":"text"},{"text":" ","type":"text"},{"text":"described in ","type":"text"},{"type":"text","text":"doc:Attributes:inlinable"},{"text":".","type":"text"}]}]}]},{"level":3,"text":"discardableResult","type":"heading","anchor":"discardableResult"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a function or method declaration"},{"type":"text","text":" "},{"text":"to suppress the compiler warning","type":"text"},{"text":" ","type":"text"},{"text":"when the function or method that returns a value","type":"text"},{"text":" ","type":"text"},{"text":"is called without using its result.","type":"text"}]},{"level":3,"text":"dynamicCallable","anchor":"dynamicCallable","type":"heading"},{"inlineContent":[{"type":"text","text":"Apply this attribute to a class, structure, enumeration, or protocol"},{"text":" ","type":"text"},{"type":"text","text":"to treat instances of the type as callable functions."},{"text":" ","type":"text"},{"type":"text","text":"The type must implement either a "},{"type":"codeVoice","code":"dynamicallyCall(withArguments:)"},{"type":"text","text":" method,"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"type":"codeVoice","code":"dynamicallyCall(withKeywordArguments:)"},{"text":" method,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or both."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can call an instance of a dynamically callable type"},{"text":" ","type":"text"},{"type":"text","text":"as if it’s a function that takes any number of arguments."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@dynamicCallable","struct TelephoneExchange {","    func dynamicallyCall(withArguments phoneNumber: [Int]) {","        if phoneNumber == [4, 1, 1] {","            print(\"Get Swift help on forums.swift.org\")","        } else {","            print(\"Unrecognized number\")","        }","    }","}","","let dial = TelephoneExchange()","","\/\/ Use a dynamic method call.","dial(4, 1, 1)","\/\/ Prints \"Get Swift help on forums.swift.org\"","","dial(8, 6, 7, 5, 3, 0, 9)","\/\/ Prints \"Unrecognized number\"","","\/\/ Call the underlying method directly.","dial.dynamicallyCall(withArguments: [4, 1, 1])"]},{"inlineContent":[{"type":"text","text":"The declaration of the "},{"type":"codeVoice","code":"dynamicallyCall(withArguments:)"},{"text":" method","type":"text"},{"type":"text","text":" "},{"type":"text","text":"must have a single parameter that conforms to the"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebyarrayliteral","type":"reference","isActive":true},{"type":"text","text":" "},{"text":"protocol — like ","type":"text"},{"code":"[Int]","type":"codeVoice"},{"text":" in the example above.","type":"text"},{"type":"text","text":" "},{"text":"The return type can be any type.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You can include labels in a dynamic method call","type":"text"},{"type":"text","text":" "},{"text":"if you implement the ","type":"text"},{"code":"dynamicallyCall(withKeywordArguments:)","type":"codeVoice"},{"type":"text","text":" method."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@dynamicCallable","struct Repeater {","    func dynamicallyCall(withKeywordArguments pairs: KeyValuePairs<String, Int>) -> String {","        return pairs","            .map { label, count in","                repeatElement(label, count: count).joined(separator: \" \")","            }","            .joined(separator: \"\\n\")","    }","}","","let repeatLabels = Repeater()","print(repeatLabels(a: 1, b: 2, c: 3, b: 2, a: 1))","\/\/ a","\/\/ b b","\/\/ c c c","\/\/ b b","\/\/ a"]},{"inlineContent":[{"type":"text","text":"The declaration of the "},{"type":"codeVoice","code":"dynamicallyCall(withKeywordArguments:)"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"text":"must have a single parameter that conforms to the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral"},{"text":" ","type":"text"},{"type":"text","text":"protocol,"},{"type":"text","text":" "},{"text":"and the return type can be any type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The parameter’s "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral\/2294108-key","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"must be"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral","type":"reference"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The previous example uses "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keyvaluepairs","type":"reference"},{"type":"text","text":" "},{"text":"as the parameter type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so that callers can include duplicate parameter labels —"},{"text":" ","type":"text"},{"type":"codeVoice","code":"a"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"b"},{"type":"text","text":" appear multiple times in the call to "},{"code":"repeat","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you implement both "},{"type":"codeVoice","code":"dynamicallyCall"},{"text":" methods,","type":"text"},{"text":" ","type":"text"},{"code":"dynamicallyCall(withKeywordArguments:)","type":"codeVoice"},{"text":" is called","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when the method call includes keyword arguments."},{"type":"text","text":" "},{"text":"In all other cases, ","type":"text"},{"code":"dynamicallyCall(withArguments:)","type":"codeVoice"},{"type":"text","text":" is called."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can only call a dynamically callable instance"},{"type":"text","text":" "},{"text":"with arguments and a return value that match the types you specify","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in one of your "},{"code":"dynamicallyCall","type":"codeVoice"},{"type":"text","text":" method implementations."},{"text":" ","type":"text"},{"type":"text","text":"The call in the following example doesn’t compile because"},{"text":" ","type":"text"},{"type":"text","text":"there isn’t an implementation of "},{"type":"codeVoice","code":"dynamicallyCall(withArguments:)"},{"type":"text","text":" "},{"text":"that takes ","type":"text"},{"type":"codeVoice","code":"KeyValuePairs<String, String>"},{"type":"text","text":"."}]},{"syntax":"swift","code":["repeatLabels(a: \"four\") \/\/ Error"],"type":"codeListing"},{"level":3,"text":"dynamicMemberLookup","anchor":"dynamicMemberLookup","type":"heading"},{"inlineContent":[{"type":"text","text":"Apply this attribute to a class, structure, enumeration, or protocol"},{"text":" ","type":"text"},{"type":"text","text":"to enable members to be looked up by name at runtime."},{"type":"text","text":" "},{"type":"text","text":"The type must implement a "},{"type":"codeVoice","code":"subscript(dynamicMember:)"},{"type":"text","text":" subscript."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In an explicit member expression,"},{"type":"text","text":" "},{"type":"text","text":"if there isn’t a corresponding declaration for the named member,"},{"text":" ","type":"text"},{"type":"text","text":"the expression is understood as a call to"},{"text":" ","type":"text"},{"type":"text","text":"the type’s "},{"code":"subscript(dynamicMember:)","type":"codeVoice"},{"type":"text","text":" subscript,"},{"type":"text","text":" "},{"text":"passing information about the member as the argument.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The subscript can accept a parameter that’s either a key path or a member name;"},{"type":"text","text":" "},{"type":"text","text":"if you implement both subscripts,"},{"text":" ","type":"text"},{"text":"the subscript that takes key path argument is used.","type":"text"}]},{"inlineContent":[{"type":"text","text":"An implementation of "},{"type":"codeVoice","code":"subscript(dynamicMember:)"},{"text":" ","type":"text"},{"text":"can accept key paths using an argument of type","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keypath","isActive":true,"type":"reference"},{"text":",","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/writablekeypath","isActive":true,"type":"reference"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"or ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/referencewritablekeypath","isActive":true,"type":"reference"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"It can accept member names using an argument of a type that conforms to the","type":"text"},{"text":" ","type":"text"},{"overridingTitleInlineContent":[{"code":"ExpressibleByStringLiteral","type":"codeVoice"}],"type":"reference","overridingTitle":"ExpressibleByStringLiteral","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral","isActive":true},{"type":"text","text":" protocol —"},{"type":"text","text":" "},{"text":"in most cases, ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The subscript’s return type can be any type."}],"type":"paragraph"},{"inlineContent":[{"text":"Dynamic member lookup by member name","type":"text"},{"type":"text","text":" "},{"text":"can be used to create a wrapper type around data","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that can’t be type checked at compile time,"},{"text":" ","type":"text"},{"type":"text","text":"such as when bridging data from other languages into Swift."},{"text":" ","type":"text"},{"type":"text","text":"For example:"}],"type":"paragraph"},{"type":"codeListing","code":["@dynamicMemberLookup","struct DynamicStruct {","    let dictionary = [\"someDynamicMember\": 325,","                      \"someOtherMember\": 787]","    subscript(dynamicMember member: String) -> Int {","        return dictionary[member] ?? 1054","    }","}","let s = DynamicStruct()","","\/\/ Use dynamic member lookup.","let dynamic = s.someDynamicMember","print(dynamic)","\/\/ Prints \"325\"","","\/\/ Call the underlying subscript directly.","let equivalent = s[dynamicMember: \"someDynamicMember\"]","print(dynamic == equivalent)","\/\/ Prints \"true\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dynamic member lookup by key path"},{"type":"text","text":" "},{"type":"text","text":"can be used to implement a wrapper type"},{"type":"text","text":" "},{"text":"in a way that supports compile-time type checking.","type":"text"},{"type":"text","text":" "},{"text":"For example:","type":"text"}]},{"code":["struct Point { var x, y: Int }","","@dynamicMemberLookup","struct PassthroughWrapper<Value> {","    var value: Value","    subscript<T>(dynamicMember member: KeyPath<Value, T>) -> T {","        get { return value[keyPath: member] }","    }","}","","let point = Point(x: 381, y: 431)","let wrapper = PassthroughWrapper(value: point)","print(wrapper.x)"],"syntax":"swift","type":"codeListing"},{"level":3,"anchor":"freestanding","type":"heading","text":"freestanding"},{"type":"paragraph","inlineContent":[{"text":"Apply the ","type":"text"},{"type":"codeVoice","code":"freestanding"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the declaration of a freestanding macro."}]},{"anchor":"frozen","text":"frozen","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a structure or enumeration declaration","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to restrict the kinds of changes you can make to the type."},{"text":" ","type":"text"},{"text":"This attribute is allowed only when compiling in library evolution mode.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Future versions of the library can’t change the declaration"},{"type":"text","text":" "},{"type":"text","text":"by adding, removing, or reordering"},{"text":" ","type":"text"},{"type":"text","text":"an enumeration’s cases"},{"text":" ","type":"text"},{"text":"or a structure’s stored instance properties.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"These changes are allowed on nonfrozen types,"},{"type":"text","text":" "},{"type":"text","text":"but they break ABI compatibility for frozen types."}]},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the compiler isn’t in library evolution mode,"},{"type":"text","text":" "},{"type":"text","text":"all structures and enumerations are implicitly frozen,"},{"text":" ","type":"text"},{"type":"text","text":"and this attribute is ignored."}]}],"style":"note"},{"inlineContent":[{"type":"text","text":"In library evolution mode,"},{"text":" ","type":"text"},{"type":"text","text":"code that interacts with members of nonfrozen structures and enumerations"},{"type":"text","text":" "},{"type":"text","text":"is compiled in a way that allows it to continue working without recompiling"},{"type":"text","text":" "},{"type":"text","text":"even if a future version of the library"},{"type":"text","text":" "},{"text":"adds, removes, or reorders some of that type’s members.","type":"text"},{"type":"text","text":" "},{"text":"The compiler makes this possible using techniques like","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"looking up information at runtime"},{"type":"text","text":" "},{"text":"and adding a layer of indirection.","type":"text"},{"type":"text","text":" "},{"text":"Marking a structure or enumeration as frozen","type":"text"},{"text":" ","type":"text"},{"text":"gives up this flexibility to gain performance:","type":"text"},{"text":" ","type":"text"},{"text":"Future versions of the library can make only limited changes to the type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but the compiler can make additional optimizations"},{"type":"text","text":" "},{"text":"in code that interacts with the type’s members.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Frozen types,"},{"type":"text","text":" "},{"text":"the types of the stored properties of frozen structures,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the associated values of frozen enumeration cases"},{"text":" ","type":"text"},{"type":"text","text":"must be public or marked with the "},{"type":"codeVoice","code":"usableFromInline"},{"text":" attribute.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The properties of a frozen structure can’t have property observers,"},{"type":"text","text":" "},{"text":"and expressions that provide the initial value for stored instance properties","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"must follow the same restrictions as inlinable functions,"},{"type":"text","text":" "},{"text":"as discussed in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#inlinable","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To enable library evolution mode on the command line,"},{"type":"text","text":" "},{"type":"text","text":"pass the "},{"code":"-enable-library-evolution","type":"codeVoice"},{"text":" option to the Swift compiler.","type":"text"},{"text":" ","type":"text"},{"text":"To enable it in Xcode,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"set the “Build Libraries for Distribution” build setting"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"BUILD_LIBRARY_FOR_DISTRIBUTION"},{"type":"text","text":") to Yes,"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"identifier":"https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev04b3a04ba","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"A switch statement over a frozen enumeration doesn’t require a ","type":"text"},{"code":"default","type":"codeVoice"},{"text":" case,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","type":"reference"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Including a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" or "},{"code":"@unknown default","type":"codeVoice"},{"type":"text","text":" case"},{"text":" ","type":"text"},{"type":"text","text":"when switching over a frozen enumeration"},{"text":" ","type":"text"},{"text":"produces a warning because that code is never executed.","type":"text"}]},{"type":"heading","text":"GKInspectable","anchor":"GKInspectable","level":3},{"inlineContent":[{"type":"text","text":"Apply this attribute to expose a custom GameplayKit component property"},{"text":" ","type":"text"},{"type":"text","text":"to the SpriteKit editor UI."},{"text":" ","type":"text"},{"text":"Applying this attribute also implies the ","type":"text"},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute."}],"type":"paragraph"},{"level":3,"anchor":"inlinable","text":"inlinable","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a"},{"type":"text","text":" "},{"type":"text","text":"function, method, computed property, subscript,"},{"type":"text","text":" "},{"type":"text","text":"convenience initializer, or deinitializer declaration"},{"text":" ","type":"text"},{"type":"text","text":"to expose that declaration’s implementation"},{"type":"text","text":" "},{"type":"text","text":"as part of the module’s public interface."},{"text":" ","type":"text"},{"type":"text","text":"The compiler is allowed to replace calls to an inlinable symbol"},{"type":"text","text":" "},{"type":"text","text":"with a copy of the symbol’s implementation at the call site."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inlinable code"},{"type":"text","text":" "},{"type":"text","text":"can interact with "},{"type":"codeVoice","code":"public"},{"type":"text","text":" symbols declared in any module,"},{"type":"text","text":" "},{"type":"text","text":"and it can interact with "},{"type":"codeVoice","code":"internal"},{"type":"text","text":" symbols"},{"type":"text","text":" "},{"text":"declared in the same module","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that are marked with the "},{"code":"usableFromInline","type":"codeVoice"},{"text":" attribute.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Inlinable code can’t interact with "},{"code":"private","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"fileprivate"},{"text":" symbols.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This attribute can’t be applied"},{"text":" ","type":"text"},{"text":"to declarations that are nested inside functions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or to "},{"code":"fileprivate","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"private"},{"type":"text","text":" declarations."},{"text":" ","type":"text"},{"type":"text","text":"Functions and closures that are defined inside an inlinable function"},{"type":"text","text":" "},{"type":"text","text":"are implicitly inlinable,"},{"text":" ","type":"text"},{"type":"text","text":"even though they can’t be marked with this attribute."}]},{"text":"main","level":3,"type":"heading","anchor":"main"},{"inlineContent":[{"text":"Apply this attribute to a structure, class, or enumeration declaration","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to indicate that it contains the top-level entry point for program flow."},{"text":" ","type":"text"},{"type":"text","text":"The type must provide a "},{"code":"main","type":"codeVoice"},{"text":" type function","type":"text"},{"type":"text","text":" "},{"text":"that doesn’t take any arguments and returns ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@main","struct MyTopLevel {","    static func main() {","        \/\/ Top-level code goes here","    }","}"]},{"inlineContent":[{"type":"text","text":"Another way to describe the requirements of the "},{"type":"codeVoice","code":"main"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"text":"is that the type you write this attribute on","type":"text"},{"type":"text","text":" "},{"type":"text","text":"must satisfy the same requirements"},{"type":"text","text":" "},{"type":"text","text":"as types that conform to the following hypothetical protocol:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["protocol ProvidesMain {","    static func main() throws","}"]},{"inlineContent":[{"text":"The Swift code you compile to make an executable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can contain at most one top-level entry point,"},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"nonobjc","type":"heading","anchor":"nonobjc","level":3},{"inlineContent":[{"text":"Apply this attribute to a","type":"text"},{"type":"text","text":" "},{"text":"method, property, subscript, or initializer declaration","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to suppress an implicit "},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"nonobjc"},{"text":" attribute tells the compiler","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to make the declaration unavailable in Objective-C code,"},{"type":"text","text":" "},{"type":"text","text":"even though it’s possible to represent it in Objective-C."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Applying this attribute to an extension","type":"text"},{"type":"text","text":" "},{"type":"text","text":"has the same effect as"},{"text":" ","type":"text"},{"text":"applying it to every member of that extension","type":"text"},{"type":"text","text":" "},{"text":"that isn’t explicitly marked with the ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute.","type":"text"}]},{"inlineContent":[{"type":"text","text":"You use the "},{"type":"codeVoice","code":"nonobjc"},{"type":"text","text":" attribute to resolve circularity"},{"type":"text","text":" "},{"text":"for bridging methods in a class marked with the ","type":"text"},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute,"},{"text":" ","type":"text"},{"type":"text","text":"and to allow overloading of methods and initializers"},{"type":"text","text":" "},{"type":"text","text":"in a class marked with the "},{"type":"codeVoice","code":"objc"},{"text":" attribute.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A method marked with the ","type":"text"},{"type":"codeVoice","code":"nonobjc"},{"text":" attribute","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can’t override a method marked with the "},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"type":"text","text":"However, a method marked with the "},{"type":"codeVoice","code":"objc"},{"text":" attribute","type":"text"},{"text":" ","type":"text"},{"text":"can override a method marked with the ","type":"text"},{"type":"codeVoice","code":"nonobjc"},{"text":" attribute.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Similarly, a method marked with the "},{"type":"codeVoice","code":"nonobjc"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"type":"text","text":"can’t satisfy a protocol requirement"},{"type":"text","text":" "},{"type":"text","text":"for a method marked with the "},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute."}]},{"level":3,"anchor":"NSApplicationMain","text":"NSApplicationMain","type":"heading"},{"inlineContent":[{"type":"text","text":"Apply this attribute to a class"},{"type":"text","text":" "},{"type":"text","text":"to indicate that it’s the application delegate."},{"text":" ","type":"text"},{"text":"Using this attribute is equivalent to calling the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"NSApplicationMain(_:_:)"},{"type":"text","text":" function."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you don’t use this attribute,"},{"text":" ","type":"text"},{"type":"text","text":"supply a "},{"code":"main.swift","type":"codeVoice"},{"text":" file with code at the top level","type":"text"},{"type":"text","text":" "},{"text":"that calls the ","type":"text"},{"code":"NSApplicationMain(_:_:)","type":"codeVoice"},{"text":" function as follows:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["import AppKit","NSApplicationMain(CommandLine.argc, CommandLine.unsafeArgv)"]},{"type":"paragraph","inlineContent":[{"text":"The Swift code you compile to make an executable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can contain at most one top-level entry point,"},{"type":"text","text":" "},{"text":"as discussed in ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code","isActive":true},{"text":".","type":"text"}]},{"text":"NSCopying","type":"heading","anchor":"NSCopying","level":3},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a stored variable property of a class.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This attribute causes the property’s setter to be synthesized with a "},{"type":"emphasis","inlineContent":[{"text":"copy","type":"text"}]},{"text":" ","type":"text"},{"text":"of the property’s value — returned by the ","type":"text"},{"type":"codeVoice","code":"copyWithZone(_:)"},{"text":" method — instead of the","type":"text"},{"type":"text","text":" "},{"text":"value of the property itself.","type":"text"},{"text":" ","type":"text"},{"text":"The type of the property must conform to the ","type":"text"},{"code":"NSCopying","type":"codeVoice"},{"text":" protocol.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"NSCopying"},{"type":"text","text":" attribute behaves in a way similar to the Objective-C "},{"type":"codeVoice","code":"copy"},{"type":"text","text":" "},{"text":"property attribute.","type":"text"}]},{"level":3,"text":"NSManaged","type":"heading","anchor":"NSManaged"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to an instance method or stored variable property"},{"text":" ","type":"text"},{"type":"text","text":"of a class that inherits from "},{"code":"NSManagedObject","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"to indicate that Core Data dynamically provides its implementation at runtime,"},{"type":"text","text":" "},{"type":"text","text":"based on the associated entity description."},{"type":"text","text":" "},{"text":"For a property marked with the ","type":"text"},{"code":"NSManaged","type":"codeVoice"},{"text":" attribute,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Core Data also provides the storage at runtime."},{"text":" ","type":"text"},{"type":"text","text":"Applying this attribute also implies the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."}]},{"type":"heading","text":"objc","level":3,"anchor":"objc"},{"inlineContent":[{"text":"Apply this attribute to any declaration that can be represented in Objective-C —","type":"text"},{"text":" ","type":"text"},{"text":"for example, nonnested classes, protocols,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"nongeneric enumerations (constrained to integer raw-value types),"},{"type":"text","text":" "},{"text":"properties and methods (including getters and setters) of classes,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"protocols and optional members of a protocol,"},{"text":" ","type":"text"},{"type":"text","text":"initializers, and subscripts."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":"objc","type":"codeVoice"},{"text":" attribute tells the compiler","type":"text"},{"text":" ","type":"text"},{"text":"that a declaration is available to use in Objective-C code.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Applying this attribute to an extension","type":"text"},{"text":" ","type":"text"},{"text":"has the same effect as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"applying it to every member of that extension"},{"type":"text","text":" "},{"type":"text","text":"that isn’t explicitly marked with the "},{"type":"codeVoice","code":"nonobjc"},{"type":"text","text":" attribute."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The compiler implicitly adds the ","type":"text"},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"to subclasses of any class defined in Objective-C."},{"text":" ","type":"text"},{"text":"However, the subclass must not be generic,","type":"text"},{"text":" ","type":"text"},{"text":"and must not inherit from any generic classes.","type":"text"},{"text":" ","type":"text"},{"text":"You can explicitly add the ","type":"text"},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"type":"text","text":"to a subclass that meets these criteria,"},{"text":" ","type":"text"},{"text":"to specify its Objective-C name as discussed below.","type":"text"},{"text":" ","type":"text"},{"text":"Protocols that are marked with the ","type":"text"},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute can’t inherit"},{"type":"text","text":" "},{"type":"text","text":"from protocols that aren’t marked with this attribute."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"objc"},{"text":" attribute is also implicitly added in the following cases:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The declaration is an override in a subclass,","type":"text"},{"text":" ","type":"text"},{"text":"and the superclass’s declaration has the ","type":"text"},{"type":"codeVoice","code":"objc"},{"text":" attribute.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The declaration satisfies a requirement"},{"type":"text","text":" "},{"type":"text","text":"from a protocol that has the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The declaration has the ","type":"text"},{"code":"IBAction","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"IBSegueAction"},{"type":"text","text":", "},{"code":"IBOutlet","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"IBDesignable","type":"codeVoice"},{"text":", ","type":"text"},{"code":"IBInspectable","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"code":"NSManaged","type":"codeVoice"},{"type":"text","text":", or "},{"type":"codeVoice","code":"GKInspectable"},{"type":"text","text":" attribute."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"If you apply the ","type":"text"},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute to an enumeration,"},{"type":"text","text":" "},{"text":"each enumeration case is exposed to Objective-C code","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as the concatenation of the enumeration name and the case name."},{"text":" ","type":"text"},{"text":"The first letter of the case name is capitalized.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, a case named "},{"type":"codeVoice","code":"venus"},{"text":" in a Swift ","type":"text"},{"type":"codeVoice","code":"Planet"},{"type":"text","text":" enumeration"},{"text":" ","type":"text"},{"type":"text","text":"is exposed to Objective-C code as a case named "},{"type":"codeVoice","code":"PlanetVenus"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"The ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute optionally accepts a single attribute argument,","type":"text"},{"type":"text","text":" "},{"text":"which consists of an identifier.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The identifier specifies the name to be exposed to Objective-C"},{"type":"text","text":" "},{"type":"text","text":"for the entity that the "},{"type":"codeVoice","code":"objc"},{"text":" attribute applies to.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can use this argument to name"},{"type":"text","text":" "},{"text":"classes, enumerations, enumeration cases, protocols,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"methods, getters, setters, and initializers."},{"text":" ","type":"text"},{"text":"If you specify the Objective-C name","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for a class, protocol, or enumeration,"},{"type":"text","text":" "},{"type":"text","text":"include a three-letter prefix on the name,"},{"type":"text","text":" "},{"text":"as described in ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Conventions\/Conventions.html#\/\/apple_ref\/doc\/uid\/TP40011210-CH10-SW1","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"in ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Introduction\/Introduction.html#\/\/apple_ref\/doc\/uid\/TP40011210","isActive":true},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The example below exposes"},{"type":"text","text":" "},{"type":"text","text":"the getter for the "},{"code":"enabled","type":"codeVoice"},{"type":"text","text":" property of the "},{"type":"codeVoice","code":"ExampleClass"},{"type":"text","text":" "},{"type":"text","text":"to Objective-C code as "},{"code":"isEnabled","type":"codeVoice"},{"type":"text","text":" "},{"text":"rather than just as the name of the property itself.","type":"text"}],"type":"paragraph"},{"code":["class ExampleClass: NSObject {","    @objc var enabled: Bool {","        @objc(isEnabled) get {","            \/\/ Return the appropriate value","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"For more information, see","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective-c_apis\/importing_swift_into_objective-c","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"text":"The argument to the ","type":"text"},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"text":"can also change the runtime name for that declaration.","type":"text"},{"type":"text","text":" "},{"text":"You use the runtime name when calling functions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that interact with the Objective-C runtime,"},{"type":"text","text":" "},{"type":"text","text":"like "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/1395135-nsclassfromstring"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and when specifying class names in an app’s Info.plist file."},{"text":" ","type":"text"},{"type":"text","text":"If you specify a name by passing an argument,"},{"type":"text","text":" "},{"type":"text","text":"that name is used as the name in Objective-C code"},{"type":"text","text":" "},{"type":"text","text":"and as the runtime name."},{"type":"text","text":" "},{"type":"text","text":"If you omit the argument,"},{"type":"text","text":" "},{"text":"the name used in Objective-C code matches the name in Swift code,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the runtime name follows the normal Swift compiler convention"},{"text":" ","type":"text"},{"text":"of name mangling.","type":"text"}],"type":"paragraph"}]},{"anchor":"objcMembers","text":"objcMembers","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a class declaration,","type":"text"},{"text":" ","type":"text"},{"text":"to implicitly apply the ","type":"text"},{"type":"codeVoice","code":"objc"},{"text":" attribute","type":"text"},{"type":"text","text":" "},{"text":"to all Objective-C compatible members of the class,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"its extensions, its subclasses, and all of the extensions of its subclasses."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Most code should use the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute instead,"},{"type":"text","text":" "},{"text":"to expose only the declarations that are needed.","type":"text"},{"text":" ","type":"text"},{"text":"If you need to expose many declarations,","type":"text"},{"text":" ","type":"text"},{"text":"you can group them in an extension that has the ","type":"text"},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute."},{"type":"text","text":" "},{"text":"The ","type":"text"},{"type":"codeVoice","code":"objcMembers"},{"type":"text","text":" attribute is a convenience for"},{"type":"text","text":" "},{"type":"text","text":"libraries that make heavy use of"},{"type":"text","text":" "},{"type":"text","text":"the introspection facilities of the Objective-C runtime."},{"type":"text","text":" "},{"text":"Applying the ","type":"text"},{"type":"codeVoice","code":"objc"},{"text":" attribute when it isn’t needed","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can increase your binary size and adversely affect performance."}]},{"anchor":"propertyWrapper","level":3,"type":"heading","text":"propertyWrapper"},{"inlineContent":[{"type":"text","text":"Apply this attribute to a class, structure, or enumeration declaration"},{"text":" ","type":"text"},{"type":"text","text":"to use that type as a property wrapper."},{"type":"text","text":" "},{"text":"When you apply this attribute to a type,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you create a custom attribute with the same name as the type."},{"type":"text","text":" "},{"type":"text","text":"Apply that new attribute to a property of a class, structure, or enumeration"},{"type":"text","text":" "},{"type":"text","text":"to wrap access to the property through an instance of the wrapper type;"},{"text":" ","type":"text"},{"text":"apply the attribute to a local stored variable declaration","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to wrap access to the variable the same way."},{"text":" ","type":"text"},{"type":"text","text":"Computed variables, global variables, and constants can’t use property wrappers."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The wrapper must define a "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" instance property."},{"text":" ","type":"text"},{"type":"text","text":"The "},{"inlineContent":[{"type":"text","text":"wrapped value"}],"type":"emphasis"},{"text":" of the property","type":"text"},{"type":"text","text":" "},{"text":"is the value that the getter and setter for this property expose.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In most cases, "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" is a computed value,"},{"text":" ","type":"text"},{"type":"text","text":"but it can be a stored value instead."},{"type":"text","text":" "},{"text":"The wrapper defines and manages","type":"text"},{"type":"text","text":" "},{"text":"any underlying storage needed by its wrapped value.","type":"text"},{"type":"text","text":" "},{"text":"The compiler synthesizes storage for the instance of the wrapper type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by prefixing the name of the wrapped property with an underscore ("},{"type":"codeVoice","code":"_"},{"text":") —","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for example, the wrapper for "},{"type":"codeVoice","code":"someProperty"},{"text":" is stored as ","type":"text"},{"type":"codeVoice","code":"_someProperty"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The synthesized storage for the wrapper has an access control level of "},{"code":"private","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"A property that has a property wrapper"},{"text":" ","type":"text"},{"type":"text","text":"can include "},{"code":"willSet","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" blocks,"},{"type":"text","text":" "},{"type":"text","text":"but it can’t override the compiler-synthesized "},{"code":"get","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"set","type":"codeVoice"},{"type":"text","text":" blocks."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides two forms of syntactic sugar"},{"type":"text","text":" "},{"type":"text","text":"for initialization of a property wrapper."},{"text":" ","type":"text"},{"type":"text","text":"You can use assignment syntax in the definition of a wrapped value"},{"type":"text","text":" "},{"type":"text","text":"to pass the expression on the right-hand side of the assignment"},{"text":" ","type":"text"},{"text":"as the argument to the ","type":"text"},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" parameter"},{"type":"text","text":" "},{"type":"text","text":"of the property wrapper’s initializer."},{"text":" ","type":"text"},{"type":"text","text":"You can also provide arguments to the attribute"},{"type":"text","text":" "},{"type":"text","text":"when you apply it to a property,"},{"text":" ","type":"text"},{"text":"and those arguments are passed to the property wrapper’s initializer.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, in the code below,"},{"type":"text","text":" "},{"type":"codeVoice","code":"SomeStruct"},{"text":" calls each of the initializers that ","type":"text"},{"code":"SomeWrapper","type":"codeVoice"},{"type":"text","text":" defines."}]},{"syntax":"swift","code":["@propertyWrapper","struct SomeWrapper {","    var wrappedValue: Int","    var someValue: Double","    init() {","        self.wrappedValue = 100","        self.someValue = 12.3","    }","    init(wrappedValue: Int) {","        self.wrappedValue = wrappedValue","        self.someValue = 45.6","    }","    init(wrappedValue value: Int, custom: Double) {","        self.wrappedValue = value","        self.someValue = custom","    }","}","","struct SomeStruct {","    \/\/ Uses init()","    @SomeWrapper var a: Int","","    \/\/ Uses init(wrappedValue:)","    @SomeWrapper var b = 10","","    \/\/ Both use init(wrappedValue:custom:)","    @SomeWrapper(custom: 98.7) var c = 30","    @SomeWrapper(wrappedValue: 30, custom: 98.7) var d","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"projected value","type":"text"}]},{"type":"text","text":" for a wrapped property is a second value"},{"type":"text","text":" "},{"text":"that a property wrapper can use to expose additional functionality.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The author of a property wrapper type"},{"type":"text","text":" "},{"type":"text","text":"is responsible for determining the meaning of its projected value"},{"type":"text","text":" "},{"text":"and defining the interface that the projected value exposes.","type":"text"},{"type":"text","text":" "},{"text":"To project a value from a property wrapper,","type":"text"},{"type":"text","text":" "},{"text":"define a ","type":"text"},{"type":"codeVoice","code":"projectedValue"},{"text":" instance property on the wrapper type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The compiler synthesizes an identifier for the projected value"},{"type":"text","text":" "},{"type":"text","text":"by prefixing the name of the wrapped property with a dollar sign ("},{"type":"codeVoice","code":"$"},{"text":") —","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for example, the projected value for "},{"type":"codeVoice","code":"someProperty"},{"type":"text","text":" is "},{"type":"codeVoice","code":"$someProperty"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The projected value has the same access control level","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as the original wrapped property."}]},{"type":"codeListing","syntax":"swift","code":["@propertyWrapper","struct WrapperWithProjection {","    var wrappedValue: Int","    var projectedValue: SomeProjection {","        return SomeProjection(wrapper: self)","    }","}","struct SomeProjection {","    var wrapper: WrapperWithProjection","}","","struct SomeStruct {","    @WrapperWithProjection var x = 123","}","let s = SomeStruct()","s.x           \/\/ Int value","s.$x          \/\/ SomeProjection value","s.$x.wrapper  \/\/ WrapperWithProjection value"]},{"type":"heading","anchor":"resultBuilder","level":3,"text":"resultBuilder"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a class, structure, enumeration","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to use that type as a result builder."},{"type":"text","text":" "},{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"result builder","type":"text"}]},{"text":" is a type","type":"text"},{"type":"text","text":" "},{"text":"that builds a nested data structure step by step.","type":"text"},{"type":"text","text":" "},{"text":"You use result builders to implement a domain-specific language (DSL)","type":"text"},{"text":" ","type":"text"},{"text":"for creating nested data structures in a natural, declarative way.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For an example of how to use the "},{"code":"resultBuilder","type":"codeVoice"},{"type":"text","text":" attribute,"},{"type":"text","text":" "},{"type":"text","text":"see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Result-Builders"},{"text":".","type":"text"}]},{"level":4,"anchor":"Result-Building-Methods","type":"heading","text":"Result-Building Methods"},{"type":"paragraph","inlineContent":[{"text":"A result builder implements static methods described below.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because all of the result builder’s functionality"},{"type":"text","text":" "},{"type":"text","text":"is exposed through static methods,"},{"type":"text","text":" "},{"text":"you don’t ever initialize an instance of that type.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A result builder must implement either the "},{"code":"buildBlock(_:)","type":"codeVoice"},{"text":" method","type":"text"},{"type":"text","text":" "},{"text":"or both the ","type":"text"},{"code":"buildPartialBlock(first:)","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"codeVoice","code":"buildPartialBlock(accumulated:next:)"},{"type":"text","text":" methods."},{"type":"text","text":" "},{"type":"text","text":"The other methods —"},{"text":" ","type":"text"},{"type":"text","text":"which enable additional functionality in the DSL —"},{"type":"text","text":" "},{"text":"are optional.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The declaration of a result builder type"},{"type":"text","text":" "},{"text":"doesn’t actually have to include any protocol conformance.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The description of the static methods uses three types as placeholders.","type":"text"},{"type":"text","text":" "},{"text":"The type ","type":"text"},{"code":"Expression","type":"codeVoice"},{"type":"text","text":" is a placeholder"},{"text":" ","type":"text"},{"type":"text","text":"for the type of the result builder’s input,"},{"type":"text","text":" "},{"code":"Component","type":"codeVoice"},{"type":"text","text":" is a placeholder for the type of a partial result,"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"codeVoice","code":"FinalResult"},{"text":" is a placeholder","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for the type of the result that the result builder produces."},{"text":" ","type":"text"},{"type":"text","text":"You replace these types with the actual types that your result builder uses."},{"text":" ","type":"text"},{"type":"text","text":"If your result-building methods"},{"text":" ","type":"text"},{"text":"don’t specify a type for ","type":"text"},{"type":"codeVoice","code":"Expression"},{"type":"text","text":" or "},{"type":"codeVoice","code":"FinalResult"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"they default to being the same as ","type":"text"},{"type":"codeVoice","code":"Component"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The block-building methods are as follows:"}]},{"type":"termList","items":[{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Combines an array of partial results into a single partial result."}]}]},"term":{"inlineContent":[{"code":"static func buildBlock(_ components: Component...) -> Component","type":"codeVoice"}]}},{"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildPartialBlock(first: Component) -> Component"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Builds a partial result component from the first component. Implement both this method and "},{"code":"buildPartialBlock(accumulated:next:)","type":"codeVoice"},{"type":"text","text":" to support building blocks one component at a time. Compared to "},{"type":"codeVoice","code":"buildBlock(_:)"},{"text":", this approach reduces the need for generic overloads that handle different numbers of arguments.","type":"text"}]}]}},{"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildPartialBlock(accumulated: Component, next: Component) -> Component"}]},"definition":{"content":[{"inlineContent":[{"text":"Builds a partial result component by combining an accumulated component with a new component. Implement both this method and ","type":"text"},{"code":"buildPartialBlock(first:)","type":"codeVoice"},{"type":"text","text":" to support building blocks one component at a time. Compared to "},{"code":"buildBlock(_:)","type":"codeVoice"},{"text":", this approach reduces the need for generic overloads that handle different numbers of arguments.","type":"text"}],"type":"paragraph"}]}}]},{"type":"paragraph","inlineContent":[{"text":"A result builder can implement all three of the block-building methods listed above;","type":"text"},{"text":" ","type":"text"},{"text":"in that case, availability determines which method is called.","type":"text"},{"text":" ","type":"text"},{"text":"By default, Swift calls the ","type":"text"},{"type":"codeVoice","code":"buildPartialBlock(first:)"},{"type":"text","text":" and "},{"code":"buildPartialBlock(accumulated:next:)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"methods. To make Swift call "},{"type":"codeVoice","code":"buildBlock(_:)"},{"type":"text","text":" instead,"},{"text":" ","type":"text"},{"text":"mark the enclosing declaration as being available","type":"text"},{"type":"text","text":" "},{"type":"text","text":"before the availability you write on "},{"code":"buildPartialBlock(first:)","type":"codeVoice"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"buildPartialBlock(accumulated:next:)"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The additional result-building methods are as follows:"}]},{"items":[{"term":{"inlineContent":[{"code":"static func buildOptional(_ component: Component?) -> Component","type":"codeVoice"}]},"definition":{"content":[{"inlineContent":[{"type":"text","text":"Builds a partial result from a partial result that can be "},{"code":"nil","type":"codeVoice"},{"text":". Implement this method to support ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" statements that don’t include an ","type":"text"},{"type":"codeVoice","code":"else"},{"text":" clause.","type":"text"}],"type":"paragraph"}]}},{"term":{"inlineContent":[{"code":"static func buildEither(first: Component) -> Component","type":"codeVoice"}]},"definition":{"content":[{"inlineContent":[{"type":"text","text":"Builds a partial result whose value varies depending on some condition. Implement both this method and "},{"type":"codeVoice","code":"buildEither(second:)"},{"type":"text","text":" to support "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements and "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statements that include an "},{"code":"else","type":"codeVoice"},{"type":"text","text":" clause."}],"type":"paragraph"}]}},{"definition":{"content":[{"inlineContent":[{"text":"Builds a partial result whose value varies depending on some condition. Implement both this method and ","type":"text"},{"type":"codeVoice","code":"buildEither(first:)"},{"type":"text","text":" to support "},{"type":"codeVoice","code":"switch"},{"text":" statements and ","type":"text"},{"type":"codeVoice","code":"if"},{"type":"text","text":" statements that include an "},{"code":"else","type":"codeVoice"},{"text":" clause.","type":"text"}],"type":"paragraph"}]},"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildEither(second: Component) -> Component"}]}},{"term":{"inlineContent":[{"code":"static func buildArray(_ components: [Component]) -> Component","type":"codeVoice"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Builds a partial result from an array of partial results. Implement this method to support "},{"code":"for","type":"codeVoice"},{"text":" loops.","type":"text"}]}]}},{"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildExpression(_ expression: Expression) -> Component"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"Builds a partial result from an expression. You can implement this method to perform preprocessing — for example, converting expressions to an internal type — or to provide additional information for type inference at use sites.","type":"text"}]}]}},{"definition":{"content":[{"inlineContent":[{"text":"Builds a final result from a partial result. You can implement this method as part of a result builder that uses a different type for partial and final results, or to perform other postprocessing on a result before returning it.","type":"text"}],"type":"paragraph"}]},"term":{"inlineContent":[{"code":"static func buildFinalResult(_ component: Component) -> FinalResult","type":"codeVoice"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"Builds a partial result that propagates or erases type information outside a compiler-control statement that performs an availability check. You can use this to erase type information that varies between the conditional branches.","type":"text"}]}]},"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildLimitedAvailability(_ component: Component) -> Component"}]}}],"type":"termList"},{"inlineContent":[{"type":"text","text":"For example, the code below defines a simple result builder"},{"type":"text","text":" "},{"type":"text","text":"that builds an array of integers."},{"text":" ","type":"text"},{"type":"text","text":"This code defines "},{"code":"Component","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Expression","type":"codeVoice"},{"text":" as type aliases,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to make it easier to match the examples below to the list of methods above."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@resultBuilder","struct ArrayBuilder {","    typealias Component = [Int]","    typealias Expression = Int","    static func buildExpression(_ element: Expression) -> Component {","        return [element]","    }","    static func buildOptional(_ component: Component?) -> Component {","        guard let component = component else { return [] }","        return component","    }","    static func buildEither(first component: Component) -> Component {","        return component","    }","    static func buildEither(second component: Component) -> Component {","        return component","    }","    static func buildArray(_ components: [Component]) -> Component {","        return Array(components.joined())","    }","    static func buildBlock(_ components: Component...) -> Component {","        return Array(components.joined())","    }","}"]},{"anchor":"Result-Transformations","text":"Result Transformations","level":4,"type":"heading"},{"inlineContent":[{"type":"text","text":"The following syntactic transformations are applied recursively"},{"type":"text","text":" "},{"type":"text","text":"to turn code that uses result-builder syntax"},{"text":" ","type":"text"},{"type":"text","text":"into code that calls the static methods of the result builder type:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"If the result builder has a ","type":"text"},{"type":"codeVoice","code":"buildExpression(_:)"},{"type":"text","text":" method,"},{"type":"text","text":" "},{"type":"text","text":"each expression becomes a call to that method."},{"text":" ","type":"text"},{"text":"This transformation is always first.","type":"text"},{"text":" ","type":"text"},{"text":"For example, the following declarations are equivalent:","type":"text"}],"type":"paragraph"},{"code":["@ArrayBuilder var builderNumber: [Int] { 10 }","var manualNumber = ArrayBuilder.buildExpression(10)"],"type":"codeListing","syntax":"swift"}]},{"content":[{"inlineContent":[{"text":"An assignment statement is transformed like an expression,","type":"text"},{"text":" ","type":"text"},{"text":"but is understood to evaluate to ","type":"text"},{"type":"codeVoice","code":"()"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"You can define an overload of ","type":"text"},{"type":"codeVoice","code":"buildExpression(_:)"},{"type":"text","text":" "},{"text":"that takes an argument of type ","type":"text"},{"type":"codeVoice","code":"()"},{"text":" to handle assignments specifically.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"A branch statement that checks an availability condition","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"becomes a call to the "},{"code":"buildLimitedAvailability(_:)","type":"codeVoice"},{"type":"text","text":" method."},{"text":" ","type":"text"},{"type":"text","text":"This transformation happens before the transformation into a call to"},{"text":" ","type":"text"},{"code":"buildEither(first:)","type":"codeVoice"},{"text":", ","type":"text"},{"code":"buildEither(second:)","type":"codeVoice"},{"type":"text","text":", or "},{"type":"codeVoice","code":"buildOptional(_:)"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You use the "},{"code":"buildLimitedAvailability(_:)","type":"codeVoice"},{"type":"text","text":" method to erase type information"},{"type":"text","text":" "},{"type":"text","text":"that changes depending on which branch is taken."},{"type":"text","text":" "},{"text":"For example,","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"code":"buildEither(first:)","type":"codeVoice"},{"type":"text","text":" and  "},{"code":"buildEither(second:)","type":"codeVoice"},{"text":" methods below","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use a generic type that captures type information about both branches."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["protocol Drawable {","    func draw() -> String","}","struct Text: Drawable {","    var content: String","    init(_ content: String) { self.content = content }","    func draw() -> String { return content }","}","struct Line<D: Drawable>: Drawable {","      var elements: [D]","      func draw() -> String {","        return elements.map { $0.draw() }.joined(separator: \"\")","    }","}","struct DrawEither<First: Drawable, Second: Drawable>: Drawable {","    var content: Drawable","    func draw() -> String { return content.draw() }","}","","@resultBuilder","struct DrawingBuilder {","    static func buildBlock<D: Drawable>(_ components: D...) -> Line<D> {","        return Line(elements: components)","    }","    static func buildEither<First, Second>(first: First)","            -> DrawEither<First, Second> {","        return DrawEither(content: first)","    }","    static func buildEither<First, Second>(second: Second)","            -> DrawEither<First, Second> {","        return DrawEither(content: second)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this approach causes a problem in code that has availability checks:"}]},{"type":"codeListing","syntax":"swift","code":["@available(macOS 99, *)","struct FutureText: Drawable {","    var content: String","    init(_ content: String) { self.content = content }","    func draw() -> String { return content }","}","@DrawingBuilder var brokenDrawing: Drawable {","    if #available(macOS 99, *) {","        FutureText(\"Inside.future\")  \/\/ Problem","    } else {","        Text(\"Inside.present\")","    }","}","\/\/ The type of brokenDrawing is Line<DrawEither<Line<FutureText>, Line<Text>>>"]},{"inlineContent":[{"text":"In the code above,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FutureText"},{"type":"text","text":" appears as part of the type of "},{"type":"codeVoice","code":"brokenDrawing"},{"text":" ","type":"text"},{"text":"because it’s one of the types in the ","type":"text"},{"code":"DrawEither","type":"codeVoice"},{"type":"text","text":" generic type."},{"type":"text","text":" "},{"text":"This could cause your program to crash if ","type":"text"},{"type":"codeVoice","code":"FutureText"},{"type":"text","text":" "},{"type":"text","text":"isn’t available at runtime,"},{"type":"text","text":" "},{"text":"even in the case where that type is explicitly not being used.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"To solve this problem,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"implement a "},{"code":"buildLimitedAvailability(_:)","type":"codeVoice"},{"type":"text","text":" method"},{"type":"text","text":" "},{"text":"to erase type information.","type":"text"},{"text":" ","type":"text"},{"text":"For example, the code below builds an ","type":"text"},{"type":"codeVoice","code":"AnyDrawable"},{"type":"text","text":" value"},{"type":"text","text":" "},{"text":"from its availability check.","type":"text"}],"type":"paragraph"},{"code":["struct AnyDrawable: Drawable {","    var content: Drawable","    func draw() -> String { return content.draw() }","}","extension DrawingBuilder {","    static func buildLimitedAvailability(_ content: Drawable) -> AnyDrawable {","        return AnyDrawable(content: content)","    }","}","","@DrawingBuilder var typeErasedDrawing: Drawable {","    if #available(macOS 99, *) {","        FutureText(\"Inside.future\")","    } else {","        Text(\"Inside.present\")","    }","}","\/\/ The type of typeErasedDrawing is Line<DrawEither<AnyDrawable, Line<Text>>>"],"type":"codeListing","syntax":"swift"}]},{"content":[{"inlineContent":[{"type":"text","text":"A branch statement becomes a series of nested calls to the"},{"type":"text","text":" "},{"code":"buildEither(first:)","type":"codeVoice"},{"type":"text","text":" and "},{"code":"buildEither(second:)","type":"codeVoice"},{"text":" methods.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The statements’ conditions and cases are mapped onto"},{"type":"text","text":" "},{"type":"text","text":"the leaf nodes of a binary tree,"},{"type":"text","text":" "},{"type":"text","text":"and the statement becomes"},{"type":"text","text":" "},{"text":"a nested call to the ","type":"text"},{"code":"buildEither","type":"codeVoice"},{"type":"text","text":" methods"},{"text":" ","type":"text"},{"text":"following the path to that leaf node from the root node.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example, if you write a switch statement that has three cases,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the compiler uses a binary tree with three leaf nodes."},{"text":" ","type":"text"},{"text":"Likewise,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because the path from the root node to the second case is"},{"text":" ","type":"text"},{"text":"“second child” and then “first child”,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that case becomes a nested call like"},{"type":"text","text":" "},{"type":"codeVoice","code":"buildEither(first: buildEither(second: ... ))"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The following declarations are equivalent:"}]},{"code":["let someNumber = 19","@ArrayBuilder var builderConditional: [Int] {","    if someNumber < 12 {","        31","    } else if someNumber == 19 {","        32","    } else {","        33","    }","}","","var manualConditional: [Int]","if someNumber < 12 {","    let partialResult = ArrayBuilder.buildExpression(31)","    let outerPartialResult = ArrayBuilder.buildEither(first: partialResult)","    manualConditional = ArrayBuilder.buildEither(first: outerPartialResult)","} else if someNumber == 19 {","    let partialResult = ArrayBuilder.buildExpression(32)","    let outerPartialResult = ArrayBuilder.buildEither(second: partialResult)","    manualConditional = ArrayBuilder.buildEither(first: outerPartialResult)","} else {","    let partialResult = ArrayBuilder.buildExpression(33)","    manualConditional = ArrayBuilder.buildEither(second: partialResult)","}"],"syntax":"swift","type":"codeListing"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A branch statement that might not produce a value,","type":"text"},{"text":" ","type":"text"},{"text":"like an ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":" statement without an "},{"type":"codeVoice","code":"else"},{"text":" clause,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"becomes a call to "},{"type":"codeVoice","code":"buildOptional(_:)"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If the "},{"code":"if","type":"codeVoice"},{"text":" statement’s condition is satisfied,","type":"text"},{"text":" ","type":"text"},{"text":"its code block is transformed and passed as the argument;","type":"text"},{"type":"text","text":" "},{"text":"otherwise, ","type":"text"},{"type":"codeVoice","code":"buildOptional(_:)"},{"type":"text","text":" is called with "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" as its argument."},{"type":"text","text":" "},{"type":"text","text":"For example, the following declarations are equivalent:"}]},{"type":"codeListing","syntax":"swift","code":["@ArrayBuilder var builderOptional: [Int] {","    if (someNumber % 2) == 1 { 20 }","}","","var partialResult: [Int]? = nil","if (someNumber % 2) == 1 {","    partialResult = ArrayBuilder.buildExpression(20)","}","var manualOptional = ArrayBuilder.buildOptional(partialResult)"]}]},{"content":[{"inlineContent":[{"type":"text","text":"If the result builder implements"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"buildPartialBlock(first:)"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"codeVoice","code":"buildPartialBlock(accumulated:next:)"},{"type":"text","text":" methods,"},{"type":"text","text":" "},{"text":"a code block or ","type":"text"},{"code":"do","type":"codeVoice"},{"type":"text","text":" statement becomes a call to those methods."},{"type":"text","text":" "},{"text":"The first statement inside of the block","type":"text"},{"type":"text","text":" "},{"text":"is transformed to become an argument","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"code":"buildPartialBlock(first:)","type":"codeVoice"},{"text":" method,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and the remaining statements become nested calls"},{"text":" ","type":"text"},{"type":"text","text":"to the "},{"type":"codeVoice","code":"buildPartialBlock(accumulated:next:)"},{"text":" method.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, the following declarations are equivalent:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct DrawBoth<First: Drawable, Second: Drawable>: Drawable {","    var first: First","    var second: Second","    func draw() -> String { return first.draw() + second.draw() }","}","","@resultBuilder","struct DrawingPartialBlockBuilder {","    static func buildPartialBlock<D: Drawable>(first: D) -> D {","        return first","    }","    static func buildPartialBlock<Accumulated: Drawable, Next: Drawable>(","        accumulated: Accumulated, next: Next","    ) -> DrawBoth<Accumulated, Next> {","        return DrawBoth(first: accumulated, second: next)","    }","}","","@DrawingPartialBlockBuilder var builderBlock: some Drawable {","    Text(\"First\")","    Line(elements: [Text(\"Second\"), Text(\"Third\")])","    Text(\"Last\")","}","","let partialResult1 = DrawingPartialBlockBuilder.buildPartialBlock(first: Text(\"first\"))","let partialResult2 = DrawingPartialBlockBuilder.buildPartialBlock(","    accumulated: partialResult1,","    next: Line(elements: [Text(\"Second\"), Text(\"Third\")])",")","let manualResult = DrawingPartialBlockBuilder.buildPartialBlock(","    accumulated: partialResult2,","    next: Text(\"Last\")",")"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Otherwise, a code block or "},{"type":"codeVoice","code":"do"},{"type":"text","text":" statement"},{"type":"text","text":" "},{"text":"becomes a call to the ","type":"text"},{"type":"codeVoice","code":"buildBlock(_:)"},{"type":"text","text":" method."},{"type":"text","text":" "},{"text":"Each of the statements inside of the block is transformed,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"one at a time,"},{"type":"text","text":" "},{"type":"text","text":"and they become the arguments to the "},{"type":"codeVoice","code":"buildBlock(_:)"},{"type":"text","text":" method."},{"type":"text","text":" "},{"text":"For example, the following declarations are equivalent:","type":"text"}]},{"code":["@ArrayBuilder var builderBlock: [Int] {","    100","    200","    300","}","","var manualBlock = ArrayBuilder.buildBlock(","    ArrayBuilder.buildExpression(100),","    ArrayBuilder.buildExpression(200),","    ArrayBuilder.buildExpression(300)",")"],"type":"codeListing","syntax":"swift"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"for"},{"type":"text","text":" loop becomes a temporary variable, a "},{"code":"for","type":"codeVoice"},{"type":"text","text":" loop,"},{"text":" ","type":"text"},{"text":"and call to the ","type":"text"},{"code":"buildArray(_:)","type":"codeVoice"},{"text":" method.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The new "},{"type":"codeVoice","code":"for"},{"text":" loop iterates over the sequence","type":"text"},{"text":" ","type":"text"},{"text":"and appends each partial result to that array.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The temporary array is passed as the argument in the "},{"code":"buildArray(_:)","type":"codeVoice"},{"type":"text","text":" call."},{"text":" ","type":"text"},{"text":"For example, the following declarations are equivalent:","type":"text"}]},{"code":["@ArrayBuilder var builderArray: [Int] {","    for i in 5...7 {","        100 + i","    }","}","","var temporary: [[Int]] = []","for i in 5...7 {","    let partialResult = ArrayBuilder.buildExpression(100 + i)","    temporary.append(partialResult)","}","let manualArray = ArrayBuilder.buildArray(temporary)"],"syntax":"swift","type":"codeListing"}]},{"content":[{"inlineContent":[{"text":"If the result builder has a ","type":"text"},{"type":"codeVoice","code":"buildFinalResult(_:)"},{"type":"text","text":" method,"},{"text":" ","type":"text"},{"type":"text","text":"the final result becomes a call to that method."},{"text":" ","type":"text"},{"type":"text","text":"This transformation is always last."}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"Although the transformation behavior is described in terms of temporary variables,"},{"text":" ","type":"text"},{"type":"text","text":"using a result builder doesn’t actually create any new declarations"},{"text":" ","type":"text"},{"type":"text","text":"that are visible from the rest of your code."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can’t use"},{"type":"text","text":" "},{"type":"codeVoice","code":"break"},{"text":", ","type":"text"},{"code":"continue","type":"codeVoice"},{"text":", ","type":"text"},{"code":"defer","type":"codeVoice"},{"type":"text","text":", "},{"code":"guard","type":"codeVoice"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"return"},{"text":" statements,","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"while"},{"type":"text","text":" statements,"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"do"},{"text":"-","type":"text"},{"code":"catch","type":"codeVoice"},{"type":"text","text":" statements"},{"type":"text","text":" "},{"type":"text","text":"in the code that a result builder transforms."}]},{"inlineContent":[{"type":"text","text":"The transformation process doesn’t change declarations in the code,"},{"type":"text","text":" "},{"text":"which lets you use temporary constants and variables","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to build up expressions piece by piece."},{"type":"text","text":" "},{"type":"text","text":"It also doesn’t change"},{"type":"text","text":" "},{"type":"codeVoice","code":"throw"},{"type":"text","text":" statements,"},{"type":"text","text":" "},{"type":"text","text":"compile-time diagnostic statements,"},{"text":" ","type":"text"},{"type":"text","text":"or closures that contain a "},{"code":"return","type":"codeVoice"},{"type":"text","text":" statement."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Whenever possible, transformations are coalesced.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, the expression "},{"type":"codeVoice","code":"4 + 5 * 6"},{"text":" becomes","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"buildExpression(4 + 5 * 6)"},{"type":"text","text":" rather multiple calls to that function."},{"type":"text","text":" "},{"text":"Likewise, nested branch statements become","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a single binary tree of calls to the "},{"type":"codeVoice","code":"buildEither"},{"text":" methods.","type":"text"}]},{"anchor":"Custom-Result-Builder-Attributes","level":4,"type":"heading","text":"Custom Result-Builder Attributes"},{"type":"paragraph","inlineContent":[{"text":"Creating a result builder type creates a custom attribute with the same name.","type":"text"},{"text":" ","type":"text"},{"text":"You can apply that attribute in the following places:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"text":"On a function declaration,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the result builder builds the body of the function."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"On a variable or subscript declaration that includes a getter,"},{"type":"text","text":" "},{"type":"text","text":"the result builder builds the body of the getter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"On a parameter in a function declaration,","type":"text"},{"type":"text","text":" "},{"text":"the result builder builds the body of a closure","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that’s passed as the corresponding argument."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying a result builder attribute doesn’t impact ABI compatibility."},{"text":" ","type":"text"},{"text":"Applying a result builder attribute to a parameter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"makes that attribute part of the function’s interface,"},{"text":" ","type":"text"},{"type":"text","text":"which can effect source compatibility."}]},{"type":"heading","anchor":"requiresstoredpropertyinits","level":3,"text":"requires_stored_property_inits"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a class declaration","type":"text"},{"text":" ","type":"text"},{"text":"to require all stored properties within the class","type":"text"},{"type":"text","text":" "},{"text":"to provide default values as part of their definitions.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This attribute is inferred for any class"},{"type":"text","text":" "},{"type":"text","text":"that inherits from "},{"type":"codeVoice","code":"NSManagedObject"},{"text":".","type":"text"}]},{"type":"heading","text":"testable","level":3,"anchor":"testable"},{"inlineContent":[{"text":"Apply this attribute to an ","type":"text"},{"code":"import","type":"codeVoice"},{"type":"text","text":" declaration"},{"text":" ","type":"text"},{"text":"to import that module with changes to its access control","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that simplify testing the module’s code."},{"type":"text","text":" "},{"text":"Entities in the imported module","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that are marked with the "},{"code":"internal","type":"codeVoice"},{"type":"text","text":" access-level modifier"},{"type":"text","text":" "},{"text":"are imported as if they were declared with the ","type":"text"},{"code":"public","type":"codeVoice"},{"text":" access-level modifier.","type":"text"},{"type":"text","text":" "},{"text":"Classes and class members","type":"text"},{"text":" ","type":"text"},{"text":"that are marked with the ","type":"text"},{"type":"codeVoice","code":"internal"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"public"},{"type":"text","text":" access-level modifier"},{"type":"text","text":" "},{"text":"are imported as if they were declared with the ","type":"text"},{"code":"open","type":"codeVoice"},{"type":"text","text":" access-level modifier."},{"text":" ","type":"text"},{"text":"The imported module must be compiled with testing enabled.","type":"text"}],"type":"paragraph"},{"text":"UIApplicationMain","type":"heading","anchor":"UIApplicationMain","level":3},{"inlineContent":[{"text":"Apply this attribute to a class","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to indicate that it’s the application delegate."},{"type":"text","text":" "},{"text":"Using this attribute is equivalent to calling the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"UIApplicationMain"},{"type":"text","text":" function and"},{"text":" ","type":"text"},{"text":"passing this class’s name as the name of the delegate class.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you don’t use this attribute,"},{"type":"text","text":" "},{"text":"supply a ","type":"text"},{"code":"main.swift","type":"codeVoice"},{"type":"text","text":" file with code at the top level"},{"type":"text","text":" "},{"text":"that calls the ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/1622933-uiapplicationmain"},{"type":"text","text":" function."},{"type":"text","text":" "},{"type":"text","text":"For example,"},{"text":" ","type":"text"},{"text":"if your app uses a custom subclass of ","type":"text"},{"code":"UIApplication","type":"codeVoice"},{"type":"text","text":" "},{"text":"as its principal class,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"call the "},{"type":"codeVoice","code":"UIApplicationMain(_:_:_:_:)"},{"text":" function","type":"text"},{"text":" ","type":"text"},{"text":"instead of using this attribute.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The Swift code you compile to make an executable"},{"type":"text","text":" "},{"text":"can contain at most one top-level entry point,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as discussed in "},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","level":3,"text":"unchecked","anchor":"unchecked"},{"inlineContent":[{"type":"text","text":"Apply this attribute to a protocol type"},{"type":"text","text":" "},{"type":"text","text":"as part of a type declaration’s list of adopted protocols"},{"text":" ","type":"text"},{"type":"text","text":"to turn off enforcement of that protocol’s requirements."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The only supported protocol is "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"usableFromInline","type":"heading","anchor":"usableFromInline","level":3},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a","type":"text"},{"type":"text","text":" "},{"text":"function, method, computed property, subscript,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"initializer, or deinitializer declaration"},{"type":"text","text":" "},{"type":"text","text":"to allow that symbol to be used in inlinable code"},{"text":" ","type":"text"},{"text":"that’s defined in the same module as the declaration.","type":"text"},{"text":" ","type":"text"},{"text":"The declaration must have the ","type":"text"},{"type":"codeVoice","code":"internal"},{"text":" access-level modifier.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A structure or class marked "},{"code":"usableFromInline","type":"codeVoice"},{"type":"text","text":" "},{"text":"can use only types that are public or ","type":"text"},{"type":"codeVoice","code":"usableFromInline"},{"type":"text","text":" for its properties."},{"text":" ","type":"text"},{"type":"text","text":"An enumeration marked "},{"code":"usableFromInline","type":"codeVoice"},{"text":" ","type":"text"},{"text":"can use only types that are public or ","type":"text"},{"type":"codeVoice","code":"usableFromInline"},{"text":" ","type":"text"},{"type":"text","text":"for the raw values and associated values of its cases."}]},{"inlineContent":[{"text":"Like the ","type":"text"},{"code":"public","type":"codeVoice"},{"type":"text","text":" access-level modifier,"},{"type":"text","text":" "},{"type":"text","text":"this attribute"},{"type":"text","text":" "},{"text":"exposes the declaration as part of the module’s public interface.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Unlike "},{"type":"codeVoice","code":"public"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"the compiler doesn’t allow declarations marked with "},{"type":"codeVoice","code":"usableFromInline"},{"text":" ","type":"text"},{"type":"text","text":"to be referenced by name in code outside the module,"},{"text":" ","type":"text"},{"text":"even though the declaration’s symbol is exported.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"However, code outside the module might still be able"},{"text":" ","type":"text"},{"type":"text","text":"to interact with the declaration’s symbol by using runtime behavior."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Declarations marked with the "},{"type":"codeVoice","code":"inlinable"},{"text":" attribute","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are implicitly usable from inlinable code."},{"text":" ","type":"text"},{"text":"Although either ","type":"text"},{"type":"codeVoice","code":"inlinable"},{"type":"text","text":" or "},{"code":"usableFromInline","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"can be applied to "},{"type":"codeVoice","code":"internal"},{"text":" declarations,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"applying both attributes is an error."}],"type":"paragraph"},{"text":"warn_unqualified_access","anchor":"warnunqualifiedaccess","type":"heading","level":3},{"inlineContent":[{"text":"Apply this attribute to a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"top-level function, instance method, or class or static method"},{"text":" ","type":"text"},{"text":"to trigger warnings when that function or method is used","type":"text"},{"type":"text","text":" "},{"text":"without a preceding qualifier,","type":"text"},{"type":"text","text":" "},{"text":"such as a module name, type name, or instance variable or constant.","type":"text"},{"text":" ","type":"text"},{"text":"Use this attribute to help discourage ambiguity between functions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with the same name that are accessible from the same scope."}],"type":"paragraph"},{"inlineContent":[{"text":"For example,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the Swift standard library includes both a top-level"},{"text":" ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1538339-min\/","isActive":true,"type":"reference"},{"type":"text","text":" "},{"type":"text","text":"function and a"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence\/1641174-min","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"method for sequences with comparable elements."},{"type":"text","text":" "},{"text":"The sequence method is declared with the ","type":"text"},{"code":"warn_unqualified_access","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"text":"to help reduce confusion","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when attempting to use one or the other from within a "},{"code":"Sequence","type":"codeVoice"},{"text":" extension.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Declaration-Attributes-Used-by-Interface-Builder","text":"Declaration Attributes Used by Interface Builder","level":3},{"type":"paragraph","inlineContent":[{"text":"Interface Builder attributes are declaration attributes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"used by Interface Builder to synchronize with Xcode."},{"type":"text","text":" "},{"type":"text","text":"Swift provides the following Interface Builder attributes:"},{"text":" ","type":"text"},{"type":"codeVoice","code":"IBAction"},{"type":"text","text":", "},{"type":"codeVoice","code":"IBSegueAction"},{"text":", ","type":"text"},{"code":"IBOutlet","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"IBDesignable"},{"type":"text","text":", and "},{"code":"IBInspectable","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These attributes are conceptually the same as their"},{"type":"text","text":" "},{"text":"Objective-C counterparts.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You apply the ","type":"text"},{"type":"codeVoice","code":"IBOutlet"},{"type":"text","text":" and "},{"code":"IBInspectable","type":"codeVoice"},{"type":"text","text":" attributes"},{"type":"text","text":" "},{"type":"text","text":"to property declarations of a class."},{"type":"text","text":" "},{"type":"text","text":"You apply the "},{"code":"IBAction","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"IBSegueAction"},{"type":"text","text":" attribute"},{"type":"text","text":" "},{"text":"to method declarations of a class","type":"text"},{"text":" ","type":"text"},{"text":"and the ","type":"text"},{"code":"IBDesignable","type":"codeVoice"},{"text":" attribute to class declarations.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying the "},{"code":"IBAction","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"IBSegueAction"},{"type":"text","text":", "},{"code":"IBOutlet","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"IBDesignable","type":"codeVoice"},{"type":"text","text":", or "},{"code":"IBInspectable","type":"codeVoice"},{"type":"text","text":" attribute"},{"text":" ","type":"text"},{"text":"also implies the ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute.","type":"text"}]},{"level":2,"type":"heading","anchor":"Type-Attributes","text":"Type Attributes"},{"inlineContent":[{"text":"You can apply type attributes to types only.","type":"text"}],"type":"paragraph"},{"text":"autoclosure","level":3,"type":"heading","anchor":"autoclosure"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to delay the evaluation of an expression"},{"text":" ","type":"text"},{"text":"by automatically wrapping that expression in a closure with no arguments.","type":"text"},{"text":" ","type":"text"},{"text":"You apply it to a parameter’s type in a function or method declaration,","type":"text"},{"text":" ","type":"text"},{"text":"for a parameter whose type is a function type that takes no arguments","type":"text"},{"text":" ","type":"text"},{"text":"and that returns a value of the type of the expression.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For an example of how to use the "},{"type":"codeVoice","code":"autoclosure"},{"type":"text","text":" attribute,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures","type":"reference","isActive":true},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","isActive":true},{"text":".","type":"text"}]},{"type":"heading","level":3,"text":"convention","anchor":"convention"},{"inlineContent":[{"text":"Apply this attribute to the type of a function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to indicate its calling conventions."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"convention","type":"codeVoice"},{"type":"text","text":" attribute always appears with"},{"type":"text","text":" "},{"type":"text","text":"one of the following arguments:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"swift"},{"text":" argument indicates a Swift function reference.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This is the standard calling convention for function values in Swift."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"block","type":"codeVoice"},{"type":"text","text":" argument indicates an Objective-C compatible block reference."},{"type":"text","text":" "},{"type":"text","text":"The function value is represented as a reference to the block object,"},{"type":"text","text":" "},{"type":"text","text":"which is an "},{"code":"id","type":"codeVoice"},{"text":"-compatible Objective-C object that embeds its invocation","type":"text"},{"type":"text","text":" "},{"text":"function within the object.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The invocation function uses the C calling convention."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"c","type":"codeVoice"},{"text":" argument indicates a C function reference.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The function value carries no context and uses the C calling convention."}]}]}]},{"inlineContent":[{"type":"text","text":"With a few exceptions,"},{"text":" ","type":"text"},{"text":"a function of any calling convention can be used","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when a function any other calling convention is needed."},{"text":" ","type":"text"},{"text":"A nongeneric global function,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a local function that doesn’t capture any local variables,"},{"type":"text","text":" "},{"type":"text","text":"or a closure that doesn’t capture any local variables"},{"type":"text","text":" "},{"text":"can be converted to the C calling convention.","type":"text"},{"text":" ","type":"text"},{"text":"Other Swift functions can’t be converted to the C calling convention.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"A function with the Objective-C block calling convention"},{"text":" ","type":"text"},{"text":"can’t be converted to the C calling convention.","type":"text"}],"type":"paragraph"},{"text":"escaping","level":3,"anchor":"escaping","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a parameter’s type in a function or method declaration","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to indicate that the parameter’s value can be stored for later execution."},{"text":" ","type":"text"},{"type":"text","text":"This means that the value is allowed to outlive the lifetime of the call."},{"text":" ","type":"text"},{"text":"Function type parameters with the ","type":"text"},{"type":"codeVoice","code":"escaping"},{"type":"text","text":" type attribute"},{"text":" ","type":"text"},{"type":"text","text":"require explicit use of "},{"code":"self.","type":"codeVoice"},{"text":" for properties or methods.","type":"text"},{"text":" ","type":"text"},{"text":"For an example of how to use the ","type":"text"},{"code":"escaping","type":"codeVoice"},{"type":"text","text":" attribute,"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Escaping-Closures","isActive":true},{"text":".","type":"text"}]},{"anchor":"Sendable","level":3,"type":"heading","text":"Sendable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to the type of a function"},{"type":"text","text":" "},{"type":"text","text":"to indicate that the function or closure is sendable."},{"text":" ","type":"text"},{"text":"Applying this attribute to a function type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"has the same meaning as conforming a non–function type"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","isActive":true,"overridingTitle":"Sendable","type":"reference","overridingTitleInlineContent":[{"type":"codeVoice","code":"Sendable"}]},{"type":"text","text":" protocol."}]},{"inlineContent":[{"text":"This attribute is inferred on functions and closures","type":"text"},{"text":" ","type":"text"},{"text":"if the function or closure is used in a context","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that expects a sendable value,"},{"type":"text","text":" "},{"type":"text","text":"and the function or closure satisfies the requirements to be sendable."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A sendable function type"},{"text":" ","type":"text"},{"type":"text","text":"is a subtype of the corresponding nonsendable function type."}],"type":"paragraph"},{"level":2,"type":"heading","anchor":"Switch-Case-Attributes","text":"Switch Case Attributes"},{"inlineContent":[{"type":"text","text":"You can apply switch case attributes to switch cases only."}],"type":"paragraph"},{"anchor":"unknown","level":3,"type":"heading","text":"unknown"},{"inlineContent":[{"type":"text","text":"Apply this attribute to a switch case"},{"text":" ","type":"text"},{"text":"to indicate that it isn’t expected to be matched","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"by any case of the enumeration that’s known"},{"text":" ","type":"text"},{"type":"text","text":"at the time the code is compiled."},{"type":"text","text":" "},{"text":"For an example of how to use the ","type":"text"},{"code":"unknown","type":"codeVoice"},{"type":"text","text":" attribute,"},{"text":" ","type":"text"},{"type":"text","text":"see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases"},{"text":".","type":"text"}],"type":"paragraph"},{"style":"note","name":"Grammar of an attribute","type":"aside","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"attribute"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"@","type":"codeVoice"}]},{"type":"text","text":" "},{"inlineContent":[{"text":"attribute-name","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"attribute-argument-clause"}],"type":"emphasis"},{"inlineContent":[{"text":"?","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"attribute-name"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"emphasis","inlineContent":[{"type":"text","text":"identifier"}]},{"type":"text","text":" "},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"attribute-argument-clause"}]},{"text":" → ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"("}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"balanced-tokens"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"text":" ","type":"text"},{"inlineContent":[{"code":")","type":"codeVoice"}],"type":"strong"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"text":"attributes","type":"text"}],"type":"emphasis"},{"text":" → ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"attribute"}]},{"text":" ","type":"text"},{"inlineContent":[{"text":"attributes","type":"text"}],"type":"emphasis"},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]}]},{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"balanced-tokens"}]},{"type":"text","text":" → "},{"inlineContent":[{"type":"text","text":"balanced-token"}],"type":"emphasis"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"balanced-tokens"}]},{"inlineContent":[{"text":"?","type":"text"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"inlineContent":[{"type":"text","text":"balanced-token"}],"type":"emphasis"},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"("}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"balanced-tokens"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":")","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"text","text":"\n"},{"type":"emphasis","inlineContent":[{"type":"text","text":"balanced-token"}]},{"type":"text","text":" → "},{"type":"strong","inlineContent":[{"code":"[","type":"codeVoice"}]},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"balanced-tokens"}]},{"inlineContent":[{"type":"text","text":"?"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"code":"]","type":"codeVoice"}]},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"balanced-token"}]},{"type":"text","text":" → "},{"inlineContent":[{"code":"{","type":"codeVoice"}],"type":"strong"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"balanced-tokens"}]},{"type":"emphasis","inlineContent":[{"type":"text","text":"?"}]},{"text":" ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"}"}],"type":"strong"},{"text":" ","type":"text"},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"balanced-token","type":"text"}]},{"type":"text","text":" → Any identifier, keyword, literal, or operator "},{"text":"\n","type":"text"},{"type":"emphasis","inlineContent":[{"text":"balanced-token","type":"text"}]},{"text":" → Any punctuation except  ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"("}],"type":"strong"},{"text":",  ","type":"text"},{"type":"strong","inlineContent":[{"code":")","type":"codeVoice"}]},{"type":"text","text":",  "},{"type":"strong","inlineContent":[{"code":"[","type":"codeVoice"}]},{"text":",  ","type":"text"},{"type":"strong","inlineContent":[{"type":"codeVoice","code":"]"}]},{"type":"text","text":",  "},{"inlineContent":[{"type":"codeVoice","code":"{"}],"type":"strong"},{"text":", or  ","type":"text"},{"inlineContent":[{"type":"codeVoice","code":"}"}],"type":"strong"}]}]}],"kind":"content"}],"metadata":{"title":"Attributes"},"sections":[],"kind":"article","schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Add information to declarations and types."}],"hierarchy":{"paths":[["doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language"]]},"references":{"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#propertyWrapper":{"kind":"section","abstract":[],"url":"\/documentation\/the-swift-programming-language\/attributes#propertyWrapper","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#propertyWrapper","title":"propertyWrapper"},"https://developer.apple.com/documentation/foundation/1395135-nsclassfromstring":{"url":"https:\/\/developer.apple.com\/documentation\/foundation\/1395135-nsclassfromstring","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/1395135-nsclassfromstring","title":"NSClassFromString(_:)","titleInlineContent":[{"type":"codeVoice","code":"NSClassFromString(_:)"}],"type":"link"},"https://developer.apple.com/documentation/swift/sendable":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","type":"link","titleInlineContent":[{"type":"codeVoice","code":"Sendable"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","title":"Sendable"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Statements#Switching-Over-Future-Enumeration-Cases":{"url":"\/documentation\/the-swift-programming-language\/statements#Switching-Over-Future-Enumeration-Cases","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Statements#Switching-Over-Future-Enumeration-Cases","title":"Switching Over Future Enumeration Cases","abstract":[],"kind":"section","type":"topic"},"https://developer.apple.com/documentation/swift/keypath":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/keypath","type":"link","titleInlineContent":[{"type":"codeVoice","code":"KeyPath"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keypath","title":"KeyPath"},"https://developer.apple.com/documentation/swift/imported_c_and_objective-c_apis/importing_swift_into_objective-c":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective-c_apis\/importing_swift_into_objective-c","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective-c_apis\/importing_swift_into_objective-c","title":"Importing Swift into Objective-C","titleInlineContent":[{"text":"Importing Swift into Objective-C","type":"text"}],"type":"link"},"https://developer.apple.com/documentation/swift/expressiblebystringliteral":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral","type":"link","titleInlineContent":[{"type":"codeVoice","code":"ExpressibleByStringLiteral"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral","title":"ExpressibleByStringLiteral"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Types#Function-Type":{"url":"\/documentation\/the-swift-programming-language\/types#Function-Type","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Types#Function-Type","title":"Function Type","abstract":[],"kind":"section","type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Declarations#Top-Level-Code":{"kind":"section","abstract":[],"url":"\/documentation\/the-swift-programming-language\/declarations#Top-Level-Code","type":"topic","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Declarations#Top-Level-Code","title":"Top-Level Code"},"https://developer.apple.com/documentation/swift/referencewritablekeypath":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/referencewritablekeypath","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/referencewritablekeypath","title":"ReferenceWritableKeyPath","titleInlineContent":[{"type":"codeVoice","code":"ReferenceWritableKeyPath"}],"type":"link"},"https://developer.apple.com/documentation/uikit/1622933-uiapplicationmain":{"url":"https:\/\/developer.apple.com\/documentation\/uikit\/1622933-uiapplicationmain","type":"link","titleInlineContent":[{"type":"codeVoice","code":"UIApplicationMain(_:_:_:_:)"}],"identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/1622933-uiapplicationmain","title":"UIApplicationMain(_:_:_:_:)"},"https://help.apple.com/xcode/mac/current/#/dev04b3a04ba":{"url":"https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev04b3a04ba","identifier":"https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev04b3a04ba","title":"Xcode Help","titleInlineContent":[{"text":"Xcode Help","type":"text"}],"type":"link"},"https://developer.apple.com/documentation/swift/expressiblebyarrayliteral":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebyarrayliteral","type":"link","titleInlineContent":[{"type":"codeVoice","code":"ExpressibleByArrayLiteral"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebyarrayliteral","title":"ExpressibleByArrayLiteral"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Autoclosures":{"type":"topic","title":"Autoclosures","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Autoclosures","url":"\/documentation\/the-swift-programming-language\/closures#Autoclosures","abstract":[]},"https://developer.apple.com/documentation/swift/sequence/1641174-min":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/sequence\/1641174-min","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence\/1641174-min","title":"min()","titleInlineContent":[{"type":"codeVoice","code":"min()"}],"type":"link"},"https://developer.apple.com/documentation/swift/expressiblebydictionaryliteral/2294108-key":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral\/2294108-key","type":"link","titleInlineContent":[{"type":"codeVoice","code":"Key"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral\/2294108-key","title":"Key"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Expressions#Macro-Expansion-Expression":{"url":"\/documentation\/the-swift-programming-language\/expressions#Macro-Expansion-Expression","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Expressions#Macro-Expansion-Expression","title":"Macro-Expansion Expression","abstract":[],"kind":"section","type":"topic"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011210":{"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Introduction\/Introduction.html#\/\/apple_ref\/doc\/uid\/TP40011210","type":"link","titleInlineContent":[{"text":"Programming with Objective-C","type":"text"}],"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Introduction\/Introduction.html#\/\/apple_ref\/doc\/uid\/TP40011210","title":"Programming with Objective-C"},"https://developer.apple.com/documentation/swift/keyvaluepairs":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/keyvaluepairs","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keyvaluepairs","title":"KeyValuePairs","titleInlineContent":[{"type":"codeVoice","code":"KeyValuePairs"}],"type":"link"},"https://developer.apple.com/documentation/swift/writablekeypath":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/writablekeypath","type":"link","titleInlineContent":[{"type":"codeVoice","code":"WritableKeyPath"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/writablekeypath","title":"WritableKeyPath"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/AdvancedOperators#Result-Builders":{"url":"\/documentation\/the-swift-programming-language\/advancedoperators#Result-Builders","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/AdvancedOperators#Result-Builders","title":"Result Builders","abstract":[],"kind":"section","type":"topic"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Conventions/Conventions.html#//apple_ref/doc/uid/TP40011210-CH10-SW1":{"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Conventions\/Conventions.html#\/\/apple_ref\/doc\/uid\/TP40011210-CH10-SW1","type":"link","titleInlineContent":[{"text":"Conventions","type":"text"}],"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Conventions\/Conventions.html#\/\/apple_ref\/doc\/uid\/TP40011210-CH10-SW1","title":"Conventions"},"https://developer.apple.com/documentation/swift/1538339-min/":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/1538339-min\/","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1538339-min\/","title":"min(_:_:)","titleInlineContent":[{"type":"codeVoice","code":"min(_:_:)"}],"type":"link"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Closures#Escaping-Closures":{"type":"topic","title":"Escaping Closures","kind":"section","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Closures#Escaping-Closures","url":"\/documentation\/the-swift-programming-language\/closures#Escaping-Closures","abstract":[]},"https://developer.apple.com/documentation/swift/expressiblebydictionaryliteral":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral","type":"link","titleInlineContent":[{"type":"codeVoice","code":"ExpressibleByDictionaryLiteral"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral","title":"ExpressibleByDictionaryLiteral"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language":{"title":"The Swift Programming Language (5.9)","kind":"article","role":"collection","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language","url":"\/documentation\/the-swift-programming-language","abstract":[],"type":"topic"},"doc://org.swift.tspl/documentation/The-Swift-Programming-Language/Attributes#inlinable":{"url":"\/documentation\/the-swift-programming-language\/attributes#inlinable","identifier":"doc:\/\/org.swift.tspl\/documentation\/The-Swift-Programming-Language\/Attributes#inlinable","title":"inlinable","abstract":[],"kind":"section","type":"topic"}}}